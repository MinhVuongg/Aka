[
  {
    "c": [ "" ],
    "t": [ ],
    "f": [ ],
    "fm": "string addBinary(string a, string b) {\r     int i = a.size() - 1, j = b.size() - 1, carry = 0;\r     string ret = \"\";\r     while (i >= 0 || j >= 0)\r     {\r       int tmp = carry;\r       if (i >= 0)\r       {\r \ttmp += a[i] - '0';\r \ti --;\r       }\r       if (j >= 0)\r       {\r \ttmp += b[j] - '0';\r \tj --;\r       }\r \r       if (tmp >= 2)\r       {\r \ttmp -= 2;\r \tcarry = 1;\r       }\r       else\r       {\r \tcarry = 0;\r       }\r       ret = (tmp == 0 ? \"0\" : \"1\") + ret;\r     }\r     if (carry)\r     {\r       ret = \"1\" + ret;\r     }\r     return ret;\r   }",
    "fc": "class Solution {\r public:\r   string addBinary(string a, string b) {\r     int i = a.size() - 1, j = b.size() - 1, carry = 0;\r     string ret = \"\";\r     while (i >= 0 || j >= 0)\r     {\r       int tmp = carry;\r       if (i >= 0)\r       {\r \ttmp += a[i] - '0';\r \ti --;\r       }\r       if (j >= 0)\r       {\r \ttmp += b[j] - '0';\r \tj --;\r       }\r \r       if (tmp >= 2)\r       {\r \ttmp -= 2;\r \tcarry = 1;\r       }\r       else\r       {\r \tcarry = 0;\r       }\r       ret = (tmp == 0 ? \"0\" : \"1\") + ret;\r     }\r     if (carry)\r     {\r       ret = \"1\" + ret;\r     }\r     return ret;\r   }\r };",
    "m": [ ],
    "simplified_t": [ ],
    "path_fm": "D:\\py\\test\\folder_11\\solution067.cpp\\Solution\\addBinary(string,string)"
  },
  {
    "c": [ "" ],
    "t": [ ],
    "f": [ ],
    "fm": "int mySqrt(int x) {\r     long lower = 0, upper = x;\r \r     while (lower <= upper)\r     {\r       long mid = (lower + upper) >> 1;\r       if (mid * mid <= x && x < (mid + 1) * (mid + 1))\r       {\r \treturn mid;\r       }\r       else if (x < mid * mid)\r       {\r \tupper = mid - 1;\r       }\r       else\r       {\r \tlower = mid + 1;\r       }\r     }\r     return -1;\r   }",
    "fc": "class Solution {\r public:\r   int mySqrt(int x) {\r     long lower = 0, upper = x;\r \r     while (lower <= upper)\r     {\r       long mid = (lower + upper) >> 1;\r       if (mid * mid <= x && x < (mid + 1) * (mid + 1))\r       {\r \treturn mid;\r       }\r       else if (x < mid * mid)\r       {\r \tupper = mid - 1;\r       }\r       else\r       {\r \tlower = mid + 1;\r       }\r     }\r     return -1;\r   }\r };",
    "m": [ ],
    "simplified_t": [ ],
    "path_fm": "D:\\py\\test\\folder_11\\solution069.cpp\\Solution\\mySqrt(int)"
  },
  {
    "c": [ "" ],
    "t": [ ],
    "f": [ ],
    "fm": "int climbStairs(int n) {\r     vector<int> dp(n);\r \r     dp[1] = 1;\r     dp[2] = 2;\r     \r     for (int i = 3; i <= n; i ++ )\r     {\r       dp[i] = dp[i - 1] + dp[i - 2];\r     }\r     return dp[n];\r   }",
    "fc": "class Solution {\r public:\r   int climbStairs(int n) {\r     vector<int> dp(n);\r \r     dp[1] = 1;\r     dp[2] = 2;\r     \r     for (int i = 3; i <= n; i ++ )\r     {\r       dp[i] = dp[i - 1] + dp[i - 2];\r     }\r     return dp[n];\r   }\r };",
    "m": [ ],
    "simplified_t": [ ],
    "path_fm": "D:\\py\\test\\folder_11\\solution070.cpp\\Solution\\climbStairs(int)"
  },
  {
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_simplifyPath_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_simplifyPath_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution071.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName184830 = new char[2];akaRandomName184830[0] = 46;akaRandomName184830[1] = '\\0';string path=akaRandomName184830;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode path */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_simplifyPath_string_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->simplifyPath(path);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_11\\\\solution071.cpp\\\\Solution\\\\simplifyPath(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_simplifyPath_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution_simplifyPath_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution071.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName552146 = new char[2];akaRandomName552146[0] = 59;akaRandomName552146[1] = '\\0';string path=akaRandomName552146;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode path */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_simplifyPath_string_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->simplifyPath(path);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_11\\\\solution071.cpp\\\\Solution\\\\simplifyPath(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_simplifyPath_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_simplifyPath_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution071.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName399327 = new char[2];akaRandomName399327[0] = 24;akaRandomName399327[1] = '\\0';string path=akaRandomName399327;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode path */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_simplifyPath_string_random_4\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->simplifyPath(path);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_11\\\\solution071.cpp\\\\Solution\\\\simplifyPath(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "string simplifyPath(string path) {\r     stack<string> st;\r     string ret = \"\";\r     \r     for (int i = 0; i < path.size(); )\r     {\r       // Jump when meet character /\r       while (path[i] == '/' && i < path.size())\r \ti ++;\r \r       string s = \"\";\r       while (path[i] != '/' && i < path.size())\r       {\r \ts = s + path[i];\r \ti ++;\r       }\r \r       if (s == \"..\" && !st.empty())\r \tst.pop();\r       else if (s != \"\" && s != \".\" && s != \"..\")\r \tst.push(s);\r     }\r \r     if (st.empty())\r       ret = \"/\";\r \r     while (!st.empty())\r     {\r       ret = \"/\" + st.top() + ret;\r       st.pop();\r     }\r     return ret;\r   }",
    "fc": "class Solution {\r public:\r   string simplifyPath(string path) {\r     stack<string> st;\r     string ret = \"\";\r     \r     for (int i = 0; i < path.size(); )\r     {\r       // Jump when meet character /\r       while (path[i] == '/' && i < path.size())\r \ti ++;\r \r       string s = \"\";\r       while (path[i] != '/' && i < path.size())\r       {\r \ts = s + path[i];\r \ti ++;\r       }\r \r       if (s == \"..\" && !st.empty())\r \tst.pop();\r       else if (s != \"\" && s != \".\" && s != \"..\")\r \tst.push(s);\r     }\r \r     if (st.empty())\r       ret = \"/\";\r \r     while (!st.empty())\r     {\r       ret = \"/\" + st.top() + ret;\r       st.pop();\r     }\r     return ret;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution071.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName740454 = new char[2];akaRandomName740454[0] = 46;akaRandomName740454[1] = '\\0';string path=akaRandomName740454;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode path */\n/* NormalStringDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution071.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName743107 = new char[2];akaRandomName743107[0] = 59;akaRandomName743107[1] = '\\0';string path=akaRandomName743107;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode path */\n/* NormalStringDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution071.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName79795 = new char[2];akaRandomName79795[0] = 24;akaRandomName79795[1] = '\\0';string path=akaRandomName79795;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode path */\n/* NormalStringDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_11\\solution071.cpp\\Solution\\simplifyPath(string)"
  },
  {
    "c": [ "" ],
    "t": [ ],
    "f": [ ],
    "fm": "void setZeroes(vector<vector<int> >& matrix) {\r     if (matrix.empty()) return;\r \r     bool rowZero = false, columnZero = false;        // Variable to record wether first row and first column has zero number.\r \r     for (int i = 0; i < matrix[0].size(); i ++)\r     {\r       if (matrix[0][i] == 0)\r       {\r \trowZero = true;\r       }\r     }\r \r     for (int i = 0; i < matrix.size(); i ++)\r     {\r       if (matrix[i][0] == 0)\r       {\r \tcolumnZero = true;\r       }\r     }\r \r     for (int i = 1; i < matrix.size(); i ++)\r     {\r       for (int j = 1; j < matrix[0].size(); j ++)\r       {\r \tif (matrix[i][j] == 0)\r \t{\r \t  matrix[0][j] = 0;\r \t  matrix[i][0] = 0;\r \t}\r       }\r     }\r \r     for (int i = 1; i < matrix.size(); i ++)\r     {\r       for (int j = 1; j < matrix[0].size(); j ++)\r       {\r \tif (matrix[i][0] == 0 || matrix[0][j] == 0)\r \t{\r \t  matrix[i][j] = 0;\r \t}\r       }\r     }\r \r     if (rowZero)\r     {\r       for (int i = 0; i < matrix[0].size(); i ++)\r       {\r \tmatrix[0][i] = 0;\r       }\r     }\r     if (columnZero)\r     {\r       for (int i = 0; i < matrix.size(); i ++)\r       {\r \tmatrix[i][0] = 0;\r       }\r     }\r   }",
    "fc": "class Solution {\r public:\r   void setZeroes(vector<vector<int> >& matrix) {\r     if (matrix.empty()) return;\r \r     bool rowZero = false, columnZero = false;        // Variable to record wether first row and first column has zero number.\r \r     for (int i = 0; i < matrix[0].size(); i ++)\r     {\r       if (matrix[0][i] == 0)\r       {\r \trowZero = true;\r       }\r     }\r \r     for (int i = 0; i < matrix.size(); i ++)\r     {\r       if (matrix[i][0] == 0)\r       {\r \tcolumnZero = true;\r       }\r     }\r \r     for (int i = 1; i < matrix.size(); i ++)\r     {\r       for (int j = 1; j < matrix[0].size(); j ++)\r       {\r \tif (matrix[i][j] == 0)\r \t{\r \t  matrix[0][j] = 0;\r \t  matrix[i][0] = 0;\r \t}\r       }\r     }\r \r     for (int i = 1; i < matrix.size(); i ++)\r     {\r       for (int j = 1; j < matrix[0].size(); j ++)\r       {\r \tif (matrix[i][0] == 0 || matrix[0][j] == 0)\r \t{\r \t  matrix[i][j] = 0;\r \t}\r       }\r     }\r \r     if (rowZero)\r     {\r       for (int i = 0; i < matrix[0].size(); i ++)\r       {\r \tmatrix[0][i] = 0;\r       }\r     }\r     if (columnZero)\r     {\r       for (int i = 0; i < matrix.size(); i ++)\r       {\r \tmatrix[i][0] = 0;\r       }\r     }\r   }\r };",
    "m": [ ],
    "simplified_t": [ ],
    "path_fm": "D:\\py\\test\\folder_11\\solution073.cpp\\Solution\\setZeroes(vector<vector<int>>&)"
  }
]

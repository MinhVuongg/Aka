[
  {   "t" : [ "void AKA_TEST_Polygon_getWidth_random_0(void) {\n{\nAKA_test_case_name=\"Polygon_getWidth_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Polygon */\n/* ConstructorDataNode Rectangle() */\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle()|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Polygon\\\\AKA_INSTANCE___Polygon\\\\Rectangle()\");AKA_fCall++;AKA_INSTANCE___Polygon = new ::Rectangle();\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Polygon_getWidth_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Polygon->getWidth();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Polygon\\\\getWidth()\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ "int width;", "int height;" ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\Polygon\\getWidth()",   "c" : [ "Polygon() {}" ],   "fc" : "class Polygon {\r protected:\r     int width, height;\r \r public:\r     Polygon() {}\r     int getWidth()\r     {\r         return width;\r     }\r     int getHeight()\r     {\r         return height;\r     }\r     virtual int area(){}; // abstract class\r };",   "m" : [ "int compare(Polygon* r1, Polygon* r2, int size_r1, int size_r2)\r\n{\r\n    if (size_r1 != size_r2)\r\n        return 0;\r\n    else{\r\n        for (int i = 0; i < size_r1; i++)\r\n            if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r\n                    return 0;\r\n        return 1;\r\n    }\r\n}", "int compare(Polygon r1, Polygon r2)\r\n{\r\n    if (r1.getWidth() == r2.getWidth())\r\n        if (r1.getHeight() == r2.getHeight())\r\n            return 1;\r\n    return 0;\r\n}", "int compare(Polygon r1[3], Polygon r2[3])\r\n{\r\n    for (int i = 0; i < 3; i++)\r\n        if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r\n                return 0;\r\n    return 1;\r\n}", "int comparev2(Polygon r1[], Polygon r2[], int size_r1, int size_r2)\r\n{\r\n    if (size_r1 != size_r2)\r\n        return 0;\r\n    else{\r\n        for (int i = 0; i < size_r1; i++)\r\n            if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r\n                    return 0;\r\n        return 1;\r\n    }\r\n}" ],   "fm" : "int getWidth()\r     {\r         return width;\r     }" },
  {   "t" : [ "void AKA_TEST_Polygon_getHeight_random_1(void) {\n{\nAKA_test_case_name=\"Polygon_getHeight_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Polygon */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint AKA_INSTANCE___Polygon_a=163220920;\n/* NormalNumberDataNode b */\nint AKA_INSTANCE___Polygon_b=-59622500;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Polygon\\\\AKA_INSTANCE___Polygon\\\\Rectangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Polygon = new ::Rectangle(AKA_INSTANCE___Polygon_a,AKA_INSTANCE___Polygon_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Polygon_getHeight_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Polygon->getHeight();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Polygon\\\\getHeight()\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ "int width;", "int height;" ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\Polygon\\getHeight()",   "c" : [ "Polygon() {}" ],   "fc" : "class Polygon {\r protected:\r     int width, height;\r \r public:\r     Polygon() {}\r     int getWidth()\r     {\r         return width;\r     }\r     int getHeight()\r     {\r         return height;\r     }\r     virtual int area(){}; // abstract class\r };",   "m" : [ "int compare(Polygon* r1, Polygon* r2, int size_r1, int size_r2)\r\n{\r\n    if (size_r1 != size_r2)\r\n        return 0;\r\n    else{\r\n        for (int i = 0; i < size_r1; i++)\r\n            if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r\n                    return 0;\r\n        return 1;\r\n    }\r\n}", "int compare(Polygon r1, Polygon r2)\r\n{\r\n    if (r1.getWidth() == r2.getWidth())\r\n        if (r1.getHeight() == r2.getHeight())\r\n            return 1;\r\n    return 0;\r\n}", "int compare(Polygon r1[3], Polygon r2[3])\r\n{\r\n    for (int i = 0; i < 3; i++)\r\n        if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r\n                return 0;\r\n    return 1;\r\n}", "int comparev2(Polygon r1[], Polygon r2[], int size_r1, int size_r2)\r\n{\r\n    if (size_r1 != size_r2)\r\n        return 0;\r\n    else{\r\n        for (int i = 0; i < size_r1; i++)\r\n            if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r\n                    return 0;\r\n        return 1;\r\n    }\r\n}" ],   "fm" : "int getHeight()\r     {\r         return height;\r     }" },
  {   "t" : [ "void AKA_TEST_Polygon_area_random_0(void) {\n{\nAKA_test_case_name=\"Polygon_area_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Polygon */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint AKA_INSTANCE___Polygon_a=1250268467;\n/* NormalNumberDataNode b */\nint AKA_INSTANCE___Polygon_b=239612311;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Polygon\\\\AKA_INSTANCE___Polygon\\\\Rectangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Polygon = new ::Rectangle(AKA_INSTANCE___Polygon_a,AKA_INSTANCE___Polygon_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Polygon_area_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Polygon->area();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Polygon\\\\area()\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ "int width;", "int height;" ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\Polygon\\area()",   "c" : [ "Polygon() {}" ],   "fc" : "class Polygon {\r protected:\r     int width, height;\r \r public:\r     Polygon() {}\r     int getWidth()\r     {\r         return width;\r     }\r     int getHeight()\r     {\r         return height;\r     }\r     virtual int area(){}; // abstract class\r };",   "m" : [ ],   "fm" : "virtual int area(){}" },
  {   "t" : [ "void AKA_TEST_Rectangle_area_random_1(void) {\n{\nAKA_test_case_name=\"Rectangle_area_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Rectangle */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint AKA_INSTANCE___Rectangle_a=-41120190;\n/* NormalNumberDataNode b */\nint AKA_INSTANCE___Rectangle_b=265018672;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Rectangle\\\\AKA_INSTANCE___Rectangle\\\\Rectangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Rectangle = new ::Rectangle(AKA_INSTANCE___Rectangle_a,AKA_INSTANCE___Rectangle_b);\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Rectangle_area_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Rectangle->area();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\area()\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\Rectangle\\area()",   "c" : [ "Rectangle(){}", "Rectangle(int a, int b)\r\n    {\r\n        width = a;\r\n        height = b;\r\n    }" ],   "fc" : "class Rectangle : public Polygon {\r public:\r     Rectangle(){}\r     Rectangle(int a, int b)\r     {\r         width = a;\r         height = b;\r     }\r     int area()\r     {\r         return width * height;\r     }\r };",   "m" : [ ],   "fm" : "int area()\r     {\r         return width * height;\r     }" },
  {   "t" : [ "void AKA_TEST_Triangle_area_random_2(void) {\n{\nAKA_test_case_name=\"Triangle_area_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Triangle */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint AKA_INSTANCE___Triangle_a=1548647601;\n/* NormalNumberDataNode b */\nint AKA_INSTANCE___Triangle_b=1811647126;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Triangle\\\\AKA_INSTANCE___Triangle\\\\Triangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Triangle = new ::Triangle(AKA_INSTANCE___Triangle_a,AKA_INSTANCE___Triangle_b);\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Triangle_area_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Triangle->area();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\area()\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\Triangle\\area()",   "c" : [ "Triangle(){}", "Triangle(int a, int b)\r\n    {\r\n        width = a;\r\n        height = b;\r\n    }" ],   "fc" : "class Triangle : public Polygon {\r public:\r     Triangle(){}\r     Triangle(int a, int b)\r     {\r         width = a;\r         height = b;\r     }\r     int area()\r     {\r         return width * height / 2;\r     }\r };",   "m" : [ ],   "fm" : "int area()\r     {\r         return width * height / 2;\r     }" },
  {   "t" : [ "void AKA_TEST_compare_Polygonmul_Polygonmul_int_int_random_0(void) {\n{\nAKA_test_case_name=\"compare_Polygonmul_Polygonmul_int_int_random_0\";\n\n// set up\n;\n\nstd::vector<Polygon*> AKA_VECTOR_INIT_r1;\n\n\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint r10_a=-550734996;\n/* NormalNumberDataNode b */\nint r10_b=-179697833;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r1\\\\AKA_VECTOR_INIT_r1_0\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r1_0 = new ::Triangle(r10_a,r10_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\nAKA_VECTOR_INIT_r1.push_back(AKA_VECTOR_INIT_r1_0);\n\n\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint r11_a=-991649897;\n/* NormalNumberDataNode b */\nint r11_b=691858012;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r1\\\\AKA_VECTOR_INIT_r1_1\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r1_1 = new ::Triangle(r11_a,r11_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\nAKA_VECTOR_INIT_r1.push_back(AKA_VECTOR_INIT_r1_1);\n\n\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r12_a=260710906;\n/* NormalNumberDataNode b */\nint r12_b=778758089;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r1\\\\AKA_VECTOR_INIT_r1_2\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r1_2 = new ::Rectangle(r12_a,r12_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\nAKA_VECTOR_INIT_r1.push_back(AKA_VECTOR_INIT_r1_2);\n\nPolygon* r1 = AKA_VECTOR_INIT_r1[0];\nstd::vector<Polygon*> AKA_VECTOR_INIT_r2;\n\n\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint r20_a=197373081;\n/* NormalNumberDataNode b */\nint r20_b=1672708278;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r2\\\\AKA_VECTOR_INIT_r2_0\\\\r2\\\\Triangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r2_0 = new ::Triangle(r20_a,r20_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\nAKA_VECTOR_INIT_r2.push_back(AKA_VECTOR_INIT_r2_0);\n\n\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r21_a=507593789;\n/* NormalNumberDataNode b */\nint r21_b=-1466071014;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r2\\\\AKA_VECTOR_INIT_r2_1\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r2_1 = new ::Rectangle(r21_a,r21_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n\nAKA_VECTOR_INIT_r2.push_back(AKA_VECTOR_INIT_r2_1);\n\nPolygon* r2 = AKA_VECTOR_INIT_r2[0];\n\n\nint size_r1=4;\n\n\nint size_r2=460215597;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode r1 */\n/* PointerStructureDataNode r2 */\n/* NormalNumberDataNode size_r1 */\n/* NormalNumberDataNode size_r2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test compare_Polygonmul_Polygonmul_int_int_random_0\");int AKA_ACTUAL_OUTPUT=compare(r1,r2,size_r1,size_r2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\compare(Polygon*,Polygon*,int,int)",   "c" : [ ],   "fc" : "",   "m" : [ "int getWidth()\r\n    {\r\n        return width;\r\n    }", "int getHeight()\r\n    {\r\n        return height;\r\n    }" ],   "fm" : "int compare(Polygon* r1, Polygon* r2, int size_r1, int size_r2)\r {\r     if (size_r1 != size_r2)\r         return 0;\r     else{\r         for (int i = 0; i < size_r1; i++)\r             if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r                     return 0;\r         return 1;\r     }\r }" },
  {   "t" : [ "void AKA_TEST_compare_Polygon_Polygon_random_3(void) {\n{\nAKA_test_case_name=\"compare_Polygon_Polygon_random_3\";\n\n// set up\n;\n\n\n\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* ClassDataNode r1 */\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r1_a=1027949756;\n/* NormalNumberDataNode b */\nint r1_b=-728550828;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon,Polygon)\\\\r1\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;::Rectangle r1 = ::Rectangle(r1_a,r1_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r2 */\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r2_a=-354168310;\n/* NormalNumberDataNode b */\nint r2_b=1051373654;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon,Polygon)\\\\r2\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;::Rectangle r2 = ::Rectangle(r2_a,r2_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test compare_Polygon_Polygon_random_3\");int AKA_ACTUAL_OUTPUT=compare(r1,r2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\compare(Polygon,Polygon)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\compare(Polygon,Polygon)",   "c" : [ ],   "fc" : "",   "m" : [ "int getWidth()\r\n    {\r\n        return width;\r\n    }", "int getHeight()\r\n    {\r\n        return height;\r\n    }" ],   "fm" : "int compare(Polygon r1, Polygon r2)\r {\r     if (r1.getWidth() == r2.getWidth())\r         if (r1.getHeight() == r2.getHeight())\r             return 1;\r     return 0;\r }" },
  {   "t" : [ "void AKA_TEST_compare_Polygon_3_Polygon_3_random_2(void) {\n{\nAKA_test_case_name=\"compare_Polygon_3_Polygon_3_random_2\";\n\n// set up\n;\n\nPolygon r1[3];\n\nPolygon r2[3];\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionStructureDataNode r1 */\n/* ClassDataNode r1[0] */\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r10_a=-786241031;\n/* NormalNumberDataNode b */\nint r10_b=1409949452;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r1\\\\r1[0]\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;r1[0] = ::Rectangle(r10_a,r10_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r1[1] */\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r11_a=927541757;\n/* NormalNumberDataNode b */\nint r11_b=-375421258;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r1\\\\r1[1]\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;r1[1] = ::Rectangle(r11_a,r11_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r1[2] */\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint r12_a=239935624;\n/* NormalNumberDataNode b */\nint r12_b=-1014455850;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r1\\\\r1[2]\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;r1[2] = ::Triangle(r12_a,r12_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* OneDimensionStructureDataNode r2 */\n/* ClassDataNode r2[0] */\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r20_a=-1560718111;\n/* NormalNumberDataNode b */\nint r20_b=-205886120;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r2\\\\r2[0]\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;r2[0] = ::Rectangle(r20_a,r20_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r2[1] */\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Triangle() */\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle()|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r2\\\\r2[1]\\\\r2\\\\Triangle()\");AKA_fCall++;r2[1] = ::Triangle();\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r2[2] */\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Rectangle() */\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle()|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r2\\\\r2[2]\\\\r2\\\\Rectangle()\");AKA_fCall++;r2[2] = ::Rectangle();\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test compare_Polygon_3_Polygon_3_random_2\");int AKA_ACTUAL_OUTPUT=compare(r1,r2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\");\n\n\nPolygon EXPECTED_r1[3];\n\n/* ClassDataNode r1[0] */\n\n/* ClassDataNode r1[1] */\n\n/* ClassDataNode r1[2] */\n\n\nPolygon EXPECTED_r2[3];\n\n/* ClassDataNode r2[0] */\n\n/* ClassDataNode r2[1] */\n\n/* ClassDataNode r2[2] */\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\compare(Polygon[3],Polygon[3])",   "c" : [ ],   "fc" : "",   "m" : [ "int getWidth()\r\n    {\r\n        return width;\r\n    }", "int getHeight()\r\n    {\r\n        return height;\r\n    }" ],   "fm" : "int compare(Polygon r1[3], Polygon r2[3])\r {\r     for (int i = 0; i < 3; i++)\r         if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r                 return 0;\r     return 1;\r }" },
  {   "t" : [ "void AKA_TEST_comparev2_Polygon_Polygon_int_int_random_4(void) {\n{\nAKA_test_case_name=\"comparev2_Polygon_Polygon_int_int_random_4\";\n\n// set up\n;\n\nPolygon r1[3];\n\nPolygon r2[3];\n\n\n\nint size_r1=1;\n\n\nint size_r2=-1954239458;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionStructureDataNode r1 */\n/* ClassDataNode r1[0] */\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Rectangle() */\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle()|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r1\\\\r1[0]\\\\r1\\\\Rectangle()\");AKA_fCall++;r1[0] = ::Rectangle();\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r1[1] */\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint r11_a=1943973774;\n/* NormalNumberDataNode b */\nint r11_b=-981138420;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r1\\\\r1[1]\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;r1[1] = ::Triangle(r11_a,r11_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r1[2] */\n/* SubClassDataNode r1 */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint r12_a=1781634190;\n/* NormalNumberDataNode b */\nint r12_b=2050690504;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r1\\\\r1[2]\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;r1[2] = ::Triangle(r12_a,r12_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* OneDimensionStructureDataNode r2 */\n/* ClassDataNode r2[0] */\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Triangle() */\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle()|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r2\\\\r2[0]\\\\r2\\\\Triangle()\");AKA_fCall++;r2[0] = ::Triangle();\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r2[1] */\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Rectangle(int,int) */\n/* NormalNumberDataNode a */\nint r21_a=-1782003261;\n/* NormalNumberDataNode b */\nint r21_b=-689767677;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r2\\\\r2[1]\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;r2[1] = ::Rectangle(r21_a,r21_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* ClassDataNode r2[2] */\n/* SubClassDataNode r2 */\n/* ConstructorDataNode Triangle(int,int) */\n/* NormalNumberDataNode a */\nint r22_a=460534583;\n/* NormalNumberDataNode b */\nint r22_b=-1711342658;\nAKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r2\\\\r2[2]\\\\r2\\\\Triangle(int,int)\");AKA_fCall++;r2[2] = ::Triangle(r22_a,r22_b);\n/* NormalNumberDataNode width */\n/* width : null value -> no code */\n/* NormalNumberDataNode height */\n/* height : null value -> no code */\n/* NormalNumberDataNode size_r1 */\n/* NormalNumberDataNode size_r2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test comparev2_Polygon_Polygon_int_int_random_4\");int AKA_ACTUAL_OUTPUT=comparev2(r1,r2,size_r1,size_r2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\ShapeComparison.cpp\\comparev2(Polygon[],Polygon[],int,int)",   "c" : [ ],   "fc" : "",   "m" : [ "int getWidth()\r\n    {\r\n        return width;\r\n    }", "int getHeight()\r\n    {\r\n        return height;\r\n    }" ],   "fm" : "int comparev2(Polygon r1[], Polygon r2[], int size_r1, int size_r2)\r {\r     if (size_r1 != size_r2)\r         return 0;\r     else{\r         for (int i = 0; i < size_r1; i++)\r             if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight())\r                     return 0;\r         return 1;\r     }\r }" }
]

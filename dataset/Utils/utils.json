[
  {   "m" : [ "int Fibonacci(int n) {\r\n\tif ( n == 0 )\r\n\t\treturn 0;\r\n\telse if ( n == 1 )\r\n\t\treturn 1;\r\n\telse {\r\n\t\tint x = Fibonacci(n-1);\r\n\t\tint y =  Fibonacci(n-2);\r\n\t\treturn x+y;\r\n\t}\r\n}", "int Fibonacci(int n) {\r\n\tif ( n == 0 )\r\n\t\treturn 0;\r\n\telse if ( n == 1 )\r\n\t\treturn 1;\r\n\telse {\r\n\t\tint x = Fibonacci(n-1);\r\n\t\tint y =  Fibonacci(n-2);\r\n\t\treturn x+y;\r\n\t}\r\n}" ],   "fm" : "int check_array(float a[3]) {\r     int k = 0;\r     for (int i = 0; i < 3; i++) {\r         if (abs(a[i] - sqrt(i + 1)) < 0.000001) {\r             k++;\r         }\r     }\r     return k;\r }",   "t" : [ "void AKA_TEST_check_array_float_3_random_1(void) {\n{\nAKA_test_case_name=\"check_array_float_3_random_1\";\n\n// set up\n;\n\nfloat a[3];;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionNumberDataNode a */\n/* NormalNumberDataNode a[0] */\na[0]=0.27;\n/* NormalNumberDataNode a[1] */\na[1]=0.29;\n/* NormalNumberDataNode a[2] */\na[2]=0.31;\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_array_float_3_random_1\");int AKA_ACTUAL_OUTPUT=check_array(a);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_array(float[3])\");\n\n\n\nfloat EXPECTED_a[3];;\n/* NormalNumberDataNode a[0] */\n/* a[0] : null value -> no code */\n/* NormalNumberDataNode a[1] */\n/* a[1] : null value -> no code */\n/* NormalNumberDataNode a[2] */\n/* a[2] : null value -> no code */\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\check_array(float[3])",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "int Tritype(int i, int j, int k) {\r \tint trityp = 0;\r \tif (i < 0 || j < 0 || k < 0)\r \t\treturn 3;\r \tif (i + j <= k || j + k <= i || k + i <= j)\r \t\treturn 3;\r \tif (i == j)\r \t\ttrityp = trityp + 1;\r \tif (i == k)\r \t\ttrityp = trityp + 1;\r \tif (j == k)\r \t\ttrityp = trityp + 1;\r \tif (trityp >= 2)\r \t\ttrityp = 2;\r \treturn trityp;\r }",   "t" : [ "void AKA_TEST_Tritype_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Tritype_int_int_int_random_1\";\n\n// set up\n;\n\n\n\nint i=319958939;\n\n\nint j=1908060676;\n\n\nint k=-744899584;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Tritype_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Tritype(i,j,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\Tritype(int,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Tritype_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Tritype_int_int_int_random_1\";\n\n// set up\n;\n\n\n\nint i=319958939;\n\n\nint j=1908060676;\n\n\nint k=-744899584;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Tritype_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Tritype(i,j,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\Tritype(int,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Tritype_int_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Tritype_int_int_int_random_1\";\n\n// set up\n;\n\n\n\nint i=319958939;\n\n\nint j=1908060676;\n\n\nint k=-744899584;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode i */\n/* NormalNumberDataNode j */\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Tritype_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Tritype(i,j,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\Tritype(int,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\Tritype(int,int,int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "int uninit_var(int a[3], int b[3]) {\r \tint i, k=0;\r \r \tfor(i=0; i<2; i++) {\r \t\tif(a[i] == 0)\r \t\t\treturn 0;\r \r \t\tif(a[i] != a[i+1])\r \t\t\tk = 0;\r \t\telse if(k == 2)\r \t\t\treturn 0;\r \r \t\twhile(b[k] != a[i])\r \t\t\tif(k == 2)\r \t\t\t\treturn 0;\r \t\t\telse\r \t\t\t\tk++;\r \t}\r \treturn 1;\r }",   "t" : [ "void AKA_TEST_uninit_var_int_3_int_3_random_2(void) {\n{\nAKA_test_case_name=\"uninit_var_int_3_int_3_random_2\";\n\n// set up\n;\n\nint a[3];;\nint b[3];;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionNumberDataNode a */\n/* NormalNumberDataNode a[0] */\na[0]=-1845251358;\n/* NormalNumberDataNode a[1] */\na[1]=820619589;\n/* NormalNumberDataNode a[2] */\na[2]=-1332749930;\n/* OneDimensionNumberDataNode b */\n/* NormalNumberDataNode b[0] */\nb[0]=88253211;\n/* NormalNumberDataNode b[1] */\nb[1]=2034614304;\n/* NormalNumberDataNode b[2] */\nb[2]=1518242527;\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test uninit_var_int_3_int_3_random_2\");int AKA_ACTUAL_OUTPUT=uninit_var(a,b);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\uninit_var(int[3],int[3])\");\n\n\n\nint EXPECTED_a[3];;\n/* NormalNumberDataNode a[0] */\n/* a[0] : null value -> no code */\n/* NormalNumberDataNode a[1] */\n/* a[1] : null value -> no code */\n/* NormalNumberDataNode a[2] */\n/* a[2] : null value -> no code */\n\n\n\nint EXPECTED_b[3];;\n/* NormalNumberDataNode b[0] */\n/* b[0] : null value -> no code */\n/* NormalNumberDataNode b[1] */\n/* b[1] : null value -> no code */\n/* NormalNumberDataNode b[2] */\n/* b[2] : null value -> no code */\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\uninit_var(int[3],int[3])",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "int ArrayCmp(int n, unsigned char* t1, unsigned char* t2) {\r \tint i;\r \tfor (i = 0; i < n; i++) {\r \t\tif (t1[i] > t2[i])\r \t\t\treturn -1;\r \t\telse if (t1[i] < t2[i])\r \t\t\treturn 1;\r \t}\r \treturn 0;\r }",   "t" : [ "void AKA_TEST_ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1(void) {\n{\nAKA_test_case_name=\"ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\";\n\n// set up\n;\n\n\n\nint n=9;\nunsigned char AKA_ARRAY_INIT_t1[1];\n\nunsigned char AKA_ARRAY_INIT_t1_0=150;\nAKA_ARRAY_INIT_t1[0] = AKA_ARRAY_INIT_t1_0;\n\nunsigned char AKA_ARRAY_INIT_t1_1=27;\nAKA_ARRAY_INIT_t1[1] = AKA_ARRAY_INIT_t1_1;\n\nunsigned char* t1 = AKA_ARRAY_INIT_t1;\nunsigned char AKA_ARRAY_INIT_t2[1];\n\nunsigned char AKA_ARRAY_INIT_t2_0=197;\nAKA_ARRAY_INIT_t2[0] = AKA_ARRAY_INIT_t2_0;\n\nunsigned char AKA_ARRAY_INIT_t2_1=122;\nAKA_ARRAY_INIT_t2[1] = AKA_ARRAY_INIT_t2_1;\n\nunsigned char* t2 = AKA_ARRAY_INIT_t2;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* PointerCharacterDataNode t1 */\n/* PointerCharacterDataNode t2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\");int AKA_ACTUAL_OUTPUT=ArrayCmp(n,t1,t2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\ArrayCmp(int,unsigned char*,unsigned char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1(void) {\n{\nAKA_test_case_name=\"ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\";\n\n// set up\n;\n\n\n\nint n=9;\nunsigned char AKA_ARRAY_INIT_t1[1];\n\nunsigned char AKA_ARRAY_INIT_t1_0=150;\nAKA_ARRAY_INIT_t1[0] = AKA_ARRAY_INIT_t1_0;\n\nunsigned char AKA_ARRAY_INIT_t1_1=27;\nAKA_ARRAY_INIT_t1[1] = AKA_ARRAY_INIT_t1_1;\n\nunsigned char* t1 = AKA_ARRAY_INIT_t1;\nunsigned char AKA_ARRAY_INIT_t2[1];\n\nunsigned char AKA_ARRAY_INIT_t2_0=197;\nAKA_ARRAY_INIT_t2[0] = AKA_ARRAY_INIT_t2_0;\n\nunsigned char AKA_ARRAY_INIT_t2_1=122;\nAKA_ARRAY_INIT_t2[1] = AKA_ARRAY_INIT_t2_1;\n\nunsigned char* t2 = AKA_ARRAY_INIT_t2;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* PointerCharacterDataNode t1 */\n/* PointerCharacterDataNode t2 */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\");int AKA_ACTUAL_OUTPUT=ArrayCmp(n,t1,t2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\ArrayCmp(int,unsigned char*,unsigned char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\ArrayCmp(int,unsigned char*,unsigned char*)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "int find_maximum(int a[], int n) {\r \tint c, max, index;\r \r \tmax = a[0];\r \tindex = 0;\r \r \tfor (c = 1; c < n; c++) {\r \t\tif (a[c] > max) {\r \t\t\tindex = c;\r \t\t\tmax = a[c];\r \t\t}\r \t}\r \r \treturn index;\r }",   "t" : [ "void AKA_TEST_find_maximum_int_int_random_2(void) {\n{\nAKA_test_case_name=\"find_maximum_int_int_random_2\";\n\n// set up\n;\n\nint a[2];;\n\n\nint n=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionNumberDataNode a */\n/* NormalNumberDataNode a[0] */\na[0]=1483059593;\n/* NormalNumberDataNode a[1] */\na[1]=1237015033;\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test find_maximum_int_int_random_2\");int AKA_ACTUAL_OUTPUT=find_maximum(a,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\find_maximum(int[],int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\find_maximum(int[],int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ "void print (int r) {\r\n\tint c, space;\r\n\tint stars = -1;\r\n\r\n\tif (r <= 0)\r\n\t\treturn;\r\n\r\n\tspace = r - 1;\r\n\tstars += 2;\r\n\r\n\tfor (c = 0; c < space; c++)\r\n\t\tprintf(\" \");\r\n\r\n\tfor (c = 0; c < stars; c++)\r\n\t\tprintf(\"*\");\r\n\r\n\tprintf(\"\\n\");\r\n\tprint(--r);\r\n\r\n\tspace = r + 1;\r\n\tstars -= 2;\r\n\r\n\tfor (c = 0; c < space; c++)\r\n\t\tprintf(\" \");\r\n\r\n\tfor (c = 0; c < stars; c++)\r\n\t\tprintf(\"*\");\r\n\r\n\tprintf(\"\\n\");\r\n}", "void print (int r) {\r\n\tint c, space;\r\n\tint stars = -1;\r\n\r\n\tif (r <= 0)\r\n\t\treturn;\r\n\r\n\tspace = r - 1;\r\n\tstars += 2;\r\n\r\n\tfor (c = 0; c < space; c++)\r\n\t\tprintf(\" \");\r\n\r\n\tfor (c = 0; c < stars; c++)\r\n\t\tprintf(\"*\");\r\n\r\n\tprintf(\"\\n\");\r\n\tprint(--r);\r\n\r\n\tspace = r + 1;\r\n\tstars -= 2;\r\n\r\n\tfor (c = 0; c < space; c++)\r\n\t\tprintf(\" \");\r\n\r\n\tfor (c = 0; c < stars; c++)\r\n\t\tprintf(\"*\");\r\n\r\n\tprintf(\"\\n\");\r\n}" ],   "fm" : "void print (int r) {\r \tint c, space;\r \tint stars = -1;\r \r \tif (r <= 0)\r \t\treturn;\r \r \tspace = r - 1;\r \tstars += 2;\r \r \tfor (c = 0; c < space; c++)\r \t\tprintf(\" \");\r \r \tfor (c = 0; c < stars; c++)\r \t\tprintf(\"*\");\r \r \tprintf(\"\\n\");\r \tprint(--r);\r \r \tspace = r + 1;\r \tstars -= 2;\r \r \tfor (c = 0; c < space; c++)\r \t\tprintf(\" \");\r \r \tfor (c = 0; c < stars; c++)\r \t\tprintf(\"*\");\r \r \tprintf(\"\\n\");\r }",   "t" : [ "void AKA_TEST_print_int_random_3(void) {\n{\nAKA_test_case_name=\"print_int_random_3\";\n\n// set up\n;\n\n\n\nint r=5;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode r */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test print_int_random_3\");print(r);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\print(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\print(int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ "long reverse(long n) {\r\n\tstatic long r = 0;\r\n\r\n\tif (n == 0)\r\n\t\treturn 0;\r\n\r\n\tr = r * 10;\r\n\tr = r + n % 10;\r\n\treverse(n/10);\r\n\treturn r;\r\n}", "long reverse(long n) {\r\n\tstatic long r = 0;\r\n\r\n\tif (n == 0)\r\n\t\treturn 0;\r\n\r\n\tr = r * 10;\r\n\tr = r + n % 10;\r\n\treverse(n/10);\r\n\treturn r;\r\n}" ],   "fm" : "long reverse(long n) {\r \tstatic long r = 0;\r \r \tif (n == 0)\r \t\treturn 0;\r \r \tr = r * 10;\r \tr = r + n % 10;\r \treverse(n/10);\r \treturn r;\r }",   "t" : [ "void AKA_TEST_reverse_long_random_2(void) {\n{\nAKA_test_case_name=\"reverse_long_random_2\";\n\n// set up\n;\n\n\n\nlong n=1258645331;\n\n\nlong AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode r */\n/* r : null value -> no code */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test reverse_long_random_2\");long AKA_ACTUAL_OUTPUT=reverse(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\reverse(long)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\reverse(long)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ "int add_digits(int n) {\r\n\tstatic int sum = 0;\r\n\r\n\tif (n == 0) {\r\n\t\treturn 0;\r\n\t}\r\n\tsum = n%10 + add_digits(n/10);\r\n\r\n\treturn sum;\r\n}", "int add_digits(int n) {\r\n\tstatic int sum = 0;\r\n\r\n\tif (n == 0) {\r\n\t\treturn 0;\r\n\t}\r\n\tsum = n%10 + add_digits(n/10);\r\n\r\n\treturn sum;\r\n}" ],   "fm" : "int add_digits(int n) {\r \tstatic int sum = 0;\r \r \tif (n == 0) {\r \t\treturn 0;\r \t}\r \tsum = n%10 + add_digits(n/10);\r \r \treturn sum;\r }",   "t" : [ "void AKA_TEST_add_digits_int_random_1(void) {\n{\nAKA_test_case_name=\"add_digits_int_random_1\";\n\n// set up\n;\n\n\n\nint n=1635919859;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode sum */\n/* sum : null value -> no code */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test add_digits_int_random_1\");int AKA_ACTUAL_OUTPUT=add_digits(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\add_digits(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\add_digits(int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "int check_prime(int a) {\r \tint c;\r \r \tfor ( c = 2 ; c <= a - 1 ; c++ ) {\r \t\tif ( a%c == 0 )\r \t\t\treturn 0;\r \t}\r \tif ( c == a )\r \t\treturn 1;\r }",   "t" : [ "void AKA_TEST_check_prime_int_random_2(void) {\n{\nAKA_test_case_name=\"check_prime_int_random_2\";\n\n// set up\n;\n\n\n\nint a=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_prime_int_random_2\");int AKA_ACTUAL_OUTPUT=check_prime(a);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_prime(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_check_prime_int_random_2(void) {\n{\nAKA_test_case_name=\"check_prime_int_random_2\";\n\n// set up\n;\n\n\n\nint a=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_prime_int_random_2\");int AKA_ACTUAL_OUTPUT=check_prime(a);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_prime(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\check_prime(int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ "long long power(int n, int r) {\r\n\tint c;\r\n\tlong long p = 1;\r\n\r\n\tfor (c = 1; c <= r; c++)\r\n\t\tp = p*n;\r\n\r\n\treturn p;\r\n}" ],   "fm" : "int check_armstrong(long long n) {\r \tlong long sum = 0, temp;\r \tint remainder, digits = 0;\r \r \ttemp = n;\r \r \twhile (temp != 0) {\r \t\tdigits++;\r \t\ttemp = temp/10;\r \t}\r \r \ttemp = n;\r \r \twhile (temp != 0) {\r \t\tremainder = temp%10;\r \t\tsum = sum + power(remainder, digits);\r \t\ttemp = temp/10;\r \t}\r \r \tif (n == sum)\r \t\treturn 1;\r \telse\r \t\treturn 0;\r }",   "t" : [ "void AKA_TEST_check_armstrong_long_long_random_4(void) {\n{\nAKA_test_case_name=\"check_armstrong_long_long_random_4\";\n\n// set up\n;\n\n\n\nlong long n=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_armstrong_long_long_random_4\");int AKA_ACTUAL_OUTPUT=check_armstrong(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_armstrong(long long)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_check_armstrong_long_long_random_4(void) {\n{\nAKA_test_case_name=\"check_armstrong_long_long_random_4\";\n\n// set up\n;\n\n\n\nlong long n=8;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_armstrong_long_long_random_4\");int AKA_ACTUAL_OUTPUT=check_armstrong(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_armstrong(long long)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\check_armstrong(long long)",   "c" : [ ],   "fc" : "" }
]

[
    {
        "source": "int compareGroup(Person* a, Person* b, int size_a, int size_b) { if (size_a ! = size_b) return 0; else { for (int i = 0; i < size_a; i++) if (strcmp(a[i].name, b[i].name) ! = 0 || a[i].age ! = b[i].age || a[i].salary ! = b[i].salary) return 0; return 1; } }",
        "target": "Person* a; Person* b; int size_a = 5; int size_b = 896064882; int AKA_ACTUAL_OUTPUT = compareGroup(a, b, size_a, size_b)"
    },
    {
        "source": "long linear_search1(long a[], long n, long find) { long c; for (c = 0; c < n; c++) { if (a[c] =  = find) return c; } return -1; }",
        "target": "long a[2]; long n = 5; long find = -243044902; a[0] = 1555610589; a[1] = -2123849484; long AKA_ACTUAL_OUTPUT = Algorithm::Search::linear_search1(a, n, find)"
    },
    {
        "source": "long linear_search1(long a[], long n, long find) { long c; for (c = 0; c < n; c++) { if (a[c] =  = find) return c; } return -1; }",
        "target": "long a[2]; long n = 5; long find = -243044902; a[0] = 1555610589; a[1] = -2123849484; long AKA_ACTUAL_OUTPUT = Algorithm::Search::linear_search1(a, n, find)"
    },
    {
        "source": "long linear_search2(long *pointer, long n, long find) { long c; for (c = 0; c < n; c++) { if (*(pointer + c) =  = find) return c; } return -1; }",
        "target": "long AKA_ARRAY_INIT_pointer[1]; long AKA_ARRAY_INIT_pointer_0 = 389288122; AKA_ARRAY_INIT_pointer[0] = AKA_ARRAY_INIT_pointer_0; long* pointer = AKA_ARRAY_INIT_pointer; long n = 8; long find = -952697251; long AKA_ACTUAL_OUTPUT = Algorithm::Search::linear_search2(pointer, n, find)"
    },
    {
        "source": "long linear_search2(long *pointer, long n, long find) { long c; for (c = 0; c < n; c++) { if (*(pointer + c) =  = find) return c; } return -1; }",
        "target": "long AKA_ARRAY_INIT_pointer[1]; long AKA_ARRAY_INIT_pointer_0 = 389288122; AKA_ARRAY_INIT_pointer[0] = AKA_ARRAY_INIT_pointer_0; long* pointer = AKA_ARRAY_INIT_pointer; long n = 8; long find = -952697251; long AKA_ACTUAL_OUTPUT = Algorithm::Search::linear_search2(pointer, n, find)"
    },
    {
        "source": "int binarySearch(int arr[], int l, int r, int x) { if (r > = l) { int mid = l + (r - l) / 2; if (arr[mid] =  = x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; }",
        "target": "int arr[3]; int l = -1131179258; int r = -456405430; int x = 1538791365; arr[0] = 1302875958; arr[1] = 571177432; arr[2] = -1653009281; int AKA_ACTUAL_OUTPUT = Algorithm::Search::binarySearch(arr, l, r, x)"
    },
    {
        "source": "int binarySearch(int arr[], int l, int r, int x) { if (r > = l) { int mid = l + (r - l) / 2; if (arr[mid] =  = x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; }",
        "target": "int arr[3]; int l = -1131179258; int r = -456405430; int x = 1538791365; arr[0] = 1302875958; arr[1] = 571177432; arr[2] = -1653009281; int AKA_ACTUAL_OUTPUT = Algorithm::Search::binarySearch(arr, l, r, x)"
    },
    {
        "source": "void NaivePatternSearch(char *pat, char *txt) { int M = strlen(pat); int N = strlen(txt); for (int i = 0; i < = N - M; i++) { int j; for (j = 0; j < M; j++) if (txt[i + j] ! = pat[j]) break; if (j =  = M) printf(\"Pattern found at index %d n\", i); } }",
        "target": "char AKA_ARRAY_INIT_pat[2]; char AKA_ARRAY_INIT_pat_0 = -17; AKA_ARRAY_INIT_pat[0] = AKA_ARRAY_INIT_pat_0; char AKA_ARRAY_INIT_pat_1 = 0; AKA_ARRAY_INIT_pat[1] = AKA_ARRAY_INIT_pat_1; char* pat = AKA_ARRAY_INIT_pat; char AKA_ARRAY_INIT_txt[2]; char AKA_ARRAY_INIT_txt_0 = -105; AKA_ARRAY_INIT_txt[0] = AKA_ARRAY_INIT_txt_0; char AKA_ARRAY_INIT_txt_1 = -114; AKA_ARRAY_INIT_txt[1] = AKA_ARRAY_INIT_txt_1; char* txt = AKA_ARRAY_INIT_txt; Algorithm::Search::NaivePatternSearch(pat, txt); } }"
    },
    {
        "source": "void KMPSearch(char *pat, char *txt) { int M = strlen(pat); int N = strlen(txt); int lps[M]; computeLPSArray(pat, M, lps); int i = 0; int j = 0; while (i < N) { if (pat[j] =  = txt[i]) { j++; i++; } if (j =  = M) { printf(\"Found pattern at index %d n\", i - j); j = lps[j - 1]; } else if (i < N && pat[j] ! = txt[i]) { if (j ! = 0) j = lps[j - 1]; else i = i + 1; } } }",
        "target": "char AKA_ARRAY_INIT_pat[2]; char AKA_ARRAY_INIT_pat_0 = 58; AKA_ARRAY_INIT_pat[0] = AKA_ARRAY_INIT_pat_0; char AKA_ARRAY_INIT_pat_1 = 91; AKA_ARRAY_INIT_pat[1] = AKA_ARRAY_INIT_pat_1; char* pat = AKA_ARRAY_INIT_pat; char AKA_ARRAY_INIT_txt[2]; char AKA_ARRAY_INIT_txt_0 = 12; AKA_ARRAY_INIT_txt[0] = AKA_ARRAY_INIT_txt_0; char AKA_ARRAY_INIT_txt_1 = 62; AKA_ARRAY_INIT_txt[1] = AKA_ARRAY_INIT_txt_1; char* txt = AKA_ARRAY_INIT_txt; Algorithm::Search::KMPSearch(pat, txt); } }"
    },
    {
        "source": "int getWidth() { return width; } int width; int height;",
        "target": "AKA_INSTANCE___Polygon = new ::Rectangle(); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Polygon->getWidth()"
    },
    {
        "source": "int getHeight() { return height; } int width; int height;",
        "target": "int AKA_INSTANCE___Polygon_a = 163220920; int AKA_INSTANCE___Polygon_b = -59622500; AKA_INSTANCE___Polygon = new ::Rectangle(AKA_INSTANCE___Polygon_a, AKA_INSTANCE___Polygon_b); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Polygon->getHeight()"
    },
    {
        "source": "virtual int area() { } int width; int height;",
        "target": "int AKA_INSTANCE___Polygon_a = 1250268467; int AKA_INSTANCE___Polygon_b = 239612311; AKA_INSTANCE___Polygon = new ::Rectangle(AKA_INSTANCE___Polygon_a, AKA_INSTANCE___Polygon_b); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Polygon->area()"
    },
    {
        "source": "int area() { return width * height; }",
        "target": "int AKA_INSTANCE___Rectangle_a = -41120190; int AKA_INSTANCE___Rectangle_b = 265018672; AKA_INSTANCE___Rectangle = new ::Rectangle(AKA_INSTANCE___Rectangle_a, AKA_INSTANCE___Rectangle_b); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Rectangle->area()"
    },
    {
        "source": "int area() { return width * height / 2; }",
        "target": "int AKA_INSTANCE___Triangle_a = 1548647601; int AKA_INSTANCE___Triangle_b = 1811647126; AKA_INSTANCE___Triangle = new ::Triangle(AKA_INSTANCE___Triangle_a, AKA_INSTANCE___Triangle_b); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Triangle->area()"
    },
    {
        "source": "int compare(Polygon r1, Polygon r2) { if (r1.getWidth() =  = r2.getWidth()) if (r1.getHeight() =  = r2.getHeight()) return 1; return 0; }",
        "target": "int r1_a = 1027949756; int r1_b = -728550828; ::Rectangle r1 = ::Rectangle(r1_a, r1_b); int r2_a = -354168310; int r2_b = 1051373654; ::Rectangle r2 = ::Rectangle(r2_a, r2_b); int AKA_ACTUAL_OUTPUT = compare(r1, r2)"
    },
    {
        "source": "int compare(Polygon r1[3], Polygon r2[3]) { for (int i = 0; i < 3; i++) if (r1[i].getWidth() ! = r2[i].getWidth() && r1[i].getHeight() ! = r2[i].getHeight()) return 0; return 1; }",
        "target": "Polygon r1[3]; Polygon r2[3]; int r10_a = -786241031; int r10_b = 1409949452; r1[0] = ::Rectangle(r10_a, r10_b); int r11_a = 927541757; int r11_b = -375421258; r1[1] = ::Rectangle(r11_a, r11_b); int r12_a = 239935624; int r12_b = -1014455850; r1[2] = ::Triangle(r12_a, r12_b); int r20_a = -1560718111; int r20_b = -205886120; r2[0] = ::Rectangle(r20_a, r20_b); r2[1] = ::Triangle(); r2[2] = ::Rectangle(); int AKA_ACTUAL_OUTPUT = compare(r1, r2)"
    },
    {
        "source": "int check_array(float a[3]) { int k = 0; for (int i = 0; i < 3; i++) { if (abs(a[i] - sqrt(i + 1)) < 0.000001) { k++; } } return k; }",
        "target": "float a[3]; a[0] = 0.27; a[1] = 0.29; a[2] = 0.31; int AKA_ACTUAL_OUTPUT = check_array(a)"
    },
    {
        "source": "int Tritype(int i, int j, int k) { int trityp = 0; if (i < 0 || j < 0 || k < 0) return 3; if (i + j < = k || j + k < = i || k + i < = j) return 3; if (i =  = j) trityp = trityp + 1; if (i =  = k) trityp = trityp + 1; if (j =  = k) trityp = trityp + 1; if (trityp > = 2) trityp = 2; return trityp; }",
        "target": "int i = 319958939; int j = 1908060676; int k = -744899584; int AKA_ACTUAL_OUTPUT = Tritype(i, j, k)"
    },
    {
        "source": "int Tritype(int i, int j, int k) { int trityp = 0; if (i < 0 || j < 0 || k < 0) return 3; if (i + j < = k || j + k < = i || k + i < = j) return 3; if (i =  = j) trityp = trityp + 1; if (i =  = k) trityp = trityp + 1; if (j =  = k) trityp = trityp + 1; if (trityp > = 2) trityp = 2; return trityp; }",
        "target": "int i = 319958939; int j = 1908060676; int k = -744899584; int AKA_ACTUAL_OUTPUT = Tritype(i, j, k)"
    },
    {
        "source": "int Tritype(int i, int j, int k) { int trityp = 0; if (i < 0 || j < 0 || k < 0) return 3; if (i + j < = k || j + k < = i || k + i < = j) return 3; if (i =  = j) trityp = trityp + 1; if (i =  = k) trityp = trityp + 1; if (j =  = k) trityp = trityp + 1; if (trityp > = 2) trityp = 2; return trityp; }",
        "target": "int i = 319958939; int j = 1908060676; int k = -744899584; int AKA_ACTUAL_OUTPUT = Tritype(i, j, k)"
    },
    {
        "source": "int uninit_var(int a[3], int b[3]) { int i, k = 0; for(i = 0; i<2; i++) { if(a[i] =  = 0) return 0; if(a[i] ! = a[i+1]) k = 0; else if(k =  = 2) return 0; while(b[k] ! = a[i]) if(k =  = 2) return 0; else k++; } return 1; }",
        "target": "int a[3]; int b[3]; a[0] = -1845251358; a[1] = 820619589; a[2] = -1332749930; b[0] = 88253211; b[1] = 2034614304; b[2] = 1518242527; int AKA_ACTUAL_OUTPUT = uninit_var(a, b)"
    },
    {
        "source": "int find_maximum(int a[], int n) { int c, max, index; max = a[0]; index = 0; for (c = 1; c < n; c++) { if (a[c] > max) { index = c; max = a[c]; } } return index; }",
        "target": "int a[2]; int n = 7; a[0] = 1483059593; a[1] = 1237015033; int AKA_ACTUAL_OUTPUT = find_maximum(a, n)"
    },
    {
        "source": "void print (int r) { int c, space; int stars = -1; if (r < = 0) return; space = r - 1; stars + = 2; for (c = 0; c < space; c++) printf(\" \"); for (c = 0; c < stars; c++) printf(\"*\"); printf(\"\\n\"); print(--r); space = r + 1; stars - = 2; for (c = 0; c < space; c++) printf(\" \"); for (c = 0; c < stars; c++) printf(\"*\"); printf(\"\\n\"); }",
        "target": "int r = 5; print(r); } }"
    },
    {
        "source": "long reverse(long n) { static long r = 0; if (n =  = 0) return 0; r = r * 10; r = r + n % 10; reverse(n/10); return r; }",
        "target": "long n = 1258645331; long AKA_ACTUAL_OUTPUT = reverse(n)"
    },
    {
        "source": "int add_digits(int n) { static int sum = 0; if (n =  = 0) { return 0; } sum = n%10 + add_digits(n/10); return sum; }",
        "target": "int n = 1635919859; int AKA_ACTUAL_OUTPUT = add_digits(n)"
    },
    {
        "source": "int check_prime(int a) { int c; for ( c = 2; c < = a - 1; c++ ) { if ( a%c =  = 0 ) return 0; } if ( c =  = a ) return 1; }",
        "target": "int a = 7; int AKA_ACTUAL_OUTPUT = check_prime(a)"
    },
    {
        "source": "int check_prime(int a) { int c; for ( c = 2; c < = a - 1; c++ ) { if ( a%c =  = 0 ) return 0; } if ( c =  = a ) return 1; }",
        "target": "int a = 7; int AKA_ACTUAL_OUTPUT = check_prime(a)"
    },
    {
        "source": "int check_armstrong(long long n) { long long sum = 0, temp; int remainder, digits = 0; temp = n; while (temp ! = 0) { digits++; temp = temp/10; } temp = n; while (temp ! = 0) { remainder = temp%10; sum = sum + power(remainder, digits); temp = temp/10; } if (n =  = sum) return 1; else return 0; }",
        "target": "long long n = 8; int AKA_ACTUAL_OUTPUT = check_armstrong(n)"
    },
    {
        "source": "int check_armstrong(long long n) { long long sum = 0, temp; int remainder, digits = 0; temp = n; while (temp ! = 0) { digits++; temp = temp/10; } temp = n; while (temp ! = 0) { remainder = temp%10; sum = sum + power(remainder, digits); temp = temp/10; } if (n =  = sum) return 1; else return 0; }",
        "target": "long long n = 8; int AKA_ACTUAL_OUTPUT = check_armstrong(n)"
    },
    {
        "source": "int check_vowel(char a) { if ( a > = 'A' && a < = 'Z' ) a = a + 'a' - 'A'; if ( a =  = 'a' || a =  = 'e' || a =  = 'i' || a =  = 'o' || a =  = 'u') return 1; return 0; }",
        "target": "char a = 69; int AKA_ACTUAL_OUTPUT = check_vowel(a)"
    },
    {
        "source": "int check_vowel(char a) { if ( a > = 'A' && a < = 'Z' ) a = a + 'a' - 'A'; if ( a =  = 'a' || a =  = 'e' || a =  = 'i' || a =  = 'o' || a =  = 'u') return 1; return 0; }",
        "target": "char a = 69; int AKA_ACTUAL_OUTPUT = check_vowel(a)"
    },
    {
        "source": "int compare_string(char *first, char *second) { while(*first =  = *second) { if ( *first =  = '\\0' || *second =  = '\\0' ) break; first++; second++; } if( *first =  = '\\0' && *second =  = '\\0' ) return 0; else return -1; }",
        "target": "char AKA_ARRAY_INIT_first[2]; char AKA_ARRAY_INIT_first_0 = 37; AKA_ARRAY_INIT_first[0] = AKA_ARRAY_INIT_first_0; char AKA_ARRAY_INIT_first_1 = 73; AKA_ARRAY_INIT_first[1] = AKA_ARRAY_INIT_first_1; char* first = AKA_ARRAY_INIT_first; char AKA_ARRAY_INIT_second[2]; char AKA_ARRAY_INIT_second_0 = -92; AKA_ARRAY_INIT_second[0] = AKA_ARRAY_INIT_second_0; char AKA_ARRAY_INIT_second_1 = -12; AKA_ARRAY_INIT_second[1] = AKA_ARRAY_INIT_second_1; char* second = AKA_ARRAY_INIT_second; int AKA_ACTUAL_OUTPUT = compare_string(first, second)"
    },
    {
        "source": "int check_subsequence (char a[], char b[]) { int c, d; c = 0; d = 0; while (a[c] ! = '\\0') { while ((a[c] ! = b[d]) && b[d] ! = '\\0') { d++; } if (b[d] =  = '\\0') break; d++; c++; } if (a[c] =  = '\\0') return 1; else return 0; }",
        "target": "char a[1]; char b[1]; a[0] = -42; a[1] = 97; b[0] = -4; b[1] = 68; int AKA_ACTUAL_OUTPUT = check_subsequence(a, b)"
    },
    {
        "source": "int check_anagram(char a[], char b[]) { int first[26], second[26], c = 0; first[20] = 0; second[26] = 0; while (a[c] ! = '\\0') { first[a[c]-'a']++; c++; } c = 0; while (b[c] ! = '\\0') { second[b[c]-'a']++; c++; } for (c = 0; c < 26; c++) { if (first[c] ! = second[c]) return 0; } return 1; }",
        "target": "char a[1]; char b[1]; a[0] = 89; a[1] = -87; b[0] = -45; b[1] = -104; int AKA_ACTUAL_OUTPUT = check_anagram(a, b)"
    },
    {
        "source": "void find_frequency(char s[], int count[]) { int c = 0; while (s[c] ! = '\\0') { if (s[c] > = 'a' && s[c] < = 'z' ) count[s[c]-'a']++; c++; } }",
        "target": "char s[1]; int count[3]; s[0] = 29; s[1] = 65; count[0] = 533692624; count[1] = -1611906770; count[2] = -261894345; find_frequency(s, count); } }"
    },
    {
        "source": "int frequencyDigits(int n, int d) { int c = 0; while (n > 0) { if (n % 10 =  = d) c++; n = n / 10; } return c; }",
        "target": "int n = 3; int d = -670329480; int AKA_ACTUAL_OUTPUT = frequencyDigits(n, d)"
    },
    {
        "source": "int largestNum(int a, int b) { return a * (bool)(a / b) + b * (bool)(b / a); }",
        "target": "int a = -328338691; int b = 801358640; int AKA_ACTUAL_OUTPUT = largestNum(a, b)"
    },
    {
        "source": "int lds(int arr[], int n) { int lds[n]; int i, j, max = 0; for (i = 0; i < n; i++) lds[i] = 1; for (i = 1; i < n; i++) for (j = 0; j < i; j++) if (arr[i] < arr[j] && lds[i] < lds[j] + 1) lds[i] = lds[j] + 1; for (i = 0; i < n; i++) if (max < lds[i]) max = lds[i]; return max; }",
        "target": "int arr[1]; int n = 10; arr[0] = 1112604843; int AKA_ACTUAL_OUTPUT = lds(arr, n)"
    },
    {
        "source": "int getPriority(char C) { if (C =  = '-' || C =  = '+') return 1; else if (C =  = '*' || C =  = '/') return 2; else if (C =  = '^') return 3; return 0; }",
        "target": "char C = -83; int AKA_ACTUAL_OUTPUT = getPriority(C)"
    },
    {
        "source": "void printDistinctPFs(int n) { long long factorCount[n + 1]; bool prime[n + 1]; for (int i = 0; i < = n; i++) { factorCount[i] = 0; prime[i] = true; } for (int i = 2; i < = n; i++) { if (prime[i] =  = true) { factorCount[i] = 1; for (int j = i * 2; j < = n; j + = i) { factorCount[j]++; prime[j] = false; } } } }",
        "target": "int n = 9; printDistinctPFs(n); } }"
    },
    {
        "source": "int steps(int N, int M) { if (N =  = 1) return 0; else if (N =  = 2) return M; return 2 * M + (N - 3); }",
        "target": "int N = 750372595; int M = 1470340448; int AKA_ACTUAL_OUTPUT = steps(N, M)"
    },
    {
        "source": "void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n - 1; i++) { min_idx = i; for (j = i + 1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } }",
        "target": "int arr[3]; int n = 4; arr[0] = 1144247356; arr[1] = 270473347; arr[2] = -563962138; Algorithm::Sort::selectionSort(arr, n); } }"
    },
    {
        "source": "void bubbleSort2(int arr[], int n) { int i, j; bool swapped; for (i = 0; i < n - 1; i++) { swapped = false; for (j = 0; j < n - i - 1; j++) { if (arr[j] > arr[j + 1]) { swap(&arr[j], &arr[j + 1]); swapped = true; } } if (swapped =  = false) break; } }",
        "target": "int arr[2]; int n = 1; arr[0] = -1557408651; arr[1] = -217927943; Algorithm::Sort::bubbleSort2(arr, n); } }"
    },
    {
        "source": "void quickSort(int arr[], int low, int high) { if (low < high) { int pi = partition(arr, low, high); int x = pi - 1; quickSort(arr, low, x); int y = pi + 1; quickSort(arr, y, high); } }",
        "target": "int arr[1]; int low = -967778146; int high = 526574950; arr[0] = -718352632; Algorithm::Sort::quickSort(arr, low, high); } }"
    },
    {
        "source": "void quickSort(int arr[], int low, int high) { if (low < high) { int pi = partition(arr, low, high); int x = pi - 1; quickSort(arr, low, x); int y = pi + 1; quickSort(arr, y, high); } }",
        "target": "int arr[1]; int low = -967778146; int high = 526574950; arr[0] = -718352632; Algorithm::Sort::quickSort(arr, low, high); } }"
    },
    {
        "source": "void quickSortIterative(int arr[], int l, int h) { int stack[h - l + 1]; int top = -1; top++; stack[top] = l; top++; stack[top] = h; while (top > = 0) { h = stack[top]; top--; l = stack[top]; top--; int p = partition(arr, l, h); if (p - 1 > l) { top++; stack[top] = l; top++; stack[top] = p - 1; } if (p + 1 < h) { top++; stack[top] = p + 1; top++; stack[top] = h; } } }",
        "target": "int arr[3]; int l = -1436144676; int h = -1520361884; arr[0] = 1351469861; arr[1] = 1516655763; arr[2] = 1935887102; Algorithm::Sort::quickSortIterative(arr, l, h); } }"
    },
    {
        "source": "int* twoSum(int* nums, int numsSize, int target) { int i, min = nums[0], max = nums[0]; or (i = 0; i < numsSize; i++) { if (nums[i] > max) max = nums[i]; if (nums[i] < min) min = nums[i]; } //Ϊm (int*)calloc((max - min + 1), sizeof(int)); int *twosum = (int*)malloc(sizeof(int) * 2); // ÿɨһnumsԪأԪSize; map[nums[i] - min] = ++i) { int lookfornum = target - nums[i]; if (lookfornum<min || lookfornum>max) continue; int dis = lookfornum - min; // жĿǷѾֵ if (map[dis twosum[0] = i; twosum[1] = map[dis] - 1; break; } } return twosum; }",
        "target": "int AKA_ARRAY_INIT_nums[1]; int AKA_ARRAY_INIT_nums_0 = -1348042565; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int* nums = AKA_ARRAY_INIT_nums; int numsSize = 4; int target = -1666784224; int* AKA_ACTUAL_OUTPUT = twoSum(nums, numsSize, target)"
    },
    {
        "source": "int lengthOfLongestSubstringWithoutContinuousCharacter(char* s) { int i = 1, iMax = 0; while (*(++s) ! = '\\0') { if (*(s - 1) =  = *s) { i = 1; } else { i++; } iMax = iMax < i ? i : iMax; } return iMax; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = -11; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 101; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_ACTUAL_OUTPUT = lengthOfLongestSubstringWithoutContinuousCharacter(s)"
    },
    {
        "source": "int lengthOfLongestSubstringWithoutContinuousCharacter(char* s) { int i = 1, iMax = 0; while (*(++s) ! = '\\0') { if (*(s - 1) =  = *s) { i = 1; } else { i++; } iMax = iMax < i ? i : iMax; } return iMax; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = -11; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 101; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_ACTUAL_OUTPUT = lengthOfLongestSubstringWithoutContinuousCharacter(s)"
    },
    {
        "source": "int lengthOfLongestSubstring(char* s) { int i = 0, j = 2, max = 0, l = 0; if (s[0] =  = '\\0') return 0; else if ((s[1] =  = '\\0')) return 1; while (1) { f (s[i + 1] ! = '\\0') { j = 1; while (1) { if (s[i + j-1] ! = '\\0') { l = checkRepeat(s, i, j); max = max < l ? l : max; if (l < j) break; j++; } else { break; } } i++; } else { break; } } return max; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = 75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_ACTUAL_OUTPUT = lengthOfLongestSubstring(s)"
    },
    {
        "source": "int lengthOfLongestSubstring(char* s) { int i = 0, j = 2, max = 0, l = 0; if (s[0] =  = '\\0') return 0; else if ((s[1] =  = '\\0')) return 1; while (1) { f (s[i + 1] ! = '\\0') { j = 1; while (1) { if (s[i + j-1] ! = '\\0') { l = checkRepeat(s, i, j); max = max < l ? l : max; if (l < j) break; j++; } else { break; } } i++; } else { break; } } return max; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = 75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_ACTUAL_OUTPUT = lengthOfLongestSubstring(s)"
    },
    {
        "source": "int lengthOfLongestSubstring(char* s) { int i = 0, j = 2, max = 0, l = 0; if (s[0] =  = '\\0') return 0; else if ((s[1] =  = '\\0')) return 1; while (1) { f (s[i + 1] ! = '\\0') { j = 1; while (1) { if (s[i + j-1] ! = '\\0') { l = checkRepeat(s, i, j); max = max < l ? l : max; if (l < j) break; j++; } else { break; } } i++; } else { break; } } return max; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = 75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_ACTUAL_OUTPUT = lengthOfLongestSubstring(s)"
    },
    {
        "source": "int lengthOfLongestSubstring(char* s) { int i = 0, j = 2, max = 0, l = 0; if (s[0] =  = '\\0') return 0; else if ((s[1] =  = '\\0')) return 1; while (1) { f (s[i + 1] ! = '\\0') { j = 1; while (1) { if (s[i + j-1] ! = '\\0') { l = checkRepeat(s, i, j); max = max < l ? l : max; if (l < j) break; j++; } else { break; } } i++; } else { break; } } return max; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = 75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_ACTUAL_OUTPUT = lengthOfLongestSubstring(s)"
    },
    {
        "source": "int checkRepeat(char* s, int p, int q) { /صs; int a[200] = { 0 } ; for (i = 0; i < q; i++) { if (a[(int)(s[p + i])]) { break; } else { a[(int)(s[p + i])]++; } } return i; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = 123; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 79; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int p = -1267525398; int q = 7; int AKA_ACTUAL_OUTPUT = checkRepeat(s, p, q)"
    },
    {
        "source": "int checkRepeat(char* s, int p, int q) { /صs; int a[200] = { 0 } ; for (i = 0; i < q; i++) { if (a[(int)(s[p + i])]) { break; } else { a[(int)(s[p + i])]++; } } return i; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = 123; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 79; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int p = -1267525398; int q = 7; int AKA_ACTUAL_OUTPUT = checkRepeat(s, p, q)"
    },
    {
        "source": "int checkRepeat(char* s, int p, int q) { /صs; int a[200] = { 0 } ; for (i = 0; i < q; i++) { if (a[(int)(s[p + i])]) { break; } else { a[(int)(s[p + i])]++; } } return i; }",
        "target": "char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0 = 123; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1 = 79; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int p = -1267525398; int q = 7; int AKA_ACTUAL_OUTPUT = checkRepeat(s, p, q)"
    },
    {
        "source": "string longestPalindrome(string s) { int n = s.length(); int i = 0; int start; int end; int tmp_len; int max_len = 1; int pos = 0; while (i < n) { start = i; end = i; while (end < n - 1 && s[end + 1] =  = s[end]) { ++end; } i = end + 1; // // (start > 0 && end < n - 1 && s[start - 1] =  = s[end + 1]) { --start; ++end; } tmp_len = end - start + 1; if (tmp_len > max_len) { max_len = tmp_len; pos = start; } } return s.substr(pos, max_len); }",
        "target": "AKA_INSTANCE___Solution2 = new ::Solution2(); char* akaRandomName577826 = new char[2]; akaRandomName577826[0] = 61; akaRandomName577826[1] = '\\0'; string s = akaRandomName577826; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution2->longestPalindrome(s)"
    },
    {
        "source": "string longestPalindrome(string s) { if (s.length() =  = 0) { return \"\"; } int maxlength = 0; string maxString = s.substr(0, 1); for (int i = 0; i < s.length() - 1; i++) { if (i =  = 0) { if (s[0] =  = s[1]) { maxlength = 2; maxString = s.substr(0, 2); } continue; } string str = searchPalindrome(s, i); int length = str.length(); if (length > maxlength) { maxlength = length; maxString = str; } } return maxString; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName981925 = new char[2]; akaRandomName981925[0] = -50; akaRandomName981925[1] = '\\0'; string s = akaRandomName981925; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->longestPalindrome(s)"
    },
    {
        "source": "string searchPalindrome(string s, int start) { int length = 0, maxlength = 0; string str = s.substr(start, 1); if (s[start] =  = s[start + 1]) { maxlength = 2; for (int i = 1; start + i + 1 < s.length() && start - i > = 0; i++) { if (s[start + i + 1] =  = s[start - i]) { maxlength + = 2; } else { break; } } str = s.substr(start - maxlength / 2 + 1, maxlength); } / if (s[start - 1] =  = s[start + 1]) { length = 3; for (int i = 2; start + i < s.length() && start - i > = 0; i++) { if (s[start + i] =  = s[start - i]) { length + = 2; } else { break; } } maxlength = maxlength > length ? maxlength : length; str = s.substr(start - (maxlength - 1) / 2, maxlength); } return str; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName450695 = new char[2]; akaRandomName450695[0] = -45; akaRandomName450695[1] = '\\0'; string s = akaRandomName450695; int start = 1; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->searchPalindrome(s, start)"
    },
    {
        "source": "int reverse1(int x) { int nums[10] = { 0 }, i = 0; long result = 0; for (i = 0; i < 10; i++) { nums[i] = x % 10; x = x / 10; if (x =  = 0) break; } // for (int j = 0; j<i+1; j++) { result = result * 10 + nums[j]; if (result > 2147483647 || result < -2147483647) return 0; } return (int)result; }",
        "target": "int x = -1758245503; int AKA_ACTUAL_OUTPUT = reverse1(x)"
    },
    {
        "source": "int reverse(int x) { int temp = 0, i = 0; long result = 0; for (i = 0; i < 10; i++) { temp = x % 10; result = result * 10 + temp; if (result > 2147483647 || result < -2147483647) return 0; x = x / 10; if (x =  = 0) break; } return (int)result; }",
        "target": "int x = 952034234; int AKA_ACTUAL_OUTPUT = reverse(x)"
    },
    {
        "source": "bool isPalindrome1(int x) { long result = 0; int y = x; if (x < 0) return false; for (int i = 0; i < 10; i++) { result = result * 10 + x % 10; x = x / 10; if (x =  = 0) break; } return result - y =  = 0; }",
        "target": "int x = -1514112893; bool AKA_ACTUAL_OUTPUT = isPalindrome1(x)"
    },
    {
        "source": "bool isPalindrome1(int x) { long result = 0; int y = x; if (x < 0) return false; for (int i = 0; i < 10; i++) { result = result * 10 + x % 10; x = x / 10; if (x =  = 0) break; } return result - y =  = 0; }",
        "target": "int x = -1514112893; bool AKA_ACTUAL_OUTPUT = isPalindrome1(x)"
    },
    {
        "source": "bool isPalindrome(int x) { int result = 0; if (x < 0 || (x % 10 =  = 0 && x ! = 0)) return false; for (int i = 0; i < 10; i++) { result = result * 10 + x % 10; x = x / 10; if (x < = result) break; } return result =  = x || result / 10 =  = x; }",
        "target": "int x = 122726964; bool AKA_ACTUAL_OUTPUT = isPalindrome(x)"
    },
    {
        "source": "bool isPalindrome(int x) { int result = 0; if (x < 0 || (x % 10 =  = 0 && x ! = 0)) return false; for (int i = 0; i < 10; i++) { result = result * 10 + x % 10; x = x / 10; if (x < = result) break; } return result =  = x || result / 10 =  = x; }",
        "target": "int x = 122726964; bool AKA_ACTUAL_OUTPUT = isPalindrome(x)"
    },
    {
        "source": "bool isPalindrome(int x) { int result = 0; if (x < 0 || (x % 10 =  = 0 && x ! = 0)) return false; for (int i = 0; i < 10; i++) { result = result * 10 + x % 10; x = x / 10; if (x < = result) break; } return result =  = x || result / 10 =  = x; }",
        "target": "int x = 122726964; bool AKA_ACTUAL_OUTPUT = isPalindrome(x)"
    },
    {
        "source": "void moveZeroes(int* nums, int numsSize) { int i; int temp; int nonZeroCount = 0; for (i = 0; i<numsSize; i++) { if (nums[i] ! = 0) { nums[nonZeroCount] = nums[i]; nonZeroCount++; } if (nums[i] =  = 0) continue; } for (i = nonZeroCount; i<numsSize; i++) { nums[i] = 0; } }",
        "target": "int AKA_ARRAY_INIT_nums[3]; int AKA_ARRAY_INIT_nums_0 = -299672171; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1 = 80937251; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int AKA_ARRAY_INIT_nums_2 = 1809585675; AKA_ARRAY_INIT_nums[2] = AKA_ARRAY_INIT_nums_2; int* nums = AKA_ARRAY_INIT_nums; int numsSize = 7; moveZeroes(nums, numsSize); } }"
    },
    {
        "source": "int findMaxLength1(int* nums, int numsSize) { int diff = 0, maxLength = 0; for (int start = 0; start < numsSize; start++) { diff = 0; for (int i = start; i < numsSize; i++) { diff + = (nums[i] =  = 1 ? 1 : -1); if (diff =  = 0) { int length = i - start + 1; maxLength = length > maxLength ? length : maxLength; } } } return maxLength; }",
        "target": "int AKA_ARRAY_INIT_nums[3]; int AKA_ARRAY_INIT_nums_0 = 1724978225; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1 = 907840714; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int AKA_ARRAY_INIT_nums_2 = 1710867304; AKA_ARRAY_INIT_nums[2] = AKA_ARRAY_INIT_nums_2; int* nums = AKA_ARRAY_INIT_nums; int numsSize = 2; int AKA_ACTUAL_OUTPUT = findMaxLength1(nums, numsSize)"
    },
    {
        "source": "int findMaxLength2(int* nums, int numsSize) { int diff = 0, maxLength = 0; for (int start = 0; start < numsSize; start++) { int iStart = start; if (maxLength) { diff = (nums[start - 1] =  = 0 ? 1 : -1); iStart = start + maxLength - 1; } else { diff = 0; } for (int i = iStart; i < numsSize; i++) { diff + = (nums[i] =  = 1 ? 1 : -1); if (diff =  = 0) { maxLength + = i - iStart + 1; } } } return maxLength; }",
        "target": "int AKA_ARRAY_INIT_nums[2]; int AKA_ARRAY_INIT_nums_0 = -925577948; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1 = -1012031715; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int* nums = AKA_ARRAY_INIT_nums; int numsSize = 1; int AKA_ACTUAL_OUTPUT = findMaxLength2(nums, numsSize)"
    },
    {
        "source": "int findMaxLength(int* nums, int numsSize) { int *sumMap = (int*)calloc(2*numsSize+1, sizeof(int)); for(int i = 0; i<2 * numsSize + 1; i++) { sumMap[i] = numsSize + 1; } sumMap[0 + numsSize] = -1; int sum = 0, maxLength = 0; for (int i = 0; i < numsSize; i++) { sum + = (nums[i] =  = 1 ? 1 : -1); if (sumMap[sum + numsSize] =  = numsSize + 1) { sumMap[sum + numsSize] = i; } else { int curLength = i - sumMap[sum + numsSize]; maxLength = maxLength > curLength ? maxLength : curLength; } } return maxLength; }",
        "target": "int AKA_ARRAY_INIT_nums[3]; int AKA_ARRAY_INIT_nums_0 = -1187104485; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1 = 1019770646; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int AKA_ARRAY_INIT_nums_2 = -1434322140; AKA_ARRAY_INIT_nums[2] = AKA_ARRAY_INIT_nums_2; int* nums = AKA_ARRAY_INIT_nums; int numsSize = 10; int AKA_ACTUAL_OUTPUT = findMaxLength(nums, numsSize)"
    },
    {
        "source": "vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) { if (board[click[0]][click[1]] =  = 'M') { board[click[0]][click[1]] = 'X'; return board; } original_map.assign(board.begin(), board.end()); vector<char> t(board[0].size(), 0); for (int i = 0; i < board.size(); i++) { status_map.push_back(t); } updatestatus_map(); // //p if (status_map[click[0]][click[1]] > 0 ) { original_map[click[0]][click[1]] = status_map[click[0]][click[1]] + 0x30; return original_map; } dfs(click[0], click[1]); return original_map; } vector<vector<char>> original_map; vector<vector<char>> status_map;",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<vector<char>> board; vector<int> click; vector<char> board_element0; char board_element0_element0 = 83; board_element0.push_back(board_element0_element0); board.push_back(board_element0); int click_element0 = 866038439; click.push_back(click_element0); int click_element1 = -1117310019; click.push_back(click_element1); int click_element2 = -1892685060; click.push_back(click_element2); vector<vector<char>> AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->updateBoard(board, click)"
    },
    {
        "source": "void updatestatus_map() { for (int i = 0; i < original_map.size(); i++) { for (int j = 0; j < original_map[i].size(); j++) { if (original_map[i][j] =  = 'M') { setNumsAroundMine(i, j); } } } } vector<vector<char>> original_map; vector<vector<char>> status_map;",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); AKA_INSTANCE___Solution->updatestatus_map(); } }"
    },
    {
        "source": "void setMultiplier(int m) { multiplier = m; } int value; int multiplier;",
        "target": "int AKA_INSTANCE___Calculator_v = -1144447400; int AKA_INSTANCE___Calculator_m = -1285815553; AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v, AKA_INSTANCE___Calculator_m); int m = -1993523832; AKA_INSTANCE___Calculator->setMultiplier(m); } }"
    },
    {
        "source": "int getMultiplier() const { return multiplier; } int value; int multiplier;",
        "target": "int AKA_INSTANCE___Calculator_v = 1556925148; int AKA_INSTANCE___Calculator_m = -87128467; AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v, AKA_INSTANCE___Calculator_m); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Calculator->getMultiplier()"
    },
    {
        "source": "int add(int x) { return calculateAddition(x); } int value; int multiplier;",
        "target": "int AKA_INSTANCE___Calculator_v = 778447519; int AKA_INSTANCE___Calculator_m = -512512729; AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v, AKA_INSTANCE___Calculator_m); int x = 1531976966; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Calculator->add(x)"
    },
    {
        "source": "double divide(int x) { return static_cast<double>(value) / x; } int value; int multiplier;",
        "target": "AKA_INSTANCE___Calculator = new ::Calculator(); int x = 157347228; double AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Calculator->divide(x)"
    },
    {
        "source": "int addAndMultiply(int x) { int sum = add(x); return sum * multiplier; // t value; int multiplier;",
        "target": "AKA_INSTANCE___Calculator = new ::Calculator(); int x = -1715194198; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Calculator->addAndMultiply(x)"
    },
    {
        "source": "int calculateAddition(int x) { return value + x; } int value; int multiplier;",
        "target": "AKA_INSTANCE___Calculator = new ::Calculator(); int x = -304721799; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Calculator->calculateAddition(x)"
    },
    {
        "source": "int testCalculator() { culator calc(10, 2); // Khởi t Kiểm thử hàm add và trả v",
        "target": "int AKA_ACTUAL_OUTPUT = testCalculator()"
    },
    {
        "source": "int brokenCalc(int X, int Y) { if (X > = Y) return X-Y; if ( Y%2 =  = 0 ) return brokenCalc(X, Y/2) + 1; return brokenCalc(X, Y+1) + 1; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int X = 1702818497; int Y = -195975482; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->brokenCalc(X, Y)"
    },
    {
        "source": "void removeBackspaces(string &s) { int i = 0; for(int i = 0; i<s.size(); i++) { if (s[i] =  = '#') { int backSteps = i>0 ? 2 : 1; s.erase(i-backSteps + 1, backSteps); i - = backSteps; } } }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName1787 = new char[2]; akaRandomName1787[0] = -15; akaRandomName1787[1] = '\\0'; string s = akaRandomName1787; AKA_INSTANCE___Solution->removeBackspaces(s); } }"
    },
    {
        "source": "bool backspaceCompare(string S, string T) { removeBackspaces(S); removeBackspaces(T); return S =  = T; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName116023 = new char[2]; akaRandomName116023[0] = 57; akaRandomName116023[1] = '\\0'; string S = akaRandomName116023; char* akaRandomName779212 = new char[2]; akaRandomName779212[0] = 68; akaRandomName779212[1] = '\\0'; string T = akaRandomName779212; bool AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->backspaceCompare(S, T)"
    },
    {
        "source": "int sum1toN(int n) { return n * (n+1) / 2; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int n = -1062502398; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->sum1toN(n)"
    },
    {
        "source": "int numberOfArithmeticSlices(vector<int>& A) { int result = 0; int len = 0; for (int i = 2; i<A.size(); i++) { if (A[i] - A[i-1] =  = A[i-1] - A[i-2]) { len++; } else { result + = sum1toN(len); len = 0; } } return len =  = 0 ? result : result + sum1toN(len); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> A; int A_element0 = 1829852369; A.push_back(A_element0); int A_element1 = -2083519136; A.push_back(A_element1); int A_element2 = -211435912; A.push_back(A_element2); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->numberOfArithmeticSlices(A)"
    },
    {
        "source": "vector< vector<string> > groupAnagrams(vector<string> &strs) { vector< vector<string> > result; map<string, int> m; for(int i = 0; i<strs.size(); i++) { string word = strs[i]; sort(word.begin(), word.end()); if (m.find(word) =  = m.end()) { vector<string> v; v.push_back(strs[i]); result.push_back(v); m[word] = result.size()-1; } else { result[m[word]].push_back(strs[i]); } } for(int i = 0; i<result.size(); i++) { sort(result[i].begin(), result[i].end()); } return result; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; char* akaRandomName845088 = new char[2]; akaRandomName845088[0] = 125; akaRandomName845088[1] = '\\0'; string strs_element0 = akaRandomName845088; strs.push_back(strs_element0); char* akaRandomName708370 = new char[2]; akaRandomName708370[0] = -19; akaRandomName708370[1] = '\\0'; string strs_element1 = akaRandomName708370; strs.push_back(strs_element1); vector<vector<string>> AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->groupAnagrams(strs)"
    },
    {
        "source": "vector< vector<string> > groupAnagrams(vector<string> &strs) { vector< vector<string> > result; map<string, int> m; for(int i = 0; i<strs.size(); i++) { string word = strs[i]; sort(word.begin(), word.end()); if (m.find(word) =  = m.end()) { vector<string> v; v.push_back(strs[i]); result.push_back(v); m[word] = result.size()-1; } else { result[m[word]].push_back(strs[i]); } } for(int i = 0; i<result.size(); i++) { sort(result[i].begin(), result[i].end()); } return result; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; char* akaRandomName637302 = new char[2]; akaRandomName637302[0] = 125; akaRandomName637302[1] = '\\0'; string strs_element0 = akaRandomName637302; strs.push_back(strs_element0); char* akaRandomName412838 = new char[2]; akaRandomName412838[0] = -19; akaRandomName412838[1] = '\\0'; string strs_element1 = akaRandomName412838; strs.push_back(strs_element1); vector<vector<string>> AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->groupAnagrams(strs)"
    },
    {
        "source": "vector< vector<string> > groupAnagrams01(vector<string> &strs) { vector< vector<string> > result; map<string, multiset<string>> m; for(int i = 0; i<strs.size(); i++) { string word = strs[i]; sort(word.begin(), word.end()); m[word].insert(strs[i]); } for(auto item : m) { vector<string> v(item.second.begin(), item.second.end()); result.push_back(v); } return result; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; char* akaRandomName531566 = new char[2]; akaRandomName531566[0] = 5; akaRandomName531566[1] = '\\0'; string strs_element0 = akaRandomName531566; strs.push_back(strs_element0); char* akaRandomName345274 = new char[2]; akaRandomName345274[0] = 47; akaRandomName345274[1] = '\\0'; string strs_element1 = akaRandomName345274; strs.push_back(strs_element1); char* akaRandomName187003 = new char[2]; akaRandomName187003[0] = 103; akaRandomName187003[1] = '\\0'; string strs_element2 = akaRandomName187003; strs.push_back(strs_element2); vector<vector<string>> AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->groupAnagrams01(strs)"
    },
    {
        "source": "vector<string> anagrams(vector<string> &strs) { vector<string> result; map<string, int> m; for(int i = 0; i<strs.size(); i++) { string word = strs[i]; sort(word.begin(), word.end()); if (m.find(word) =  = m.end()) { m[word] = i; } else { if (m[word]> = 0) { result.push_back(strs[m[word]]); m[word] = -1; } result.push_back(strs[i]); } } return result; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; char* akaRandomName224894 = new char[2]; akaRandomName224894[0] = -25; akaRandomName224894[1] = '\\0'; string strs_element0 = akaRandomName224894; strs.push_back(strs_element0); char* akaRandomName450202 = new char[2]; akaRandomName450202[0] = 64; akaRandomName450202[1] = '\\0'; string strs_element1 = akaRandomName450202; strs.push_back(strs_element1); vector<string> AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->anagrams(strs)"
    },
    {
        "source": "int climbStairs(int n) { if (n< = 3) return n; int a[2] = { 2, 3 } ; for(int i = 4; i< = n; i++) { int t = a[0] + a[1]; a[0] = a[1]; a[1] = t; } return a[1]; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int n = 9; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->climbStairs(n)"
    },
    {
        "source": "int climbStairs(int n) { if (n< = 3) return n; int a[2] = { 2, 3 } ; for(int i = 4; i< = n; i++) { int t = a[0] + a[1]; a[0] = a[1]; a[1] = t; } return a[1]; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int n = 9; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->climbStairs(n)"
    },
    {
        "source": "int climbStairs2(int n) { if (n< = 3) return n; return climbStairs(n-1) + climbStairs(n-2); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int n = 1666997024; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->climbStairs2(n)"
    },
    {
        "source": "int abs_min (int x, int y, int z) { return abs_min(x, abs_min(y, z)); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int x = -1137198100; int y = -858464856; int z = 890779558; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->abs_min(x, y, z)"
    },
    {
        "source": "int abs_min(int x, int y) { int ax = abs(x); int ay = abs(y); if (ax =  = ay) return max(x, y); return ax < ay ? x : y; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int x = 651751951; int y = 2072724094; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->abs_min(x, y)"
    },
    {
        "source": "int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts, int target) { int min_gap = INT_MAX; for (auto& base : baseCosts) { int gap = closetToppingCost(toppingCosts, target - base, 0); min_gap = abs_min(min_gap, gap); } return target - min_gap; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> baseCosts; vector<int> toppingCosts; int target = -480273005; int baseCosts_element0 = 861523559; baseCosts.push_back(baseCosts_element0); int baseCosts_element1 = -109141621; baseCosts.push_back(baseCosts_element1); int toppingCosts_element0 = -1812648113; toppingCosts.push_back(toppingCosts_element0); int toppingCosts_element1 = -1301327235; toppingCosts.push_back(toppingCosts_element1); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->closestCost(baseCosts, toppingCosts, target)"
    },
    {
        "source": "int closetToppingCost(vector<int>& costs, int target, int idx ) { if (idx > = costs.size()) return target; int select_none = closetToppingCost(costs, target, idx+1); int select_once = closetToppingCost(costs, target - costs[idx], idx+1); int select_twice = closetToppingCost(costs, target - 2*costs[idx], idx+1); return abs_min(select_none, select_once, select_twice); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> costs; int target = -1295530857; int idx = 1707581507; int costs_element0 = 573464047; costs.push_back(costs_element0); int costs_element1 = 724410652; costs.push_back(costs_element1); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->closetToppingCost(costs, target, idx)"
    },
    {
        "source": "int abs(int n) { return n>0 ? n : -n; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int n = -379318375; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->abs(n)"
    },
    {
        "source": "void printSet(set<int>& s) { cout << \"[\"; for(auto& n : s) { cout << n << \", \"; } cout << \"]\" << endl; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1 = 2062078205; s.insert(s_element1); s.insert(s_element2); AKA_INSTANCE___Solution->printSet(s); set<int> EXPECTED_s; } }"
    },
    {
        "source": "void printSet(set<int>& s) { cout << \"[\"; for(auto& n : s) { cout << n << \", \"; } cout << \"]\" << endl; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1 = 2062078205; s.insert(s_element1); s.insert(s_element2); AKA_INSTANCE___Solution->printSet(s); set<int> EXPECTED_s; } }"
    },
    {
        "source": "void printSet(set<int>& s) { cout << \"[\"; for(auto& n : s) { cout << n << \", \"; } cout << \"]\" << endl; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1 = 2062078205; s.insert(s_element1); s.insert(s_element2); AKA_INSTANCE___Solution->printSet(s); set<int> EXPECTED_s; } }"
    },
    {
        "source": "void printSet(set<int>& s) { cout << \"[\"; for(auto& n : s) { cout << n << \", \"; } cout << \"]\" << endl; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1 = 2062078205; s.insert(s_element1); s.insert(s_element2); AKA_INSTANCE___Solution->printSet(s); set<int> EXPECTED_s; } }"
    },
    {
        "source": "void printSet(set<int>& s) { cout << \"[\"; for(auto& n : s) { cout << n << \", \"; } cout << \"]\" << endl; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1 = 2062078205; s.insert(s_element1); s.insert(s_element2); AKA_INSTANCE___Solution->printSet(s); set<int> EXPECTED_s; } }"
    },
    {
        "source": "int findClosetDiff(set<int>& sums, int goal) { auto it = sums.lower_bound(goal); int high = (it =  = sums.end()) ? *(sums.rbegin()) : *it; int low = (it ! = sums.begin()) ? *(--it) : *it; return min(abs(low - goal), abs(high - goal)); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal = -599725431; sums.insert(sums_element0); int sums_element1 = 1509715816; sums.insert(sums_element1); sums.insert(sums_element2); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->findClosetDiff(sums, goal)"
    },
    {
        "source": "int findClosetDiff(set<int>& sums, int goal) { auto it = sums.lower_bound(goal); int high = (it =  = sums.end()) ? *(sums.rbegin()) : *it; int low = (it ! = sums.begin()) ? *(--it) : *it; return min(abs(low - goal), abs(high - goal)); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal = -599725431; sums.insert(sums_element0); int sums_element1 = 1509715816; sums.insert(sums_element1); sums.insert(sums_element2); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->findClosetDiff(sums, goal)"
    },
    {
        "source": "int findClosetDiff(set<int>& sums, int goal) { auto it = sums.lower_bound(goal); int high = (it =  = sums.end()) ? *(sums.rbegin()) : *it; int low = (it ! = sums.begin()) ? *(--it) : *it; return min(abs(low - goal), abs(high - goal)); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal = -599725431; sums.insert(sums_element0); int sums_element1 = 1509715816; sums.insert(sums_element1); sums.insert(sums_element2); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->findClosetDiff(sums, goal)"
    },
    {
        "source": "int findClosetDiff(set<int>& sums, int goal) { auto it = sums.lower_bound(goal); int high = (it =  = sums.end()) ? *(sums.rbegin()) : *it; int low = (it ! = sums.begin()) ? *(--it) : *it; return min(abs(low - goal), abs(high - goal)); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal = -599725431; sums.insert(sums_element0); int sums_element1 = 1509715816; sums.insert(sums_element1); sums.insert(sums_element2); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->findClosetDiff(sums, goal)"
    },
    {
        "source": "int findClosetDiff(set<int>& sums, int goal) { auto it = sums.lower_bound(goal); int high = (it =  = sums.end()) ? *(sums.rbegin()) : *it; int low = (it ! = sums.begin()) ? *(--it) : *it; return min(abs(low - goal), abs(high - goal)); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal = -599725431; sums.insert(sums_element0); int sums_element1 = 1509715816; sums.insert(sums_element1); sums.insert(sums_element2); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->findClosetDiff(sums, goal)"
    },
    {
        "source": "void getAllSums(int index, int end, vector<int>& nums, int sum, set<int>& sums) { if (index > end ) { sums.insert(sum); return; } getAllSums(index+1, end, nums, sum+nums[index], sums); getAllSums(index+1, end, nums, sum, sums); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int index = -1990920058; int end = 1767630601; vector<int> nums; int sum = 2046095734; set<int> sums; int nums_element0 = 285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_INSTANCE___Solution->getAllSums(index, end, nums, sum, sums); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; } }"
    },
    {
        "source": "void getAllSums(int index, int end, vector<int>& nums, int sum, set<int>& sums) { if (index > end ) { sums.insert(sum); return; } getAllSums(index+1, end, nums, sum+nums[index], sums); getAllSums(index+1, end, nums, sum, sums); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int index = -1990920058; int end = 1767630601; vector<int> nums; int sum = 2046095734; set<int> sums; int nums_element0 = 285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_INSTANCE___Solution->getAllSums(index, end, nums, sum, sums); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; } }"
    },
    {
        "source": "void getAllSums(int index, int end, vector<int>& nums, int sum, set<int>& sums) { if (index > end ) { sums.insert(sum); return; } getAllSums(index+1, end, nums, sum+nums[index], sums); getAllSums(index+1, end, nums, sum, sums); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int index = -1990920058; int end = 1767630601; vector<int> nums; int sum = 2046095734; set<int> sums; int nums_element0 = 285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_INSTANCE___Solution->getAllSums(index, end, nums, sum, sums); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; } }"
    },
    {
        "source": "void getAllSums(int index, int end, vector<int>& nums, int sum, set<int>& sums) { if (index > end ) { sums.insert(sum); return; } getAllSums(index+1, end, nums, sum+nums[index], sums); getAllSums(index+1, end, nums, sum, sums); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int index = -1990920058; int end = 1767630601; vector<int> nums; int sum = 2046095734; set<int> sums; int nums_element0 = 285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_INSTANCE___Solution->getAllSums(index, end, nums, sum, sums); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; } }"
    },
    {
        "source": "void getAllSums(int index, int end, vector<int>& nums, int sum, set<int>& sums) { if (index > end ) { sums.insert(sum); return; } getAllSums(index+1, end, nums, sum+nums[index], sums); getAllSums(index+1, end, nums, sum, sums); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int index = -1990920058; int end = 1767630601; vector<int> nums; int sum = 2046095734; set<int> sums; int nums_element0 = 285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_INSTANCE___Solution->getAllSums(index, end, nums, sum, sums); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; } }"
    },
    {
        "source": "int minAbsDifference(vector<int>& nums, int goal) { set<int> sums_left, sums_right; int mid = nums.size() / 2; getAllSums(0, mid, nums, sums_left); getAllSums(mid+1, nums.size()-1, nums, sums_right); int minDiff = INT_MAX; for (auto& sum : sums_left) { minDiff = min(minDiff, findClosetDiff(sums_right, goal - sum)); } return minDiff; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; int goal = -44683554; int nums_element0 = 1567627325; nums.push_back(nums_element0); int nums_element1 = -623564934; nums.push_back(nums_element1); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->minAbsDifference(nums, goal)"
    },
    {
        "source": "bool buddyStrings(string A, string B) { if (A.size() ! = B.size()) return false; if (A.size()<2) return false; bool bRepeat = false; bool map[26] = { false } ; int idx[2], diffCnt = 0; for (int i = 0; i<A.size(); i++) { if (map[A[i]-'a']) { bRepeat = true; } map[A[i]-'a'] = true; if ( A[i] ! = B[i] ) { if (diffCnt> = 2) return false; idx[diffCnt++] = i; } } if (diffCnt =  = 0 && bRepeat) return true; return (A[idx[0]] =  = B[idx[1]] && A[idx[1]] =  = B[idx[0]]); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName468129 = new char[2]; akaRandomName468129[0] = -41; akaRandomName468129[1] = '\\0'; string A = akaRandomName468129; char* akaRandomName904269 = new char[2]; akaRandomName904269[0] = 95; akaRandomName904269[1] = '\\0'; string B = akaRandomName904269; bool AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->buddyStrings(A, B)"
    },
    {
        "source": "int total(long h) { return h * (h+1) * (h+2) / 6; }",
        "target": "AKA_INSTANCE___Solution1 = new ::Solution1(); long h = 201542861; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution1->total(h)"
    },
    {
        "source": "int minimumBoxes(int n) { int left = 1, right = pow(6l*n, 1.0/3); while(left < = right) { int mid = left + (right - left) / 2; int t = total(mid); if ( t =  = n ) return mid*(mid+1l)/2; if ( t < n) left = mid + 1; else right = mid - 1; } int height = right; int remind = n - total(height); int bottom = height * (height+1l)/2; left = 1; right = sqrt(2*remind); while ( left < = right) { int mid = left + (right - left)/2; int h = mid*(mid+1)/2; if ( h =  = remind) return bottom + mid; if ( h < remind) left = mid + 1; else right = mid -1; } return bottom + left; }",
        "target": "AKA_INSTANCE___Solution1 = new ::Solution1(); int n = 1067445116; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution1->minimumBoxes(n)"
    },
    {
        "source": "int bulbSwitch(int n) { return (int)sqrt(n); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int n = -1793982043; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->bulbSwitch(n)"
    },
    {
        "source": "int flipLights(int n, int m) { if (m =  = 0 || n =  = 0) return 1; if (n =  = 1) return 2; if (n =  = 2) return m =  = 1? 3:4; if (m =  = 1) return 4; return m =  = 2 ? 7 :8; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); int n = -28357879; int m = -995990536; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->flipLights(n, m)"
    },
    {
        "source": "int numTimesAllBlue(vector<int>& light) { int n = light.size(); vector<bool> on(n, false); int left = 0; int result = 0; for(int i = 0; i<light.size(); i++) { on[light[i]-1] = true; while (left < n && on[left]) left++; if (left =  = i+1) result++; } return result; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> light; int light_element0 = -742171133; light.push_back(light_element0); int light_element1 = 198217015; light.push_back(light_element1); int light_element2 = 67053058; light.push_back(light_element2); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->numTimesAllBlue(light)"
    },
    {
        "source": "int minFlips(string target) { int flip = 0; for(auto state : target) { if (state =  = '0' && flip % 2 =  = 1 ) flip++; if (state =  = '1' && flip % 2 =  = 0 ) flip++; } return flip; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName411191 = new char[2]; akaRandomName411191[0] = -91; akaRandomName411191[1] = '\\0'; string target = akaRandomName411191; int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->minFlips(target)"
    },
    {
        "source": "string getHint(string secret, string guess) { return getHint02(secret, guess); return getHint01(secret, guess); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName758779 = new char[2]; akaRandomName758779[0] = 97; akaRandomName758779[1] = '\\0'; string secret = akaRandomName758779; char* akaRandomName587010 = new char[2]; akaRandomName587010[0] = 59; akaRandomName587010[1] = '\\0'; string guess = akaRandomName587010; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->getHint(secret, guess)"
    },
    {
        "source": "string getHint01(string secret, string guess) { int appears_in_secret[10] = { 0 }, appears_in_guess[10] = { 0 }, bulls[10] = { 0 } ; int total_bulls = 0, total_cows = 0; for(int i = 0; i < secret.size(); i++) appears_in_secret[secret[i] - '0']++; for(int i = 0; i < guess.size(); i++) { if(secret[i] =  = guess[i]) bulls[secret[i] - '0']++; appears_in_guess[guess[i] - '0']++; } for(int i = 0; i < = 9; i++) { total_bulls + = bulls[i]; total_cows + = min(appears_in_secret[i], appears_in_guess[i]) - bulls[i]; } return to_string(total_bulls) + \"A\" + to_string(total_cows) + \"B\"; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName362533 = new char[2]; akaRandomName362533[0] = -51; akaRandomName362533[1] = '\\0'; string secret = akaRandomName362533; char* akaRandomName382375 = new char[2]; akaRandomName382375[0] = 68; akaRandomName382375[1] = '\\0'; string guess = akaRandomName382375; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->getHint01(secret, guess)"
    },
    {
        "source": "string getHint01(string secret, string guess) { int appears_in_secret[10] = { 0 }, appears_in_guess[10] = { 0 }, bulls[10] = { 0 } ; int total_bulls = 0, total_cows = 0; for(int i = 0; i < secret.size(); i++) appears_in_secret[secret[i] - '0']++; for(int i = 0; i < guess.size(); i++) { if(secret[i] =  = guess[i]) bulls[secret[i] - '0']++; appears_in_guess[guess[i] - '0']++; } for(int i = 0; i < = 9; i++) { total_bulls + = bulls[i]; total_cows + = min(appears_in_secret[i], appears_in_guess[i]) - bulls[i]; } return to_string(total_bulls) + \"A\" + to_string(total_cows) + \"B\"; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName367345 = new char[2]; akaRandomName367345[0] = -51; akaRandomName367345[1] = '\\0'; string secret = akaRandomName367345; char* akaRandomName691966 = new char[2]; akaRandomName691966[0] = 68; akaRandomName691966[1] = '\\0'; string guess = akaRandomName691966; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->getHint01(secret, guess)"
    },
    {
        "source": "string getHint02(string secret, string guess) { const int digital_num = 10; int secret_stat[digital_num] = { 0 } ; int bull = 0; for(int i = 0; i<secret.size(); i++) { if ( secret[i] =  = guess[i] ) { bull++; continue; } secret_stat[secret[i]-'0']++; } int cow = 0; for(int i = 0; i<guess.size(); i++) { if ( secret[i] ! = guess[i] && secret_stat[guess[i]-'0']-- > 0 ) { cow++; } } return to_string(bull) + \"A\" + to_string(cow) + \"B\"; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName891433 = new char[2]; akaRandomName891433[0] = -124; akaRandomName891433[1] = '\\0'; string secret = akaRandomName891433; char* akaRandomName37705 = new char[2]; akaRandomName37705[0] = -43; akaRandomName37705[1] = '\\0'; string guess = akaRandomName37705; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->getHint02(secret, guess)"
    },
    {
        "source": "string getHint02(string secret, string guess) { const int digital_num = 10; int secret_stat[digital_num] = { 0 } ; int bull = 0; for(int i = 0; i<secret.size(); i++) { if ( secret[i] =  = guess[i] ) { bull++; continue; } secret_stat[secret[i]-'0']++; } int cow = 0; for(int i = 0; i<guess.size(); i++) { if ( secret[i] ! = guess[i] && secret_stat[guess[i]-'0']-- > 0 ) { cow++; } } return to_string(bull) + \"A\" + to_string(cow) + \"B\"; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName170433 = new char[2]; akaRandomName170433[0] = -124; akaRandomName170433[1] = '\\0'; string secret = akaRandomName170433; char* akaRandomName181875 = new char[2]; akaRandomName181875[0] = -43; akaRandomName181875[1] = '\\0'; string guess = akaRandomName181875; string AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->getHint02(secret, guess)"
    },
    {
        "source": "int maxCoins(vector<int>& nums) { nums.erase(remove_if(nums.begin(), nums.end(), [](int n) { return n =  = 0; } ), nums.end()); nums.insert(nums.begin(), 1); nums.push_back(1); int n = nums.size(); vector< vector<int> > matrix(n, vector<int>(n, 0)); return maxCoins_DP(nums, matrix); return maxCoins_DC(nums, matrix, 0, n-1); }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; int nums_element0 = 1133977131; nums.push_back(nums_element0); int nums_element1 = -473075688; nums.push_back(nums_element1); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->maxCoins(nums)"
    },
    {
        "source": "int maxCoins_DC(vector<int>& nums, vector<vector<int>>& matrix, int low, int high) { if (low + 1 =  = high) return 0; if (matrix[low][high] > 0) return matrix[low][high]; int result = 0; for (int i = low + 1; i < high; ++i) { result = max(result, nums[low] * nums[i] * nums[high] + maxCoins_DC(nums, matrix, low, i) + maxCoins_DC(nums, matrix, i, high)); } matrix[low][high] = result; return result; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; vector<vector<int>> matrix; int low = 4; int high = 6; int nums_element0 = -1379363060; nums.push_back(nums_element0); vector<int> matrix_element0; int matrix_element0_element0 = -212449938; matrix_element0.push_back(matrix_element0_element0); int matrix_element0_element1 = 1374231302; matrix_element0.push_back(matrix_element0_element1); matrix.push_back(matrix_element0); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->maxCoins_DC(nums, matrix, low, high)"
    },
    {
        "source": "int maxCoins_DP(vector<int>& nums, vector<vector<int>>& dp) { int n = nums.size(); for (int k = 2; k < n; ++k) { for (int low = 0; low < n - k; low++) { int high = low + k; for (int i = low + 1; i < high; ++i) dp[low][high] = max( dp[low][high], nums[low] * nums[i] * nums[high] + dp[low][i] + dp[i][high]); } } return dp[0][n - 1]; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; vector<vector<int>> dp; int nums_element0 = 32936862; nums.push_back(nums_element0); int nums_element1 = 755846789; nums.push_back(nums_element1); vector<int> dp_element0; int dp_element0_element0 = -1123753453; dp_element0.push_back(dp_element0_element0); int dp_element0_element1 = -489562146; dp_element0.push_back(dp_element0_element1); dp.push_back(dp_element0); vector<int> dp_element1; int dp_element1_element0 = 445740363; dp_element1.push_back(dp_element1_element0); dp.push_back(dp_element1); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->maxCoins_DP(nums, dp)"
    },
    {
        "source": "int maxCoins_DP(vector<int>& nums, vector<vector<int>>& dp) { int n = nums.size(); for (int k = 2; k < n; ++k) { for (int low = 0; low < n - k; low++) { int high = low + k; for (int i = low + 1; i < high; ++i) dp[low][high] = max( dp[low][high], nums[low] * nums[i] * nums[high] + dp[low][i] + dp[i][high]); } } return dp[0][n - 1]; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; vector<vector<int>> dp; int nums_element0 = 32936862; nums.push_back(nums_element0); int nums_element1 = 755846789; nums.push_back(nums_element1); vector<int> dp_element0; int dp_element0_element0 = -1123753453; dp_element0.push_back(dp_element0_element0); int dp_element0_element1 = -489562146; dp_element0.push_back(dp_element0_element1); dp.push_back(dp_element0); vector<int> dp_element1; int dp_element1_element0 = 445740363; dp_element1.push_back(dp_element1_element0); dp.push_back(dp_element1); int AKA_ACTUAL_OUTPUT = AKA_INSTANCE___Solution->maxCoins_DP(nums, dp)"
    },
    {
        "source": "void printVector(vector<int>& nums) { cout << \"nums: \"; for (auto n: nums) { cout << n << ' '; } cout << '\\n'; }",
        "target": "AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; int nums_element0 = 1252471791; nums.push_back(nums_element0); int nums_element1 = 1164247722; nums.push_back(nums_element1); AKA_INSTANCE___Solution->printVector(nums); vector<int> EXPECTED_nums; } }"
    },
    {
        "source": "bool buddyStrings(string A, string B) { if (A.size() != B.size()) return false; if (A.size()<2) return false; bool bRepeat = false; bool map[26] = {false}; int idx[2], diffCnt=0; for (int i=0; i<A.size(); i++){ if (map[A[i]-'a']) { bRepeat = true;} map[A[i]-'a']=true; if ( A[i] != B[i] ) { if (diffCnt>=2) return false; idx[diffCnt++] = i; } } if (diffCnt==0 && bRepeat) return true; return (A[idx[0]] == B[idx[1]] && A[idx[1]] == B[idx[0]]); }",
        "target": "void AKA_TEST_Solution_buddyStrings_string_string_random_1(void) { { AKA_test_case_name=\"Solution_buddyStrings_string_string_random_1\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BuddyStrings.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName468129 = new char[2];akaRandomName468129[0] = -41;akaRandomName468129[1] = '\\0';string A=akaRandomName468129; char* akaRandomName904269 = new char[2];akaRandomName904269[0] = 95;akaRandomName904269[1] = '\\0';string B=akaRandomName904269; bool AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_buddyStrings_string_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->buddyStrings(A,B); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\buddyStrings\\\\BuddyStrings.cpp\\\\Solution\\\\buddyStrings(string,string)\"); ; } }"
    },
    {
        "source": "int total(long h){ return h * (h+1) * (h+2) / 6; }",
        "target": "void AKA_TEST_Solution1_total_long_random_0(void) { { AKA_test_case_name=\"Solution1_total_long_random_0\"; ; AKA_mark(\"Calling: \\\\Solution1()|ROOT\\\\BuildingBoxes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution1\\\\AKA_INSTANCE___Solution1\\\\Solution1()\");AKA_fCall++;AKA_INSTANCE___Solution1 = new ::Solution1(); long h=201542861; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution1_total_long_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution1->total(h); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\buildingBoxes\\\\BuildingBoxes.cpp\\\\Solution1\\\\total(long)\"); ; } }"
    },
    {
        "source": "int minimumBoxes(int n) { int left = 1, right = pow(6l*n, 1.0/3) ; while(left <= right){ int mid = left + (right - left) / 2; int t = total(mid); if ( t == n ) return mid*(mid+1l)/2; if ( t < n) left = mid + 1; else right = mid - 1; } int height = right; int remind = n - total(height); int bottom = height * (height+1l)/2 ; left = 1; right = sqrt(2*remind); while ( left <= right) { int mid = left + (right - left)/2; int h = mid*(mid+1)/2; if ( h == remind) return bottom + mid; if ( h < remind) left = mid + 1; else right = mid -1; } return bottom + left; }",
        "target": "void AKA_TEST_Solution1_minimumBoxes_int_random_4(void) { { AKA_test_case_name=\"Solution1_minimumBoxes_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution1()|ROOT\\\\BuildingBoxes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution1\\\\AKA_INSTANCE___Solution1\\\\Solution1()\");AKA_fCall++;AKA_INSTANCE___Solution1 = new ::Solution1(); int n=1067445116; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution1_minimumBoxes_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution1->minimumBoxes(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\buildingBoxes\\\\BuildingBoxes.cpp\\\\Solution1\\\\minimumBoxes(int)\"); ; } }"
    },
    {
        "source": "int bulbSwitch(int n) { return (int)sqrt(n); }",
        "target": "void AKA_TEST_Solution_bulbSwitch_int_random_0(void) { { AKA_test_case_name=\"Solution_bulbSwitch_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\bulbSwitcher.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int n=-1793982043; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_bulbSwitch_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->bulbSwitch(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bulbSwitcher\\\\bulbSwitcher.cpp\\\\Solution\\\\bulbSwitch(int)\"); ; } }"
    },
    {
        "source": "int flipLights(int n, int m) { if (m == 0 || n == 0) return 1; if (n == 1) return 2; if (n == 2) return m == 1? 3:4; if (m == 1) return 4; return m==2 ? 7 :8; }",
        "target": "void AKA_TEST_Solution_flipLights_int_int_random_0(void) { { AKA_test_case_name=\"Solution_flipLights_int_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BulbSwitcher.II.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int n=-28357879; int m=-995990536; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_flipLights_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->flipLights(n,m); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bulbSwitcher\\\\BulbSwitcher.II.cpp\\\\Solution\\\\flipLights(int,int)\"); ; } }"
    },
    {
        "source": "int numTimesAllBlue(vector<int>& light) { int n = light.size(); vector<bool> on(n, false); int left = 0; int result = 0; for(int i=0; i<light.size(); i++){ on[light[i]-1] = true; while (left < n && on[left]) left++; if (left == i+1) result++; } return result; }",
        "target": "void AKA_TEST_Solution_numTimesAllBlue_vector_int_random_0(void) { { AKA_test_case_name=\"Solution_numTimesAllBlue_vector_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BulbSwitcher.III.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> light; int AKA_EXPECTED_OUTPUT; int light_element0=-742171133; light.push_back(light_element0); int light_element1=198217015; light.push_back(light_element1); int light_element2=67053058; light.push_back(light_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_numTimesAllBlue_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numTimesAllBlue(light); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bulbSwitcher\\\\BulbSwitcher.III.cpp\\\\Solution\\\\numTimesAllBlue(vector<int>&)\"); vector<int> EXPECTED_light; ; } }"
    },
    {
        "source": "int minFlips(string target) { int flip = 0; for(auto state : target) { if (state == '0' && flip % 2 == 1 ) flip++; if (state == '1' && flip % 2 == 0 ) flip++; } return flip; }",
        "target": "void AKA_TEST_Solution_minFlips_string_random_0(void) { { AKA_test_case_name=\"Solution_minFlips_string_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BulbSwitcher.IV.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName411191 = new char[2];akaRandomName411191[0] = -91;akaRandomName411191[1] = '\\0';string target=akaRandomName411191; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_minFlips_string_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minFlips(target); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bulbSwitcher\\\\BulbSwitcher.IV.cpp\\\\Solution\\\\minFlips(string)\"); ; } }"
    },
    {
        "source": "string getHint(string secret, string guess) { return getHint02(secret, guess); return getHint01(secret, guess); }",
        "target": "void AKA_TEST_Solution_getHint_string_string_random_0(void) { { AKA_test_case_name=\"Solution_getHint_string_string_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\bullsAndCows.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName758779 = new char[2];akaRandomName758779[0] = 97;akaRandomName758779[1] = '\\0';string secret=akaRandomName758779; char* akaRandomName587010 = new char[2];akaRandomName587010[0] = 59;akaRandomName587010[1] = '\\0';string guess=akaRandomName587010; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution_getHint_string_string_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getHint(secret,guess); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bullsAndCows\\\\bullsAndCows.cpp\\\\Solution\\\\getHint(string,string)\"); ; } }"
    },
    {
        "source": "string getHint01(string secret, string guess) { int appears_in_secret[10] = {0}, appears_in_guess[10] = {0}, bulls[10] = {0}; int total_bulls = 0, total_cows = 0; for(int i = 0; i < secret.size(); i++) appears_in_secret[secret[i] - '0']++; for(int i = 0; i < guess.size(); i++) { if(secret[i] == guess[i]) bulls[secret[i] - '0']++; appears_in_guess[guess[i] - '0']++; } for(int i = 0; i <= 9; i++) { total_bulls += bulls[i]; total_cows += min(appears_in_secret[i], appears_in_guess[i]) - bulls[i]; } return to_string(total_bulls) + \"A\" + to_string(total_cows) + \"B\"; }",
        "target": "void AKA_TEST_Solution_getHint01_string_string_random_1(void) { { AKA_test_case_name=\"Solution_getHint01_string_string_random_1\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\bullsAndCows.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName362533 = new char[2];akaRandomName362533[0] = -51;akaRandomName362533[1] = '\\0';string secret=akaRandomName362533; char* akaRandomName382375 = new char[2];akaRandomName382375[0] = 68;akaRandomName382375[1] = '\\0';string guess=akaRandomName382375; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution_getHint01_string_string_random_1\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getHint01(secret,guess); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bullsAndCows\\\\bullsAndCows.cpp\\\\Solution\\\\getHint01(string,string)\"); ; } } void AKA_TEST_Solution_getHint01_string_string_random_1(void) { { AKA_test_case_name=\"Solution_getHint01_string_string_random_1\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\bullsAndCows.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName367345 = new char[2];akaRandomName367345[0] = -51;akaRandomName367345[1] = '\\0';string secret=akaRandomName367345; char* akaRandomName691966 = new char[2];akaRandomName691966[0] = 68;akaRandomName691966[1] = '\\0';string guess=akaRandomName691966; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution_getHint01_string_string_random_1\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getHint01(secret,guess); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bullsAndCows\\\\bullsAndCows.cpp\\\\Solution\\\\getHint01(string,string)\"); ; } }"
    },
    {
        "source": "string getHint02(string secret, string guess) { const int digital_num = 10; int secret_stat[digital_num]={0}; int bull = 0; for(int i=0; i<secret.size(); i++) { if ( secret[i] == guess[i] ) { bull++; continue; } secret_stat[secret[i]-'0']++; } int cow = 0; for(int i=0; i<guess.size(); i++) { if ( secret[i] != guess[i] && secret_stat[guess[i]-'0']-- > 0 ) { cow++; } } return to_string(bull) + \"A\" + to_string(cow) + \"B\"; }",
        "target": "void AKA_TEST_Solution_getHint02_string_string_random_4(void) { { AKA_test_case_name=\"Solution_getHint02_string_string_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\bullsAndCows.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName891433 = new char[2];akaRandomName891433[0] = -124;akaRandomName891433[1] = '\\0';string secret=akaRandomName891433; char* akaRandomName37705 = new char[2];akaRandomName37705[0] = -43;akaRandomName37705[1] = '\\0';string guess=akaRandomName37705; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution_getHint02_string_string_random_4\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getHint02(secret,guess); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bullsAndCows\\\\bullsAndCows.cpp\\\\Solution\\\\getHint02(string,string)\"); ; } } void AKA_TEST_Solution_getHint02_string_string_random_4(void) { { AKA_test_case_name=\"Solution_getHint02_string_string_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\bullsAndCows.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName170433 = new char[2];akaRandomName170433[0] = -124;akaRandomName170433[1] = '\\0';string secret=akaRandomName170433; char* akaRandomName181875 = new char[2];akaRandomName181875[0] = -43;akaRandomName181875[1] = '\\0';string guess=akaRandomName181875; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution_getHint02_string_string_random_4\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getHint02(secret,guess); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\bullsAndCows\\\\bullsAndCows.cpp\\\\Solution\\\\getHint02(string,string)\"); ; } }"
    },
    {
        "source": "int maxCoins(vector<int>& nums) { nums.erase(remove_if(nums.begin(), nums.end(), [](int n){return n==0;}), nums.end()); nums.insert(nums.begin(),1); nums.push_back(1); int n = nums.size(); vector< vector<int> > matrix(n, vector<int>(n,0)); return maxCoins_DP(nums, matrix); return maxCoins_DC(nums, matrix, 0, n-1); }",
        "target": "void AKA_TEST_Solution_maxCoins_vector_int_random_0(void) { { AKA_test_case_name=\"Solution_maxCoins_vector_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BurstBalloons.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; int AKA_EXPECTED_OUTPUT; int nums_element0=1133977131; nums.push_back(nums_element0); int nums_element1=-473075688; nums.push_back(nums_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_maxCoins_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxCoins(nums); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\burstBalloons\\\\BurstBalloons.cpp\\\\Solution\\\\maxCoins(vector<int>&)\"); vector<int> EXPECTED_nums; ; } }"
    },
    {
        "source": "int maxCoins_DC(vector<int>& nums, vector<vector<int>>& matrix, int low, int high) { if (low + 1 == high) return 0; if (matrix[low][high] > 0) return matrix[low][high]; int result = 0; for (int i = low + 1; i < high; ++i){ result = max(result, nums[low] * nums[i] * nums[high] + maxCoins_DC(nums, matrix, low, i) + maxCoins_DC(nums, matrix, i, high)); } matrix[low][high] = result; return result; }",
        "target": "void AKA_TEST_Solution_maxCoins_DC_vector_int_vector_vector_int_int_int_random_4(void) { { AKA_test_case_name=\"Solution_maxCoins_DC_vector_int_vector_vector_int_int_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BurstBalloons.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; vector<vector<int>> matrix; int low=4; int high=6; int AKA_EXPECTED_OUTPUT; int nums_element0=-1379363060; nums.push_back(nums_element0); vector<int> matrix_element0; int matrix_element0_element0=-212449938; matrix_element0.push_back(matrix_element0_element0); int matrix_element0_element1=1374231302; matrix_element0.push_back(matrix_element0_element1); matrix.push_back(matrix_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_maxCoins_DC_vector_int_vector_vector_int_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxCoins_DC(nums,matrix,low,high); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\burstBalloons\\\\BurstBalloons.cpp\\\\Solution\\\\maxCoins_DC(vector<int>&,vector<vector<int>>&,int,int)\"); vector<int> EXPECTED_nums; vector<vector<int>> EXPECTED_matrix; ; } }"
    },
    {
        "source": "int maxCoins_DP(vector<int>& nums, vector<vector<int>>& dp) { int n = nums.size(); for (int k = 2; k < n; ++k) { for (int low = 0; low < n - k; low++){ int high = low + k; for (int i = low + 1; i < high; ++i) dp[low][high] = max( dp[low][high], nums[low] * nums[i] * nums[high] + dp[low][i] + dp[i][high]); } } return dp[0][n - 1]; }",
        "target": "void AKA_TEST_Solution_maxCoins_DP_vector_int_vector_vector_int_random_4(void) { { AKA_test_case_name=\"Solution_maxCoins_DP_vector_int_vector_vector_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BurstBalloons.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; vector<vector<int>> dp; int AKA_EXPECTED_OUTPUT; int nums_element0=32936862; nums.push_back(nums_element0); int nums_element1=755846789; nums.push_back(nums_element1); vector<int> dp_element0; int dp_element0_element0=-1123753453; dp_element0.push_back(dp_element0_element0); int dp_element0_element1=-489562146; dp_element0.push_back(dp_element0_element1); dp.push_back(dp_element0); vector<int> dp_element1; int dp_element1_element0=445740363; dp_element1.push_back(dp_element1_element0); dp.push_back(dp_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_maxCoins_DP_vector_int_vector_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxCoins_DP(nums,dp); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\burstBalloons\\\\BurstBalloons.cpp\\\\Solution\\\\maxCoins_DP(vector<int>&,vector<vector<int>>&)\"); vector<int> EXPECTED_nums; vector<vector<int>> EXPECTED_dp; ; } } void AKA_TEST_Solution_maxCoins_DP_vector_int_vector_vector_int_random_4(void) { { AKA_test_case_name=\"Solution_maxCoins_DP_vector_int_vector_vector_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BurstBalloons.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; vector<vector<int>> dp; int AKA_EXPECTED_OUTPUT; int nums_element0=32936862; nums.push_back(nums_element0); int nums_element1=755846789; nums.push_back(nums_element1); vector<int> dp_element0; int dp_element0_element0=-1123753453; dp_element0.push_back(dp_element0_element0); int dp_element0_element1=-489562146; dp_element0.push_back(dp_element0_element1); dp.push_back(dp_element0); vector<int> dp_element1; int dp_element1_element0=445740363; dp_element1.push_back(dp_element1_element0); dp.push_back(dp_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_maxCoins_DP_vector_int_vector_vector_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->maxCoins_DP(nums,dp); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\burstBalloons\\\\BurstBalloons.cpp\\\\Solution\\\\maxCoins_DP(vector<int>&,vector<vector<int>>&)\"); vector<int> EXPECTED_nums; vector<vector<int>> EXPECTED_dp; ; } }"
    },
    {
        "source": "void printVector(vector<int>& nums) { cout << \"nums: \"; for (auto n: nums) { cout << n << ' '; } cout << '\\n'; }",
        "target": "void AKA_TEST_Solution_printVector_vector_int_random_0(void) { { AKA_test_case_name=\"Solution_printVector_vector_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BurstBalloons.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; int nums_element0=1252471791; nums.push_back(nums_element0); int nums_element1=1164247722; nums.push_back(nums_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_printVector_vector_int_random_0\");AKA_INSTANCE___Solution->printVector(nums); AKA_fCall++;AKA_mark(\"Return from: .\\\\2\\\\burstBalloons\\\\BurstBalloons.cpp\\\\Solution\\\\printVector(vector<int>&)\"); vector<int> EXPECTED_nums; ; } }"
    },
    {
        "source": "int climbStairs(int n) { if (n<=3) return n; int a[2]={2,3}; for(int i=4; i<=n; i++){ int t = a[0] + a[1]; a[0] = a[1]; a[1] = t; } return a[1]; }",
        "target": "void AKA_TEST_Solution_climbStairs_int_random_0(void) { { AKA_test_case_name=\"Solution_climbStairs_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\climbStairs.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int n=9; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_climbStairs_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->climbStairs(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\climbStairs\\\\climbStairs.cpp\\\\Solution\\\\climbStairs(int)\"); ; } } void AKA_TEST_Solution_climbStairs_int_random_0(void) { { AKA_test_case_name=\"Solution_climbStairs_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\climbStairs.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int n=9; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_climbStairs_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->climbStairs(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\climbStairs\\\\climbStairs.cpp\\\\Solution\\\\climbStairs(int)\"); ; } }"
    },
    {
        "source": "int climbStairs2(int n) { if (n<=3) return n; return climbStairs(n-1) + climbStairs(n-2); }",
        "target": "void AKA_TEST_Solution_climbStairs2_int_random_0(void) { { AKA_test_case_name=\"Solution_climbStairs2_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\climbStairs.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int n=1666997024; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_climbStairs2_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->climbStairs2(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\climbStairs\\\\climbStairs.cpp\\\\Solution\\\\climbStairs2(int)\"); ; } }"
    },
    {
        "source": "int abs_min (int x, int y, int z) { return abs_min(x, abs_min(y, z)); }",
        "target": "void AKA_TEST_Solution_abs_min_int_int_int_random_0(void) { { AKA_test_case_name=\"Solution_abs_min_int_int_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestDessertCost.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int x=-1137198100; int y=-858464856; int z=890779558; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_abs_min_int_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->abs_min(x,y,z); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestDessertCost\\\\ClosestDessertCost.cpp\\\\Solution\\\\abs_min(int,int,int)\"); ; } }"
    },
    {
        "source": "int abs_min(int x, int y) { int ax = abs(x); int ay = abs(y); if (ax == ay) return max(x, y); return ax < ay ? x : y; }",
        "target": "void AKA_TEST_Solution_abs_min_int_int_random_0(void) { { AKA_test_case_name=\"Solution_abs_min_int_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestDessertCost.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int x=651751951; int y=2072724094; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_abs_min_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->abs_min(x,y); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestDessertCost\\\\ClosestDessertCost.cpp\\\\Solution\\\\abs_min(int,int)\"); ; } }"
    },
    {
        "source": "int closestCost(vector<int>& baseCosts, vector<int>& toppingCosts, int target) { int min_gap = INT_MAX; for (auto& base : baseCosts) { int gap = closetToppingCost(toppingCosts, target - base, 0); min_gap = abs_min(min_gap, gap); } return target - min_gap; }",
        "target": "void AKA_TEST_Solution_closestCost_vector_int_vector_int_int_random_0(void) { { AKA_test_case_name=\"Solution_closestCost_vector_int_vector_int_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestDessertCost.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> baseCosts; vector<int> toppingCosts; int target=-480273005; int AKA_EXPECTED_OUTPUT; int baseCosts_element0=861523559; baseCosts.push_back(baseCosts_element0); int baseCosts_element1=-109141621; baseCosts.push_back(baseCosts_element1); int toppingCosts_element0=-1812648113; toppingCosts.push_back(toppingCosts_element0); int toppingCosts_element1=-1301327235; toppingCosts.push_back(toppingCosts_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_closestCost_vector_int_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->closestCost(baseCosts,toppingCosts,target); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestDessertCost\\\\ClosestDessertCost.cpp\\\\Solution\\\\closestCost(vector<int>&,vector<int>&,int)\"); vector<int> EXPECTED_baseCosts; vector<int> EXPECTED_toppingCosts; ; } }"
    },
    {
        "source": "int closetToppingCost(vector<int>& costs, int target, int idx ){ if (idx >= costs.size()) return target; int select_none = closetToppingCost(costs, target, idx+1); int select_once = closetToppingCost(costs, target - costs[idx], idx+1); int select_twice = closetToppingCost(costs, target - 2*costs[idx], idx+1); return abs_min(select_none, select_once, select_twice); }",
        "target": "void AKA_TEST_Solution_closetToppingCost_vector_int_int_int_random_0(void) { { AKA_test_case_name=\"Solution_closetToppingCost_vector_int_int_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestDessertCost.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> costs; int target=-1295530857; int idx=1707581507; int AKA_EXPECTED_OUTPUT; int costs_element0=573464047; costs.push_back(costs_element0); int costs_element1=724410652; costs.push_back(costs_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_closetToppingCost_vector_int_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->closetToppingCost(costs,target,idx); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestDessertCost\\\\ClosestDessertCost.cpp\\\\Solution\\\\closetToppingCost(vector<int>&,int,int)\"); vector<int> EXPECTED_costs; ; } }"
    },
    {
        "source": "vector<int> closestRoom(vector<vector<int>>& rooms, vector<vector<int>>& queries) { for(int i=0; i<queries.size(); i++) { queries[i].push_back(i); } auto sort_by_size_desc = [&](vector<int>& lhs, vector<int>&rhs) { if (lhs[1] != rhs[1] ) return lhs[1] > rhs[1]; return lhs[0] < rhs[0]; }; sort(rooms.begin(), rooms.end(), sort_by_size_desc); sort(queries.begin(), queries.end(), sort_by_size_desc); vector<int> result(queries.size(), -1); set<int> ids; int i = 0; for( auto& q: queries) { int preferId = q[0]; int minSize = q[1]; int idx = q[2]; for (;i < rooms.size() && rooms[i][1] >= minSize; i++) { ids.insert(rooms[i][0]); } if (ids.size() <= 0 ) continue; auto it = ids.lower_bound(preferId); int id1 = (it == ids.begin() ? -1 : *(prev(it))); int id2 = (it == ids.end() ? -1 : *it); if (id1 == -1 || id2 == -1) { result[idx] = max(id1, id2); }else{ result[idx] = abs(preferId - id1) <= abs(preferId - id2) ? id1 : id2; } } return result; }",
        "target": "void AKA_TEST_Solution_closestRoom_vector_vector_int_vector_vector_int_random_0(void) { { AKA_test_case_name=\"Solution_closestRoom_vector_vector_int_vector_vector_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestRoom.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<vector<int>> rooms; vector<vector<int>> queries; vector<int> AKA_EXPECTED_OUTPUT; vector<int> rooms_element0; int rooms_element0_element0=2085354244; rooms_element0.push_back(rooms_element0_element0); int rooms_element0_element1=-759311688; rooms_element0.push_back(rooms_element0_element1); rooms.push_back(rooms_element0); vector<int> rooms_element1; int rooms_element1_element0=-415162704; rooms_element1.push_back(rooms_element1_element0); int rooms_element1_element1=-908253826; rooms_element1.push_back(rooms_element1_element1); int rooms_element1_element2=1989427960; rooms_element1.push_back(rooms_element1_element2); rooms.push_back(rooms_element1); vector<int> queries_element0; int queries_element0_element0=-1107812353; queries_element0.push_back(queries_element0_element0); int queries_element0_element1=413193186; queries_element0.push_back(queries_element0_element1); int queries_element0_element2=-353546555; queries_element0.push_back(queries_element0_element2); queries.push_back(queries_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_closestRoom_vector_vector_int_vector_vector_int_random_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->closestRoom(rooms,queries); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestRoom\\\\ClosestRoom.cpp\\\\Solution\\\\closestRoom(vector<vector<int>>&,vector<vector<int>>&)\"); vector<vector<int>> EXPECTED_rooms; vector<vector<int>> EXPECTED_queries; ; } } void AKA_TEST_Solution_closestRoom_vector_vector_int_vector_vector_int_random_0(void) { { AKA_test_case_name=\"Solution_closestRoom_vector_vector_int_vector_vector_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestRoom.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<vector<int>> rooms; vector<vector<int>> queries; vector<int> AKA_EXPECTED_OUTPUT; vector<int> rooms_element0; int rooms_element0_element0=2085354244; rooms_element0.push_back(rooms_element0_element0); int rooms_element0_element1=-759311688; rooms_element0.push_back(rooms_element0_element1); rooms.push_back(rooms_element0); vector<int> rooms_element1; int rooms_element1_element0=-415162704; rooms_element1.push_back(rooms_element1_element0); int rooms_element1_element1=-908253826; rooms_element1.push_back(rooms_element1_element1); int rooms_element1_element2=1989427960; rooms_element1.push_back(rooms_element1_element2); rooms.push_back(rooms_element1); vector<int> queries_element0; int queries_element0_element0=-1107812353; queries_element0.push_back(queries_element0_element0); int queries_element0_element1=413193186; queries_element0.push_back(queries_element0_element1); int queries_element0_element2=-353546555; queries_element0.push_back(queries_element0_element2); queries.push_back(queries_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_closestRoom_vector_vector_int_vector_vector_int_random_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->closestRoom(rooms,queries); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestRoom\\\\ClosestRoom.cpp\\\\Solution\\\\closestRoom(vector<vector<int>>&,vector<vector<int>>&)\"); vector<vector<int>> EXPECTED_rooms; vector<vector<int>> EXPECTED_queries; ; } } void AKA_TEST_Solution_closestRoom_vector_vector_int_vector_vector_int_random_0(void) { { AKA_test_case_name=\"Solution_closestRoom_vector_vector_int_vector_vector_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestRoom.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<vector<int>> rooms; vector<vector<int>> queries; vector<int> AKA_EXPECTED_OUTPUT; vector<int> rooms_element0; int rooms_element0_element0=2085354244; rooms_element0.push_back(rooms_element0_element0); int rooms_element0_element1=-759311688; rooms_element0.push_back(rooms_element0_element1); rooms.push_back(rooms_element0); vector<int> rooms_element1; int rooms_element1_element0=-415162704; rooms_element1.push_back(rooms_element1_element0); int rooms_element1_element1=-908253826; rooms_element1.push_back(rooms_element1_element1); int rooms_element1_element2=1989427960; rooms_element1.push_back(rooms_element1_element2); rooms.push_back(rooms_element1); vector<int> queries_element0; int queries_element0_element0=-1107812353; queries_element0.push_back(queries_element0_element0); int queries_element0_element1=413193186; queries_element0.push_back(queries_element0_element1); int queries_element0_element2=-353546555; queries_element0.push_back(queries_element0_element2); queries.push_back(queries_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_closestRoom_vector_vector_int_vector_vector_int_random_0\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->closestRoom(rooms,queries); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestRoom\\\\ClosestRoom.cpp\\\\Solution\\\\closestRoom(vector<vector<int>>&,vector<vector<int>>&)\"); vector<vector<int>> EXPECTED_rooms; vector<vector<int>> EXPECTED_queries; ; } }"
    },
    {
        "source": "int abs(int n){ return n>0 ? n : -n; }",
        "target": "void AKA_TEST_Solution_abs_int_random_0(void) { { AKA_test_case_name=\"Solution_abs_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int n=-379318375; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_abs_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->abs(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\abs(int)\"); ; } }"
    },
    {
        "source": "void printSet(set<int>& s){ cout << \"[\"; for(auto& n : s) { cout << n << \", \"; } cout << \"]\" << endl; }",
        "target": "void AKA_TEST_Solution_printSet_set_int_random_3(void) { { AKA_test_case_name=\"Solution_printSet_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1=2062078205; s.insert(s_element1); s.insert(s_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_printSet_set_int_random_3\");AKA_INSTANCE___Solution->printSet(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\printSet(set<int>&)\"); set<int> EXPECTED_s; ; } } void AKA_TEST_Solution_printSet_set_int_random_3(void) { { AKA_test_case_name=\"Solution_printSet_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1=2062078205; s.insert(s_element1); s.insert(s_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_printSet_set_int_random_3\");AKA_INSTANCE___Solution->printSet(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\printSet(set<int>&)\"); set<int> EXPECTED_s; ; } } void AKA_TEST_Solution_printSet_set_int_random_3(void) { { AKA_test_case_name=\"Solution_printSet_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1=2062078205; s.insert(s_element1); s.insert(s_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_printSet_set_int_random_3\");AKA_INSTANCE___Solution->printSet(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\printSet(set<int>&)\"); set<int> EXPECTED_s; ; } } void AKA_TEST_Solution_printSet_set_int_random_3(void) { { AKA_test_case_name=\"Solution_printSet_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1=2062078205; s.insert(s_element1); s.insert(s_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_printSet_set_int_random_3\");AKA_INSTANCE___Solution->printSet(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\printSet(set<int>&)\"); set<int> EXPECTED_s; ; } } void AKA_TEST_Solution_printSet_set_int_random_3(void) { { AKA_test_case_name=\"Solution_printSet_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> s; s.insert(s_element0); int s_element1=2062078205; s.insert(s_element1); s.insert(s_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_printSet_set_int_random_3\");AKA_INSTANCE___Solution->printSet(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\printSet(set<int>&)\"); set<int> EXPECTED_s; ; } }"
    },
    {
        "source": "int findClosetDiff(set<int>& sums, int goal) { auto it = sums.lower_bound(goal); int high = (it == sums.end()) ? *(sums.rbegin()) : *it; int low = (it != sums.begin()) ? *(--it) : *it; return min(abs(low - goal), abs(high - goal)); }",
        "target": "void AKA_TEST_Solution_findClosetDiff_set_int_int_random_4(void) { { AKA_test_case_name=\"Solution_findClosetDiff_set_int_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal=-599725431; int AKA_EXPECTED_OUTPUT; sums.insert(sums_element0); int sums_element1=1509715816; sums.insert(sums_element1); sums.insert(sums_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_findClosetDiff_set_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findClosetDiff(sums,goal); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\findClosetDiff(set<int>&,int)\"); set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_findClosetDiff_set_int_int_random_4(void) { { AKA_test_case_name=\"Solution_findClosetDiff_set_int_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal=-599725431; int AKA_EXPECTED_OUTPUT; sums.insert(sums_element0); int sums_element1=1509715816; sums.insert(sums_element1); sums.insert(sums_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_findClosetDiff_set_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findClosetDiff(sums,goal); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\findClosetDiff(set<int>&,int)\"); set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_findClosetDiff_set_int_int_random_4(void) { { AKA_test_case_name=\"Solution_findClosetDiff_set_int_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal=-599725431; int AKA_EXPECTED_OUTPUT; sums.insert(sums_element0); int sums_element1=1509715816; sums.insert(sums_element1); sums.insert(sums_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_findClosetDiff_set_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findClosetDiff(sums,goal); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\findClosetDiff(set<int>&,int)\"); set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_findClosetDiff_set_int_int_random_4(void) { { AKA_test_case_name=\"Solution_findClosetDiff_set_int_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal=-599725431; int AKA_EXPECTED_OUTPUT; sums.insert(sums_element0); int sums_element1=1509715816; sums.insert(sums_element1); sums.insert(sums_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_findClosetDiff_set_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findClosetDiff(sums,goal); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\findClosetDiff(set<int>&,int)\"); set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_findClosetDiff_set_int_int_random_4(void) { { AKA_test_case_name=\"Solution_findClosetDiff_set_int_int_random_4\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); set<int> sums; int goal=-599725431; int AKA_EXPECTED_OUTPUT; sums.insert(sums_element0); int sums_element1=1509715816; sums.insert(sums_element1); sums.insert(sums_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_findClosetDiff_set_int_int_random_4\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findClosetDiff(sums,goal); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\findClosetDiff(set<int>&,int)\"); set<int> EXPECTED_sums; ; } }"
    },
    {
        "source": "void getAllSums(int index, int end, vector<int>& nums, int sum, set<int>& sums) { if (index > end ) { sums.insert(sum); return; } getAllSums(index+1, end, nums, sum+nums[index], sums); getAllSums(index+1, end, nums, sum, sums); }",
        "target": "void AKA_TEST_Solution_getAllSums_int_int_vector_int_int_set_int_random_3(void) { { AKA_test_case_name=\"Solution_getAllSums_int_int_vector_int_int_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int index=-1990920058; int end=1767630601; vector<int> nums; int sum=2046095734; set<int> sums; int nums_element0=285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_getAllSums_int_int_vector_int_int_set_int_random_3\");AKA_INSTANCE___Solution->getAllSums(index,end,nums,sum,sums); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\getAllSums(int,int,vector<int>&,int,set<int>&)\"); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_getAllSums_int_int_vector_int_int_set_int_random_3(void) { { AKA_test_case_name=\"Solution_getAllSums_int_int_vector_int_int_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int index=-1990920058; int end=1767630601; vector<int> nums; int sum=2046095734; set<int> sums; int nums_element0=285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_getAllSums_int_int_vector_int_int_set_int_random_3\");AKA_INSTANCE___Solution->getAllSums(index,end,nums,sum,sums); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\getAllSums(int,int,vector<int>&,int,set<int>&)\"); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_getAllSums_int_int_vector_int_int_set_int_random_3(void) { { AKA_test_case_name=\"Solution_getAllSums_int_int_vector_int_int_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int index=-1990920058; int end=1767630601; vector<int> nums; int sum=2046095734; set<int> sums; int nums_element0=285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_getAllSums_int_int_vector_int_int_set_int_random_3\");AKA_INSTANCE___Solution->getAllSums(index,end,nums,sum,sums); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\getAllSums(int,int,vector<int>&,int,set<int>&)\"); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_getAllSums_int_int_vector_int_int_set_int_random_3(void) { { AKA_test_case_name=\"Solution_getAllSums_int_int_vector_int_int_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int index=-1990920058; int end=1767630601; vector<int> nums; int sum=2046095734; set<int> sums; int nums_element0=285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_getAllSums_int_int_vector_int_int_set_int_random_3\");AKA_INSTANCE___Solution->getAllSums(index,end,nums,sum,sums); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\getAllSums(int,int,vector<int>&,int,set<int>&)\"); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; ; } } void AKA_TEST_Solution_getAllSums_int_int_vector_int_int_set_int_random_3(void) { { AKA_test_case_name=\"Solution_getAllSums_int_int_vector_int_int_set_int_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int index=-1990920058; int end=1767630601; vector<int> nums; int sum=2046095734; set<int> sums; int nums_element0=285884512; nums.push_back(nums_element0); sums.insert(sums_element0); AKA_mark(\"<<PRE-CALLING>> Test Solution_getAllSums_int_int_vector_int_int_set_int_random_3\");AKA_INSTANCE___Solution->getAllSums(index,end,nums,sum,sums); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\getAllSums(int,int,vector<int>&,int,set<int>&)\"); vector<int> EXPECTED_nums; set<int> EXPECTED_sums; ; } }"
    },
    {
        "source": "int minAbsDifference(vector<int>& nums, int goal) { set<int> sums_left, sums_right; int mid = nums.size() / 2; getAllSums(0, mid, nums, sums_left); getAllSums(mid+1, nums.size()-1, nums, sums_right); int minDiff = INT_MAX; for (auto& sum : sums_left) { minDiff = min(minDiff, findClosetDiff(sums_right, goal - sum)); } return minDiff; }",
        "target": "void AKA_TEST_Solution_minAbsDifference_vector_int_int_random_0(void) { { AKA_test_case_name=\"Solution_minAbsDifference_vector_int_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ClosestSubsequenceSum.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> nums; int goal=-44683554; int AKA_EXPECTED_OUTPUT; int nums_element0=1567627325; nums.push_back(nums_element0); int nums_element1=-623564934; nums.push_back(nums_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_minAbsDifference_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minAbsDifference(nums,goal); AKA_fCall++;AKA_mark(\"Return from: .\\\\4\\\\closestSubsequenceSum\\\\ClosestSubsequenceSum.cpp\\\\Solution\\\\minAbsDifference(vector<int>&,int)\"); vector<int> EXPECTED_nums; ; } }"
    },
    {
        "source": "vector< vector<string> > groupAnagrams(vector<string> &strs) { vector< vector<string> > result; map<string, int> m; for(int i=0; i<strs.size(); i++){ string word = strs[i]; sort(word.begin(), word.end()); if (m.find(word)==m.end()){ vector<string> v; v.push_back(strs[i]); result.push_back(v); m[word] = result.size()-1; }else{ result[m[word]].push_back(strs[i]); } } for(int i=0; i<result.size(); i++){ sort(result[i].begin(), result[i].end()); } return result; }",
        "target": "void AKA_TEST_Solution_groupAnagrams_vector_string_random_2(void) { { AKA_test_case_name=\"Solution_groupAnagrams_vector_string_random_2\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\GroupAnagrams.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; vector<vector<string>> AKA_EXPECTED_OUTPUT; char* akaRandomName845088 = new char[2];akaRandomName845088[0] = 125;akaRandomName845088[1] = '\\0';string strs_element0=akaRandomName845088; strs.push_back(strs_element0); char* akaRandomName708370 = new char[2];akaRandomName708370[0] = -19;akaRandomName708370[1] = '\\0';string strs_element1=akaRandomName708370; strs.push_back(strs_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_groupAnagrams_vector_string_random_2\");vector<vector<string>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->groupAnagrams(strs); AKA_fCall++;AKA_mark(\"Return from: .\\\\anagrams\\\\GroupAnagrams.cpp\\\\Solution\\\\groupAnagrams(vector<string>&)\"); vector<string> EXPECTED_strs; ; } } void AKA_TEST_Solution_groupAnagrams_vector_string_random_2(void) { { AKA_test_case_name=\"Solution_groupAnagrams_vector_string_random_2\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\GroupAnagrams.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; vector<vector<string>> AKA_EXPECTED_OUTPUT; char* akaRandomName637302 = new char[2];akaRandomName637302[0] = 125;akaRandomName637302[1] = '\\0';string strs_element0=akaRandomName637302; strs.push_back(strs_element0); char* akaRandomName412838 = new char[2];akaRandomName412838[0] = -19;akaRandomName412838[1] = '\\0';string strs_element1=akaRandomName412838; strs.push_back(strs_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_groupAnagrams_vector_string_random_2\");vector<vector<string>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->groupAnagrams(strs); AKA_fCall++;AKA_mark(\"Return from: .\\\\anagrams\\\\GroupAnagrams.cpp\\\\Solution\\\\groupAnagrams(vector<string>&)\"); vector<string> EXPECTED_strs; ; } }"
    },
    {
        "source": "vector< vector<string> > groupAnagrams01(vector<string> &strs) { vector< vector<string> > result; map<string, multiset<string>> m; for(int i=0; i<strs.size(); i++){ string word = strs[i]; sort(word.begin(), word.end()); m[word].insert(strs[i]); } for(auto item : m){ vector<string> v(item.second.begin(), item.second.end()); result.push_back(v); } return result; }",
        "target": "void AKA_TEST_Solution_groupAnagrams01_vector_string_random_3(void) { { AKA_test_case_name=\"Solution_groupAnagrams01_vector_string_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\GroupAnagrams.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; vector<vector<string>> AKA_EXPECTED_OUTPUT; char* akaRandomName531566 = new char[2];akaRandomName531566[0] = 5;akaRandomName531566[1] = '\\0';string strs_element0=akaRandomName531566; strs.push_back(strs_element0); char* akaRandomName345274 = new char[2];akaRandomName345274[0] = 47;akaRandomName345274[1] = '\\0';string strs_element1=akaRandomName345274; strs.push_back(strs_element1); char* akaRandomName187003 = new char[2];akaRandomName187003[0] = 103;akaRandomName187003[1] = '\\0';string strs_element2=akaRandomName187003; strs.push_back(strs_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_groupAnagrams01_vector_string_random_3\");vector<vector<string>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->groupAnagrams01(strs); AKA_fCall++;AKA_mark(\"Return from: .\\\\anagrams\\\\GroupAnagrams.cpp\\\\Solution\\\\groupAnagrams01(vector<string>&)\"); vector<string> EXPECTED_strs; ; } }"
    },
    {
        "source": "vector<string> anagrams(vector<string> &strs) { vector<string> result; map<string, int> m; for(int i=0; i<strs.size(); i++){ string word = strs[i]; sort(word.begin(), word.end()); if (m.find(word)==m.end()){ m[word] = i; }else{ if (m[word]>=0){ result.push_back(strs[m[word]]); m[word]=-1; } result.push_back(strs[i]); } } return result; }",
        "target": "void AKA_TEST_Solution_anagrams_vector_string_random_2(void) { { AKA_test_case_name=\"Solution_anagrams_vector_string_random_2\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\GroupAnagrams.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<string> strs; vector<string> AKA_EXPECTED_OUTPUT; char* akaRandomName224894 = new char[2];akaRandomName224894[0] = -25;akaRandomName224894[1] = '\\0';string strs_element0=akaRandomName224894; strs.push_back(strs_element0); char* akaRandomName450202 = new char[2];akaRandomName450202[0] = 64;akaRandomName450202[1] = '\\0';string strs_element1=akaRandomName450202; strs.push_back(strs_element1); AKA_mark(\"<<PRE-CALLING>> Test Solution_anagrams_vector_string_random_2\");vector<string> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->anagrams(strs); AKA_fCall++;AKA_mark(\"Return from: .\\\\anagrams\\\\GroupAnagrams.cpp\\\\Solution\\\\anagrams(vector<string>&)\"); vector<string> EXPECTED_strs; ; } }"
    },
    {
        "source": "int sum1toN(int n) { return n * (n+1) / 2; }",
        "target": "void AKA_TEST_Solution_sum1toN_int_random_0(void) { { AKA_test_case_name=\"Solution_sum1toN_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ArithmeticSlices.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int n=-1062502398; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_sum1toN_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->sum1toN(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\arithmeticSlices\\\\ArithmeticSlices.cpp\\\\Solution\\\\sum1toN(int)\"); ; } }"
    },
    {
        "source": "int numberOfArithmeticSlices(vector<int>& A) { int result = 0; int len = 0; for (int i=2; i<A.size(); i++) { if (A[i] - A[i-1] == A[i-1] - A[i-2]) { len++; }else{ result += sum1toN(len); len=0; } } return len==0 ? result : result + sum1toN(len); }",
        "target": "void AKA_TEST_Solution_numberOfArithmeticSlices_vector_int_random_1(void) { { AKA_test_case_name=\"Solution_numberOfArithmeticSlices_vector_int_random_1\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\ArithmeticSlices.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<int> A; int AKA_EXPECTED_OUTPUT; int A_element0=1829852369; A.push_back(A_element0); int A_element1=-2083519136; A.push_back(A_element1); int A_element2=-211435912; A.push_back(A_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_numberOfArithmeticSlices_vector_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->numberOfArithmeticSlices(A); AKA_fCall++;AKA_mark(\"Return from: .\\\\arithmeticSlices\\\\ArithmeticSlices.cpp\\\\Solution\\\\numberOfArithmeticSlices(vector<int>&)\"); vector<int> EXPECTED_A; ; } }"
    },
    {
        "source": "void removeBackspaces(string &s) { int i = 0; for(int i=0; i<s.size(); i++) { if (s[i] == '#') { int backSteps = i>0 ? 2 : 1; s.erase(i-backSteps + 1, backSteps); i -= backSteps; } } }",
        "target": "void AKA_TEST_Solution_removeBackspaces_string_random_3(void) { { AKA_test_case_name=\"Solution_removeBackspaces_string_random_3\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BackspaceStringCompare.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName1787 = new char[2];akaRandomName1787[0] = -15;akaRandomName1787[1] = '\\0';string s=akaRandomName1787; AKA_mark(\"<<PRE-CALLING>> Test Solution_removeBackspaces_string_random_3\");AKA_INSTANCE___Solution->removeBackspaces(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\backspaceStringCompare\\\\BackspaceStringCompare.cpp\\\\Solution\\\\removeBackspaces(string&)\"); ; } }"
    },
    {
        "source": "bool backspaceCompare(string S, string T) { removeBackspaces(S); removeBackspaces(T); return S == T; }",
        "target": "void AKA_TEST_Solution_backspaceCompare_string_string_random_0(void) { { AKA_test_case_name=\"Solution_backspaceCompare_string_string_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BackspaceStringCompare.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName116023 = new char[2];akaRandomName116023[0] = 57;akaRandomName116023[1] = '\\0';string S=akaRandomName116023; char* akaRandomName779212 = new char[2];akaRandomName779212[0] = 68;akaRandomName779212[1] = '\\0';string T=akaRandomName779212; bool AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_backspaceCompare_string_string_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->backspaceCompare(S,T); AKA_fCall++;AKA_mark(\"Return from: .\\\\backspaceStringCompare\\\\BackspaceStringCompare.cpp\\\\Solution\\\\backspaceCompare(string,string)\"); ; } }"
    },
    {
        "source": "int brokenCalc(int X, int Y) { if (X >= Y) return X-Y ; if ( Y%2 ==0 ) return brokenCalc(X, Y/2) + 1; return brokenCalc(X, Y+1) + 1; }",
        "target": "void AKA_TEST_Solution_brokenCalc_int_int_random_0(void) { { AKA_test_case_name=\"Solution_brokenCalc_int_int_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\BrokenCalculator.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); int X=1702818497; int Y=-195975482; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Solution_brokenCalc_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->brokenCalc(X,Y); AKA_fCall++;AKA_mark(\"Return from: .\\\\brokenCalculator\\\\BrokenCalculator.cpp\\\\Solution\\\\brokenCalc(int,int)\"); ; } }"
    },
    {
        "source": "int* twoSum(int* nums, int numsSize, int target) { int i, min = nums[0], max = nums[0]; or (i = 0; i < numsSize; i++) { if (nums[i] > max) max = nums[i]; if (nums[i] < min) min = nums[i]; } //Ϊm (int*)calloc((max - min + 1), sizeof(int)); int *twosum = (int*)malloc(sizeof(int) * 2); // ÿɨһnumsԪأԪSize; map[nums[i] - min] = ++i) { int lookfornum = target - nums[i]; if (lookfornum<min || lookfornum>max) continue; int dis = lookfornum - min; // жĿǷѾֵ if (map[dis twosum[0] = i; twosum[1] = map[dis] - 1; break; } } return twosum; }",
        "target": "void AKA_TEST_twoSum_intmul_int_int_random_2(void) { { AKA_test_case_name=\"twoSum_intmul_int_int_random_2\"; ; int AKA_ARRAY_INIT_nums[1]; int AKA_ARRAY_INIT_nums_0=-1348042565; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int* nums = AKA_ARRAY_INIT_nums; int numsSize=4; int target=-1666784224; int* AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test twoSum_intmul_int_int_random_2\");int* AKA_ACTUAL_OUTPUT=twoSum(nums,numsSize,target); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_001 Two Sum\\\\_001 Two Sum.cpp\\\\twoSum(int*,int,int)\"); ; } }"
    },
    {
        "source": "struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) { struct ListNode *p1 = l1; struct ListNode *p2 = l2; int a, b, c; c = 0; struct ListNode *result = (struct ListNode *)malloc(sizeof(struct ListNode)); struct ListNode *p = result; while (1){ if (p1 == NULL && p2 == NULL){ if (c){ struct ListNode* t = (struct ListNode *)malloc(sizeof(struct ListNode)); t->val = 1; t->next = NULL; p->next = t; } break; } else{ struct ListNode* t = (struct ListNode *)malloc(sizeof(struct ListNode)); t->next = NULL; p->next = t; p = t; } if (p1 == NULL){ a = 0; b = p2->val; p2 = p2->next; } else if (p2 == NULL){ a = p1->val; b = 0; p1 = p1->next; } else{ a = p1->val; b = p2->val; p1 = p1->next; p2 = p2->next; } p->val = (a + b + c) % 10; c = (a + b + c) / 10; } return result->next; }",
        "target": "void AKA_TEST_addTwoNumbers_struct_ListNodemul_struct_ListNodemul_random_0(void) { { AKA_test_case_name=\"addTwoNumbers_struct_ListNodemul_struct_ListNodemul_random_0\"; ; std::vector<struct ListNode*> AKA_VECTOR_INIT_l1; AKA_mark(\"Calling: \\\\ListNode()|ROOT\\\\_002 Add Two Numbers.cpp\\\\addTwoNumbers(struct ListNode*,struct ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(); (*AKA_VECTOR_INIT_l1_0).next; AKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0); struct ListNode* l1 = AKA_VECTOR_INIT_l1[0]; std::vector<struct ListNode*> AKA_VECTOR_INIT_l2; AKA_mark(\"Calling: \\\\ListNode()|ROOT\\\\_002 Add Two Numbers.cpp\\\\addTwoNumbers(struct ListNode*,struct ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0 = new ::ListNode(); (*AKA_VECTOR_INIT_l2_0).next; AKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_0); struct ListNode* l2 = AKA_VECTOR_INIT_l2[0]; struct ListNode* AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test addTwoNumbers_struct_ListNodemul_struct_ListNodemul_random_0\");struct ListNode* AKA_ACTUAL_OUTPUT=addTwoNumbers(l1,l2); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_002 Add Two Numbers\\\\_002 Add Two Numbers.cpp\\\\addTwoNumbers(struct ListNode*,struct ListNode*)\"); ; } }"
    },
    {
        "source": "int lengthOfLongestSubstringWithoutContinuousCharacter(char* s) { int i = 1, iMax = 0; while (*(++s) != '\\0'){ if (*(s - 1) == *s){ i = 1; } else{ i++; } iMax = iMax < i ? i : iMax; } return iMax; }",
        "target": "void AKA_TEST_lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4(void) { { AKA_test_case_name=\"lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=-11; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=101; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstringWithoutContinuousCharacter(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstringWithoutContinuousCharacter(char*)\"); ; } } void AKA_TEST_lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4(void) { { AKA_test_case_name=\"lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=-11; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=101; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstringWithoutContinuousCharacter(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstringWithoutContinuousCharacter(char*)\"); ; } }"
    },
    {
        "source": "int lengthOfLongestSubstring(char* s) { int i = 0, j = 2, max = 0, l = 0; if (s[0] == '\\0') return 0; else if ((s[1] == '\\0')) return 1; while (1){ f (s[i + 1] != '\\0'){ j = 1; while (1){ if (s[i + j-1] != '\\0'){ l = checkRepeat(s, i, j); max = max < l ? l : max; if (l < j) break; j++; } else{ break; } } i++; } else{ break; } } return max; }",
        "target": "void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) { { AKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\"); ; } } void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) { { AKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\"); ; } } void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) { { AKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\"); ; } } void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) { { AKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=75; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=0; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\"); ; } }"
    },
    {
        "source": "int checkRepeat(char* s, int p, int q){ /صs; int a[200] = { 0 }; for (i = 0; i < q; i++){ if (a[(int)(s[p + i])]){ break; } else{ a[(int)(s[p + i])]++; } } return i; }",
        "target": "void AKA_TEST_checkRepeat_charmul_int_int_random_3(void) { { AKA_test_case_name=\"checkRepeat_charmul_int_int_random_3\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=123; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=79; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int p=-1267525398; int q=7; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test checkRepeat_charmul_int_int_random_3\");int AKA_ACTUAL_OUTPUT=checkRepeat(s,p,q); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\checkRepeat(char*,int,int)\"); ; } } void AKA_TEST_checkRepeat_charmul_int_int_random_3(void) { { AKA_test_case_name=\"checkRepeat_charmul_int_int_random_3\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=123; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=79; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int p=-1267525398; int q=7; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test checkRepeat_charmul_int_int_random_3\");int AKA_ACTUAL_OUTPUT=checkRepeat(s,p,q); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\checkRepeat(char*,int,int)\"); ; } } void AKA_TEST_checkRepeat_charmul_int_int_random_3(void) { { AKA_test_case_name=\"checkRepeat_charmul_int_int_random_3\"; ; char AKA_ARRAY_INIT_s[2]; char AKA_ARRAY_INIT_s_0=123; AKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0; char AKA_ARRAY_INIT_s_1=79; AKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1; char* s = AKA_ARRAY_INIT_s; int p=-1267525398; int q=7; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test checkRepeat_charmul_int_int_random_3\");int AKA_ACTUAL_OUTPUT=checkRepeat(s,p,q); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\checkRepeat(char*,int,int)\"); ; } }"
    },
    {
        "source": "string longestPalindrome(string s) { int n = s.length(); int i = 0; int start; int end; int tmp_len; int max_len = 1; int pos = 0; while (i < n) { start = i; end = i; while (end < n - 1 && s[end + 1] == s[end]) { ++end; } i = end + 1; // // (start > 0 && end < n - 1 && s[start - 1] == s[end + 1]) { --start; ++end; } tmp_len = end - start + 1; if (tmp_len > max_len) { max_len = tmp_len; pos = start; } } return s.substr(pos, max_len); }",
        "target": "void AKA_TEST_Solution2_longestPalindrome_string_random_3(void) { { AKA_test_case_name=\"Solution2_longestPalindrome_string_random_3\"; ; AKA_mark(\"Calling: \\\\Solution2()|ROOT\\\\_005 Longest Palindromic Substring.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution2\\\\AKA_INSTANCE___Solution2\\\\Solution2()\");AKA_fCall++;AKA_INSTANCE___Solution2 = new ::Solution2(); char* akaRandomName577826 = new char[2];akaRandomName577826[0] = 61;akaRandomName577826[1] = '\\0';string s=akaRandomName577826; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution2_longestPalindrome_string_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution2->longestPalindrome(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_005 Longest Palindromic Substring\\\\_005 Longest Palindromic Substring.cpp\\\\Solution2\\\\longestPalindrome(string)\"); ; } }"
    },
    {
        "source": "string longestPalindrome(string s) { if (s.length() == 0) { return \"\"; } int maxlength = 0; string maxString = s.substr(0, 1); for (int i = 0; i < s.length() - 1; i++) { if (i == 0) { if (s[0] == s[1]) { maxlength = 2; maxString = s.substr(0, 2); } continue; } string str = searchPalindrome(s, i); int length = str.length(); if (length > maxlength) { maxlength = length; maxString = str; } } return maxString; }",
        "target": "void AKA_TEST_Solution_longestPalindrome_string_random_0(void) { { AKA_test_case_name=\"Solution_longestPalindrome_string_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\_005 Longest Palindromic Substring.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName981925 = new char[2];akaRandomName981925[0] = -50;akaRandomName981925[1] = '\\0';string s=akaRandomName981925; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution_longestPalindrome_string_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->longestPalindrome(s); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_005 Longest Palindromic Substring\\\\_005 Longest Palindromic Substring.cpp\\\\Solution\\\\longestPalindrome(string)\"); ; } }"
    },
    {
        "source": "string searchPalindrome(string s, int start) { int length = 0, maxlength = 0; string str = s.substr(start,1); if (s[start] == s[start + 1]) { maxlength = 2; for (int i = 1; start + i + 1 < s.length() && start - i >= 0; i++) { if (s[start + i + 1] == s[start - i]) { maxlength += 2; } else { break; } } str = s.substr(start - maxlength / 2 + 1, maxlength); } / if (s[start - 1] == s[start + 1]) { length = 3; for (int i = 2; start + i < s.length() && start - i >= 0; i++) { if (s[start + i] == s[start - i]) { length += 2; } else { break; } } maxlength = maxlength > length ? maxlength : length; str = s.substr(start - (maxlength - 1) / 2, maxlength); } return str; }",
        "target": "void AKA_TEST_Solution_searchPalindrome_string_int_random_2(void) { { AKA_test_case_name=\"Solution_searchPalindrome_string_int_random_2\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\_005 Longest Palindromic Substring.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); char* akaRandomName450695 = new char[2];akaRandomName450695[0] = -45;akaRandomName450695[1] = '\\0';string s=akaRandomName450695; int start=1; string AKA_EXPECTED_OUTPUT=\"\"; AKA_mark(\"<<PRE-CALLING>> Test Solution_searchPalindrome_string_int_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->searchPalindrome(s,start); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_005 Longest Palindromic Substring\\\\_005 Longest Palindromic Substring.cpp\\\\Solution\\\\searchPalindrome(string,int)\"); ; } }"
    },
    {
        "source": "int reverse1(int x) { int nums[10] = { 0 }, i = 0; long result = 0; for (i = 0; i < 10; i++){ nums[i] = x % 10; x = x / 10; if (x == 0) break; } // for (int j=0; j<i+1; j++){ result = result * 10 + nums[j]; if (result > 2147483647 || result < -2147483647) return 0; } return (int)result; }",
        "target": "void AKA_TEST_reverse1_int_random_1(void) { { AKA_test_case_name=\"reverse1_int_random_1\"; ; int x=-1758245503; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test reverse1_int_random_1\");int AKA_ACTUAL_OUTPUT=reverse1(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_007 Reverse Integer\\\\_007 Reverse Integer.cpp\\\\reverse1(int)\"); ; } }"
    },
    {
        "source": "int reverse(int x) { int temp =0, i = 0; long result = 0; for (i = 0; i < 10; i++){ temp = x % 10; result = result * 10 + temp; if (result > 2147483647 || result < -2147483647) return 0; x = x / 10; if (x == 0) break; } return (int)result; }",
        "target": "void AKA_TEST_reverse_int_random_1(void) { { AKA_test_case_name=\"reverse_int_random_1\"; ; int x=952034234; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test reverse_int_random_1\");int AKA_ACTUAL_OUTPUT=reverse(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_007 Reverse Integer\\\\_007 Reverse Integer.cpp\\\\reverse(int)\"); ; } }"
    },
    {
        "source": "bool isPalindrome1(int x) { long result = 0; int y =x; if (x < 0) return false; for (int i = 0; i < 10; i++){ result = result * 10 + x % 10; x = x / 10; if (x == 0) break; } return result - y == 0; }",
        "target": "void AKA_TEST_isPalindrome1_int_random_0(void) { { AKA_test_case_name=\"isPalindrome1_int_random_0\"; ; int x=-1514112893; bool AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test isPalindrome1_int_random_0\");bool AKA_ACTUAL_OUTPUT=isPalindrome1(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome1(int)\"); ; } } void AKA_TEST_isPalindrome1_int_random_0(void) { { AKA_test_case_name=\"isPalindrome1_int_random_0\"; ; int x=-1514112893; bool AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test isPalindrome1_int_random_0\");bool AKA_ACTUAL_OUTPUT=isPalindrome1(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome1(int)\"); ; } }"
    },
    {
        "source": "bool isPalindrome(int x) { int result = 0; if (x < 0 || (x % 10 == 0 && x != 0)) return false; for (int i = 0; i < 10; i++){ result = result * 10 + x % 10; x = x / 10; if (x <= result) break; } return result == x || result / 10 == x; }",
        "target": "void AKA_TEST_isPalindrome_int_random_4(void) { { AKA_test_case_name=\"isPalindrome_int_random_4\"; ; int x=122726964; bool AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test isPalindrome_int_random_4\");bool AKA_ACTUAL_OUTPUT=isPalindrome(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome(int)\"); ; } } void AKA_TEST_isPalindrome_int_random_4(void) { { AKA_test_case_name=\"isPalindrome_int_random_4\"; ; int x=122726964; bool AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test isPalindrome_int_random_4\");bool AKA_ACTUAL_OUTPUT=isPalindrome(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome(int)\"); ; } } void AKA_TEST_isPalindrome_int_random_4(void) { { AKA_test_case_name=\"isPalindrome_int_random_4\"; ; int x=122726964; bool AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test isPalindrome_int_random_4\");bool AKA_ACTUAL_OUTPUT=isPalindrome(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome(int)\"); ; } }"
    },
    {
        "source": "void moveZeroes(int* nums, int numsSize) { int i; int temp; int nonZeroCount = 0; for (i = 0; i<numsSize; i++) { if (nums[i] != 0) { nums[nonZeroCount] = nums[i]; nonZeroCount++; } if (nums[i] == 0) continue; } for (i = nonZeroCount; i<numsSize; i++) { nums[i] = 0; } }",
        "target": "void AKA_TEST_moveZeroes_intmul_int_random_2(void) { { AKA_test_case_name=\"moveZeroes_intmul_int_random_2\"; ; int AKA_ARRAY_INIT_nums[3]; int AKA_ARRAY_INIT_nums_0=-299672171; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1=80937251; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int AKA_ARRAY_INIT_nums_2=1809585675; AKA_ARRAY_INIT_nums[2] = AKA_ARRAY_INIT_nums_2; int* nums = AKA_ARRAY_INIT_nums; int numsSize=7; AKA_mark(\"<<PRE-CALLING>> Test moveZeroes_intmul_int_random_2\");moveZeroes(nums,numsSize); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_283 Move Zeroes\\\\_283 Move Zeroes.cpp\\\\moveZeroes(int*,int)\"); ; } }"
    },
    {
        "source": "int findMaxLength1(int* nums, int numsSize) { int diff = 0, maxLength = 0; for (int start = 0; start < numsSize; start++) { diff = 0; for (int i = start; i < numsSize; i++) { diff += (nums[i] == 1 ? 1 : -1); if (diff == 0) { int length = i - start + 1; maxLength = length > maxLength ? length : maxLength; } } } return maxLength; }",
        "target": "void AKA_TEST_findMaxLength1_intmul_int_random_3(void) { { AKA_test_case_name=\"findMaxLength1_intmul_int_random_3\"; ; int AKA_ARRAY_INIT_nums[3]; int AKA_ARRAY_INIT_nums_0=1724978225; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1=907840714; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int AKA_ARRAY_INIT_nums_2=1710867304; AKA_ARRAY_INIT_nums[2] = AKA_ARRAY_INIT_nums_2; int* nums = AKA_ARRAY_INIT_nums; int numsSize=2; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test findMaxLength1_intmul_int_random_3\");int AKA_ACTUAL_OUTPUT=findMaxLength1(nums,numsSize); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_525 Contiguous Array\\\\_525 Contiguous Array.cpp\\\\findMaxLength1(int*,int)\"); ; } }"
    },
    {
        "source": "int findMaxLength2(int* nums, int numsSize) { int diff = 0, maxLength = 0; for (int start = 0; start < numsSize; start++) { int iStart = start; if (maxLength) { diff = (nums[start - 1] == 0 ? 1 : -1); iStart = start + maxLength - 1; } else { diff = 0; } for (int i = iStart; i < numsSize; i++) { diff += (nums[i] == 1 ? 1 : -1); if (diff == 0) { maxLength += i - iStart + 1; } } } return maxLength; }",
        "target": "void AKA_TEST_findMaxLength2_intmul_int_random_3(void) { { AKA_test_case_name=\"findMaxLength2_intmul_int_random_3\"; ; int AKA_ARRAY_INIT_nums[2]; int AKA_ARRAY_INIT_nums_0=-925577948; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1=-1012031715; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int* nums = AKA_ARRAY_INIT_nums; int numsSize=1; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test findMaxLength2_intmul_int_random_3\");int AKA_ACTUAL_OUTPUT=findMaxLength2(nums,numsSize); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_525 Contiguous Array\\\\_525 Contiguous Array.cpp\\\\findMaxLength2(int*,int)\"); ; } }"
    },
    {
        "source": "int findMaxLength(int* nums, int numsSize) { int *sumMap = (int*)calloc(2*numsSize+1, sizeof(int)); for(int i=0;i<2 * numsSize + 1;i++){ sumMap[i] = numsSize + 1; } sumMap[0 + numsSize] = -1; int sum = 0, maxLength = 0; for (int i = 0; i < numsSize; i++) { sum += (nums[i] == 1 ? 1 : -1); if (sumMap[sum + numsSize] == numsSize + 1) { sumMap[sum + numsSize] = i; } else { int curLength = i - sumMap[sum + numsSize]; maxLength = maxLength > curLength ? maxLength : curLength; } } return maxLength; }",
        "target": "void AKA_TEST_findMaxLength_intmul_int_random_4(void) { { AKA_test_case_name=\"findMaxLength_intmul_int_random_4\"; ; int AKA_ARRAY_INIT_nums[3]; int AKA_ARRAY_INIT_nums_0=-1187104485; AKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0; int AKA_ARRAY_INIT_nums_1=1019770646; AKA_ARRAY_INIT_nums[1] = AKA_ARRAY_INIT_nums_1; int AKA_ARRAY_INIT_nums_2=-1434322140; AKA_ARRAY_INIT_nums[2] = AKA_ARRAY_INIT_nums_2; int* nums = AKA_ARRAY_INIT_nums; int numsSize=10; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test findMaxLength_intmul_int_random_4\");int AKA_ACTUAL_OUTPUT=findMaxLength(nums,numsSize); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_525 Contiguous Array\\\\_525 Contiguous Array.cpp\\\\findMaxLength(int*,int)\"); ; } }"
    },
    {
        "source": "vector<vector<char>> updateBoard(vector<vector<char>>& board, vector<int>& click) { if (board[click[0]][click[1]] == 'M') { board[click[0]][click[1]] = 'X'; return board; } original_map.assign(board.begin(), board.end()); vector<char> t(board[0].size(), 0); for (int i = 0; i < board.size(); i++) { status_map.push_back(t); } updatestatus_map(); // //p if (status_map[click[0]][click[1]] > 0 ) { original_map[click[0]][click[1]] = status_map[click[0]][click[1]] + 0x30; return original_map; } dfs(click[0], click[1]); return original_map; }",
        "target": "void AKA_TEST_Solution_updateBoard_vector_vector_char_vector_int_random_1(void) { { AKA_test_case_name=\"Solution_updateBoard_vector_vector_char_vector_int_random_1\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\_529_Minesweeper.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); vector<vector<char>> board; vector<int> click; vector<vector<char>> AKA_EXPECTED_OUTPUT; vector<char> board_element0; char board_element0_element0=83; board_element0.push_back(board_element0_element0); board.push_back(board_element0); int click_element0=866038439; click.push_back(click_element0); int click_element1=-1117310019; click.push_back(click_element1); int click_element2=-1892685060; click.push_back(click_element2); AKA_mark(\"<<PRE-CALLING>> Test Solution_updateBoard_vector_vector_char_vector_int_random_1\");vector<vector<char>> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->updateBoard(board,click); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_529_Minesweeper\\\\_529_Minesweeper.cpp\\\\Solution\\\\updateBoard(vector<vector<char>>&,vector<int>&)\"); vector<vector<char>> EXPECTED_board; vector<int> EXPECTED_click; ; } }"
    },
    {
        "source": "void updatestatus_map() { for (int i = 0; i < original_map.size(); i++) { for (int j = 0; j < original_map[i].size(); j++) { if (original_map[i][j] == 'M') { setNumsAroundMine(i, j); } } } }",
        "target": "void AKA_TEST_Solution_updatestatus_map_random_0(void) { { AKA_test_case_name=\"Solution_updatestatus_map_random_0\"; ; AKA_mark(\"Calling: \\\\Solution()|ROOT\\\\_529_Minesweeper.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution(); AKA_mark(\"<<PRE-CALLING>> Test Solution_updatestatus_map_random_0\");AKA_INSTANCE___Solution->updatestatus_map(); AKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_529_Minesweeper\\\\_529_Minesweeper.cpp\\\\Solution\\\\updatestatus_map()\"); ; } }"
    },
    {
        "source": "",
        "target": ""
    },
    {
        "source": "long linear_search1(long a[], long n, long find) { long c; for (c = 0; c < n; c++) { if (a[c] == find) return c; } return -1; }",
        "target": "void AKA_TEST_linear_search1_long_long_long_random_3(void) { { AKA_test_case_name=\"linear_search1_long_long_long_random_3\"; ; long a[2];; long n=5; long find=-243044902; long AKA_EXPECTED_OUTPUT; a[0]=1555610589; a[1]=-2123849484; AKA_mark(\"<<PRE-CALLING>> Test linear_search1_long_long_long_random_3\");long AKA_ACTUAL_OUTPUT=Algorithm::Search::linear_search1(a,n,find); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\linear_search1(long[],long,long)\"); ; } } void AKA_TEST_linear_search1_long_long_long_random_3(void) { { AKA_test_case_name=\"linear_search1_long_long_long_random_3\"; ; long a[2];; long n=5; long find=-243044902; long AKA_EXPECTED_OUTPUT; a[0]=1555610589; a[1]=-2123849484; AKA_mark(\"<<PRE-CALLING>> Test linear_search1_long_long_long_random_3\");long AKA_ACTUAL_OUTPUT=Algorithm::Search::linear_search1(a,n,find); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\linear_search1(long[],long,long)\"); ; } }"
    },
    {
        "source": "long linear_search2(long *pointer, long n, long find) { long c; for (c = 0; c < n; c++) { if (*(pointer + c) == find) return c; } return -1; }",
        "target": "void AKA_TEST_linear_search2_longmul_long_long_random_1(void) { { AKA_test_case_name=\"linear_search2_longmul_long_long_random_1\"; ; long AKA_ARRAY_INIT_pointer[1]; long AKA_ARRAY_INIT_pointer_0=389288122; AKA_ARRAY_INIT_pointer[0] = AKA_ARRAY_INIT_pointer_0; long* pointer = AKA_ARRAY_INIT_pointer; long n=8; long find=-952697251; long AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test linear_search2_longmul_long_long_random_1\");long AKA_ACTUAL_OUTPUT=Algorithm::Search::linear_search2(pointer,n,find); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\linear_search2(long*,long,long)\"); ; } } void AKA_TEST_linear_search2_longmul_long_long_random_1(void) { { AKA_test_case_name=\"linear_search2_longmul_long_long_random_1\"; ; long AKA_ARRAY_INIT_pointer[1]; long AKA_ARRAY_INIT_pointer_0=389288122; AKA_ARRAY_INIT_pointer[0] = AKA_ARRAY_INIT_pointer_0; long* pointer = AKA_ARRAY_INIT_pointer; long n=8; long find=-952697251; long AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test linear_search2_longmul_long_long_random_1\");long AKA_ACTUAL_OUTPUT=Algorithm::Search::linear_search2(pointer,n,find); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\linear_search2(long*,long,long)\"); ; } }"
    },
    {
        "source": "int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; }",
        "target": "void AKA_TEST_binarySearch_int_int_int_int_random_1(void) { { AKA_test_case_name=\"binarySearch_int_int_int_int_random_1\"; ; int arr[3];; int l=-1131179258; int r=-456405430; int x=1538791365; int AKA_EXPECTED_OUTPUT; arr[0]=1302875958; arr[1]=571177432; arr[2]=-1653009281; AKA_mark(\"<<PRE-CALLING>> Test binarySearch_int_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Algorithm::Search::binarySearch(arr,l,r,x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\binarySearch(int[],int,int,int)\"); ; } } void AKA_TEST_binarySearch_int_int_int_int_random_1(void) { { AKA_test_case_name=\"binarySearch_int_int_int_int_random_1\"; ; int arr[3];; int l=-1131179258; int r=-456405430; int x=1538791365; int AKA_EXPECTED_OUTPUT; arr[0]=1302875958; arr[1]=571177432; arr[2]=-1653009281; AKA_mark(\"<<PRE-CALLING>> Test binarySearch_int_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Algorithm::Search::binarySearch(arr,l,r,x); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\binarySearch(int[],int,int,int)\"); ; } }"
    },
    {
        "source": "void NaivePatternSearch(char *pat, char *txt) { int M = strlen(pat); int N = strlen(txt); for (int i = 0; i <= N - M; i++) { int j; for (j = 0; j < M; j++) if (txt[i + j] != pat[j]) break; if (j == M) printf(\"Pattern found at index %d n\", i); } }",
        "target": "void AKA_TEST_NaivePatternSearch_charmul_charmul_random_0(void) { { AKA_test_case_name=\"NaivePatternSearch_charmul_charmul_random_0\"; ; char AKA_ARRAY_INIT_pat[2]; char AKA_ARRAY_INIT_pat_0=-17; AKA_ARRAY_INIT_pat[0] = AKA_ARRAY_INIT_pat_0; char AKA_ARRAY_INIT_pat_1=0; AKA_ARRAY_INIT_pat[1] = AKA_ARRAY_INIT_pat_1; char* pat = AKA_ARRAY_INIT_pat; char AKA_ARRAY_INIT_txt[2]; char AKA_ARRAY_INIT_txt_0=-105; AKA_ARRAY_INIT_txt[0] = AKA_ARRAY_INIT_txt_0; char AKA_ARRAY_INIT_txt_1=-114; AKA_ARRAY_INIT_txt[1] = AKA_ARRAY_INIT_txt_1; char* txt = AKA_ARRAY_INIT_txt; AKA_mark(\"<<PRE-CALLING>> Test NaivePatternSearch_charmul_charmul_random_0\");Algorithm::Search::NaivePatternSearch(pat,txt); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\NaivePatternSearch(char*,char*)\"); ; } }"
    },
    {
        "source": "void computeLPSArray(char *pat, int M, int *lps) { int len = 0; lps[0] = 0; int i = 1; while (i < M) { if (pat[i] == pat[len]) { len++; lps[i] = len; i++; } else { if (len != 0) { len = lps[len - 1]; } else { lps[i] = 0; i++; } } } }",
        "target": "void AKA_TEST_computeLPSArray_charmul_int_intmul_random_2(void) { { AKA_test_case_name=\"computeLPSArray_charmul_int_intmul_random_2\"; ; char AKA_ARRAY_INIT_pat[2]; char AKA_ARRAY_INIT_pat_0=-30; AKA_ARRAY_INIT_pat[0] = AKA_ARRAY_INIT_pat_0; char AKA_ARRAY_INIT_pat_1=64; AKA_ARRAY_INIT_pat[1] = AKA_ARRAY_INIT_pat_1; char* pat = AKA_ARRAY_INIT_pat; int M=8; int AKA_ARRAY_INIT_lps[3]; int AKA_ARRAY_INIT_lps_0=-815201346; AKA_ARRAY_INIT_lps[0] = AKA_ARRAY_INIT_lps_0; int AKA_ARRAY_INIT_lps_1=1373213011; AKA_ARRAY_INIT_lps[1] = AKA_ARRAY_INIT_lps_1; int AKA_ARRAY_INIT_lps_2=-186281533; AKA_ARRAY_INIT_lps[2] = AKA_ARRAY_INIT_lps_2; int* lps = AKA_ARRAY_INIT_lps; AKA_mark(\"<<PRE-CALLING>> Test computeLPSArray_charmul_int_intmul_random_2\");Algorithm::Search::computeLPSArray(pat,M,lps); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\computeLPSArray(char*,int,int*)\"); ; } }"
    },
    {
        "source": "void KMPSearch(char *pat, char *txt) { int M = strlen(pat); int N = strlen(txt); int lps[M]; computeLPSArray(pat, M, lps); int i = 0; int j = 0; while (i < N) { if (pat[j] == txt[i]) { j++; i++; } if (j == M) { printf(\"Found pattern at index %d n\", i - j); j = lps[j - 1]; } else if (i < N && pat[j] != txt[i]) { if (j != 0) j = lps[j - 1]; else i = i + 1; } } }",
        "target": "void AKA_TEST_KMPSearch_charmul_charmul_random_4(void) { { AKA_test_case_name=\"KMPSearch_charmul_charmul_random_4\"; ; char AKA_ARRAY_INIT_pat[2]; char AKA_ARRAY_INIT_pat_0=58; AKA_ARRAY_INIT_pat[0] = AKA_ARRAY_INIT_pat_0; char AKA_ARRAY_INIT_pat_1=91; AKA_ARRAY_INIT_pat[1] = AKA_ARRAY_INIT_pat_1; char* pat = AKA_ARRAY_INIT_pat; char AKA_ARRAY_INIT_txt[2]; char AKA_ARRAY_INIT_txt_0=12; AKA_ARRAY_INIT_txt[0] = AKA_ARRAY_INIT_txt_0; char AKA_ARRAY_INIT_txt_1=62; AKA_ARRAY_INIT_txt[1] = AKA_ARRAY_INIT_txt_1; char* txt = AKA_ARRAY_INIT_txt; AKA_mark(\"<<PRE-CALLING>> Test KMPSearch_charmul_charmul_random_4\");Algorithm::Search::KMPSearch(pat,txt); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Search.cpp\\\\Algorithm\\\\Search\\\\KMPSearch(char*,char*)\"); ; } }"
    },
    {
        "source": "int getWidth() { return width; }",
        "target": "void AKA_TEST_Polygon_getWidth_random_0(void) { { AKA_test_case_name=\"Polygon_getWidth_random_0\"; ; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle()|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Polygon\\\\AKA_INSTANCE___Polygon\\\\Rectangle()\");AKA_fCall++;AKA_INSTANCE___Polygon = new ::Rectangle(); int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Polygon_getWidth_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Polygon->getWidth(); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Polygon\\\\getWidth()\"); ; } }"
    },
    {
        "source": "int getHeight() { return height; }",
        "target": "void AKA_TEST_Polygon_getHeight_random_1(void) { { AKA_test_case_name=\"Polygon_getHeight_random_1\"; ; int AKA_INSTANCE___Polygon_a=163220920; int AKA_INSTANCE___Polygon_b=-59622500; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Polygon\\\\AKA_INSTANCE___Polygon\\\\Rectangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Polygon = new ::Rectangle(AKA_INSTANCE___Polygon_a,AKA_INSTANCE___Polygon_b); int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Polygon_getHeight_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Polygon->getHeight(); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Polygon\\\\getHeight()\"); ; } }"
    },
    {
        "source": "virtual int area(){}",
        "target": "void AKA_TEST_Polygon_area_random_0(void) { { AKA_test_case_name=\"Polygon_area_random_0\"; ; int AKA_INSTANCE___Polygon_a=1250268467; int AKA_INSTANCE___Polygon_b=239612311; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Polygon\\\\AKA_INSTANCE___Polygon\\\\Rectangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Polygon = new ::Rectangle(AKA_INSTANCE___Polygon_a,AKA_INSTANCE___Polygon_b); int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Polygon_area_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Polygon->area(); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Polygon\\\\area()\"); ; } }"
    },
    {
        "source": "int area() { return width * height; }",
        "target": "void AKA_TEST_Rectangle_area_random_1(void) { { AKA_test_case_name=\"Rectangle_area_random_1\"; ; int AKA_INSTANCE___Rectangle_a=-41120190; int AKA_INSTANCE___Rectangle_b=265018672; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Rectangle\\\\AKA_INSTANCE___Rectangle\\\\Rectangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Rectangle = new ::Rectangle(AKA_INSTANCE___Rectangle_a,AKA_INSTANCE___Rectangle_b); int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Rectangle_area_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Rectangle->area(); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\area()\"); ; } }"
    },
    {
        "source": "int area() { return width * height / 2; }",
        "target": "void AKA_TEST_Triangle_area_random_2(void) { { AKA_test_case_name=\"Triangle_area_random_2\"; ; int AKA_INSTANCE___Triangle_a=1548647601; int AKA_INSTANCE___Triangle_b=1811647126; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Triangle\\\\AKA_INSTANCE___Triangle\\\\Triangle(int,int)\");AKA_fCall++;AKA_INSTANCE___Triangle = new ::Triangle(AKA_INSTANCE___Triangle_a,AKA_INSTANCE___Triangle_b); int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Triangle_area_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Triangle->area(); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\area()\"); ; } }"
    },
    {
        "source": "int compare(Polygon* r1, Polygon* r2, int size_r1, int size_r2) { if (size_r1 != size_r2) return 0; else{ for (int i = 0; i < size_r1; i++) if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight()) return 0; return 1; } }",
        "target": "void AKA_TEST_compare_Polygonmul_Polygonmul_int_int_random_0(void) { { AKA_test_case_name=\"compare_Polygonmul_Polygonmul_int_int_random_0\"; ; std::vector<Polygon*> AKA_VECTOR_INIT_r1; int r10_a=-550734996; int r10_b=-179697833; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r1\\\\AKA_VECTOR_INIT_r1_0\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r1_0 = new ::Triangle(r10_a,r10_b); AKA_VECTOR_INIT_r1.push_back(AKA_VECTOR_INIT_r1_0); int r11_a=-991649897; int r11_b=691858012; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r1\\\\AKA_VECTOR_INIT_r1_1\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r1_1 = new ::Triangle(r11_a,r11_b); AKA_VECTOR_INIT_r1.push_back(AKA_VECTOR_INIT_r1_1); int r12_a=260710906; int r12_b=778758089; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r1\\\\AKA_VECTOR_INIT_r1_2\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r1_2 = new ::Rectangle(r12_a,r12_b); AKA_VECTOR_INIT_r1.push_back(AKA_VECTOR_INIT_r1_2); Polygon* r1 = AKA_VECTOR_INIT_r1[0]; std::vector<Polygon*> AKA_VECTOR_INIT_r2; int r20_a=197373081; int r20_b=1672708278; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r2\\\\AKA_VECTOR_INIT_r2_0\\\\r2\\\\Triangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r2_0 = new ::Triangle(r20_a,r20_b); AKA_VECTOR_INIT_r2.push_back(AKA_VECTOR_INIT_r2_0); int r21_a=507593789; int r21_b=-1466071014; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\\\\r2\\\\AKA_VECTOR_INIT_r2_1\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;auto AKA_VECTOR_INIT_r2_1 = new ::Rectangle(r21_a,r21_b); AKA_VECTOR_INIT_r2.push_back(AKA_VECTOR_INIT_r2_1); Polygon* r2 = AKA_VECTOR_INIT_r2[0]; int size_r1=4; int size_r2=460215597; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test compare_Polygonmul_Polygonmul_int_int_random_0\");int AKA_ACTUAL_OUTPUT=compare(r1,r2,size_r1,size_r2); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\compare(Polygon*,Polygon*,int,int)\"); ; } }"
    },
    {
        "source": "int compare(Polygon r1, Polygon r2) { if (r1.getWidth() == r2.getWidth()) if (r1.getHeight() == r2.getHeight()) return 1; return 0; }",
        "target": "void AKA_TEST_compare_Polygon_Polygon_random_3(void) { { AKA_test_case_name=\"compare_Polygon_Polygon_random_3\"; ; int AKA_EXPECTED_OUTPUT; int r1_a=1027949756; int r1_b=-728550828; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon,Polygon)\\\\r1\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;::Rectangle r1 = ::Rectangle(r1_a,r1_b); int r2_a=-354168310; int r2_b=1051373654; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon,Polygon)\\\\r2\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;::Rectangle r2 = ::Rectangle(r2_a,r2_b); AKA_mark(\"<<PRE-CALLING>> Test compare_Polygon_Polygon_random_3\");int AKA_ACTUAL_OUTPUT=compare(r1,r2); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\compare(Polygon,Polygon)\"); ; } }"
    },
    {
        "source": "int compare(Polygon r1[3], Polygon r2[3]) { for (int i = 0; i < 3; i++) if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight()) return 0; return 1; }",
        "target": "void AKA_TEST_compare_Polygon_3_Polygon_3_random_2(void) { { AKA_test_case_name=\"compare_Polygon_3_Polygon_3_random_2\"; ; Polygon r1[3]; Polygon r2[3]; int AKA_EXPECTED_OUTPUT; int r10_a=-786241031; int r10_b=1409949452; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r1\\\\r1[0]\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;r1[0] = ::Rectangle(r10_a,r10_b); int r11_a=927541757; int r11_b=-375421258; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r1\\\\r1[1]\\\\r1\\\\Rectangle(int,int)\");AKA_fCall++;r1[1] = ::Rectangle(r11_a,r11_b); int r12_a=239935624; int r12_b=-1014455850; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r1\\\\r1[2]\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;r1[2] = ::Triangle(r12_a,r12_b); int r20_a=-1560718111; int r20_b=-205886120; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r2\\\\r2[0]\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;r2[0] = ::Rectangle(r20_a,r20_b); AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle()|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r2\\\\r2[1]\\\\r2\\\\Triangle()\");AKA_fCall++;r2[1] = ::Triangle(); AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle()|ROOT\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\\\\r2\\\\r2[2]\\\\r2\\\\Rectangle()\");AKA_fCall++;r2[2] = ::Rectangle(); AKA_mark(\"<<PRE-CALLING>> Test compare_Polygon_3_Polygon_3_random_2\");int AKA_ACTUAL_OUTPUT=compare(r1,r2); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\compare(Polygon[3],Polygon[3])\"); Polygon EXPECTED_r1[3]; Polygon EXPECTED_r2[3]; ; } }"
    },
    {
        "source": "int comparev2(Polygon r1[], Polygon r2[], int size_r1, int size_r2) { if (size_r1 != size_r2) return 0; else{ for (int i = 0; i < size_r1; i++) if (r1[i].getWidth() != r2[i].getWidth() && r1[i].getHeight() != r2[i].getHeight()) return 0; return 1; } }",
        "target": "void AKA_TEST_comparev2_Polygon_Polygon_int_int_random_4(void) { { AKA_test_case_name=\"comparev2_Polygon_Polygon_int_int_random_4\"; ; Polygon r1[3]; Polygon r2[3]; int size_r1=1; int size_r2=-1954239458; int AKA_EXPECTED_OUTPUT; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle()|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r1\\\\r1[0]\\\\r1\\\\Rectangle()\");AKA_fCall++;r1[0] = ::Rectangle(); int r11_a=1943973774; int r11_b=-981138420; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r1\\\\r1[1]\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;r1[1] = ::Triangle(r11_a,r11_b); int r12_a=1781634190; int r12_b=2050690504; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r1\\\\r1[2]\\\\r1\\\\Triangle(int,int)\");AKA_fCall++;r1[2] = ::Triangle(r12_a,r12_b); AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle()|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r2\\\\r2[0]\\\\r2\\\\Triangle()\");AKA_fCall++;r2[0] = ::Triangle(); int r21_a=-1782003261; int r21_b=-689767677; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Rectangle\\\\Rectangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r2\\\\r2[1]\\\\r2\\\\Rectangle(int,int)\");AKA_fCall++;r2[1] = ::Rectangle(r21_a,r21_b); int r22_a=460534583; int r22_b=-1711342658; AKA_mark(\"Calling: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\Triangle\\\\Triangle(int,int)|ROOT\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\\\\r2\\\\r2[2]\\\\r2\\\\Triangle(int,int)\");AKA_fCall++;r2[2] = ::Triangle(r22_a,r22_b); AKA_mark(\"<<PRE-CALLING>> Test comparev2_Polygon_Polygon_int_int_random_4\");int AKA_ACTUAL_OUTPUT=comparev2(r1,r2,size_r1,size_r2); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\ShapeComparison.cpp\\\\comparev2(Polygon[],Polygon[],int,int)\"); ; } }"
    },
    {
        "source": "void swap(int *xp, int *yp) { int temp = *xp; *xp = *yp; *yp = temp; }",
        "target": "void AKA_TEST_swap_intmul_intmul_random_2(void) { { AKA_test_case_name=\"swap_intmul_intmul_random_2\"; ; int AKA_ARRAY_INIT_xp[2]; int AKA_ARRAY_INIT_xp_0=1941229057; AKA_ARRAY_INIT_xp[0] = AKA_ARRAY_INIT_xp_0; int AKA_ARRAY_INIT_xp_1=-1493216544; AKA_ARRAY_INIT_xp[1] = AKA_ARRAY_INIT_xp_1; int* xp = AKA_ARRAY_INIT_xp; int AKA_ARRAY_INIT_yp[3]; int AKA_ARRAY_INIT_yp_0=928581031; AKA_ARRAY_INIT_yp[0] = AKA_ARRAY_INIT_yp_0; int AKA_ARRAY_INIT_yp_1=1129332382; AKA_ARRAY_INIT_yp[1] = AKA_ARRAY_INIT_yp_1; int AKA_ARRAY_INIT_yp_2=-855793599; AKA_ARRAY_INIT_yp[2] = AKA_ARRAY_INIT_yp_2; int* yp = AKA_ARRAY_INIT_yp; AKA_mark(\"<<PRE-CALLING>> Test swap_intmul_intmul_random_2\");Algorithm::Sort::swap(xp,yp); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\swap(int*,int*)\"); ; } }"
    },
    {
        "source": "void selectionSort(int arr[], int n) { int i, j, min_idx; for (i = 0; i < n - 1; i++) { min_idx = i; for (j = i + 1; j < n; j++) if (arr[j] < arr[min_idx]) min_idx = j; swap(&arr[min_idx], &arr[i]); } }",
        "target": "void AKA_TEST_selectionSort_int_int_random_2(void) { { AKA_test_case_name=\"selectionSort_int_int_random_2\"; ; int arr[3];; int n=4; arr[0]=1144247356; arr[1]=270473347; arr[2]=-563962138; AKA_mark(\"<<PRE-CALLING>> Test selectionSort_int_int_random_2\");Algorithm::Sort::selectionSort(arr,n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\selectionSort(int[],int)\"); ; } }"
    },
    {
        "source": "void bubbleSort2(int arr[], int n) { int i, j; bool swapped; for (i = 0; i < n - 1; i++) { swapped = false; for (j = 0; j < n - i - 1; j++) { if (arr[j] > arr[j + 1]) { swap(&arr[j], &arr[j + 1]); swapped = true; } } if (swapped == false) break; } }",
        "target": "void AKA_TEST_bubbleSort2_int_int_random_2(void) { { AKA_test_case_name=\"bubbleSort2_int_int_random_2\"; ; int arr[2];; int n=1; arr[0]=-1557408651; arr[1]=-217927943; AKA_mark(\"<<PRE-CALLING>> Test bubbleSort2_int_int_random_2\");Algorithm::Sort::bubbleSort2(arr,n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\bubbleSort2(int[],int)\"); ; } }"
    },
    {
        "source": "void quickSort(int arr[], int low, int high) { if (low < high) { int pi = partition(arr, low, high); int x = pi - 1; quickSort(arr, low, x); int y = pi + 1; quickSort(arr, y, high); } }",
        "target": "void AKA_TEST_quickSort_int_int_int_random_3(void) { { AKA_test_case_name=\"quickSort_int_int_int_random_3\"; ; int arr[1];; int low=-967778146; int high=526574950; arr[0]=-718352632; AKA_mark(\"<<PRE-CALLING>> Test quickSort_int_int_int_random_3\");Algorithm::Sort::quickSort(arr,low,high); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\quickSort(int[],int,int)\"); ; } } void AKA_TEST_quickSort_int_int_int_random_3(void) { { AKA_test_case_name=\"quickSort_int_int_int_random_3\"; ; int arr[1];; int low=-967778146; int high=526574950; arr[0]=-718352632; AKA_mark(\"<<PRE-CALLING>> Test quickSort_int_int_int_random_3\");Algorithm::Sort::quickSort(arr,low,high); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\quickSort(int[],int,int)\"); ; } }"
    },
    {
        "source": "void quickSortIterative(int arr[], int l, int h) { int stack[h - l + 1]; int top = -1; top++; stack[top] = l; top++; stack[top] = h; while (top >= 0) { h = stack[top]; top--; l = stack[top]; top--; int p = partition(arr, l, h); if (p - 1 > l) { top++; stack[top] = l; top++; stack[top] = p - 1; } if (p + 1 < h) { top++; stack[top] = p + 1; top++; stack[top] = h; } } }",
        "target": "void AKA_TEST_quickSortIterative_int_int_int_random_4(void) { { AKA_test_case_name=\"quickSortIterative_int_int_int_random_4\"; ; int arr[3];; int l=-1436144676; int h=-1520361884; arr[0]=1351469861; arr[1]=1516655763; arr[2]=1935887102; AKA_mark(\"<<PRE-CALLING>> Test quickSortIterative_int_int_int_random_4\");Algorithm::Sort::quickSortIterative(arr,l,h); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\quickSortIterative(int[],int,int)\"); ; } }"
    },
    {
        "source": "void push(struct Node** head_ref, int new_data) { struct Node* new_node = new Node; new_node->data = new_data; new_node->next = (*head_ref); (*head_ref) = new_node; }",
        "target": "void AKA_TEST_push_struct_Nodemulmul_int_random_1(void) { { AKA_test_case_name=\"push_struct_Nodemulmul_int_random_1\"; ; std::vector<struct Node**> AKA_VECTOR_INIT_head_ref; std::vector<struct Node*> AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_ref_0; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\push(struct Node**,int)\\\\head_ref\\\\AKA_VECTOR_INIT_head_ref_0\\\\AKA_VECTOR_INIT_head_ref_0_0\\\\AKA_VECTOR_INIT_head_ref_0_0\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_ref_0_0 = new ::Node(); (*AKA_VECTOR_INIT_head_ref_0_0).next; AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_ref_0.push_back(AKA_VECTOR_INIT_head_ref_0_0); auto AKA_VECTOR_INIT_head_ref_0 = &(AKA_VECTOR_INIT_AKA_VECTOR_INIT_head_ref_0[0]); AKA_VECTOR_INIT_head_ref.push_back(AKA_VECTOR_INIT_head_ref_0); struct Node** head_ref = AKA_VECTOR_INIT_head_ref[0]; int new_data=-1638272449; AKA_mark(\"<<PRE-CALLING>> Test push_struct_Nodemulmul_int_random_1\");Algorithm::Sort::push(head_ref,new_data); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\push(struct Node**,int)\"); ; } }"
    },
    {
        "source": "void printList(struct Node *node) { while (node != NULL) { printf(\"%d \", node->data); node = node->next; } printf(\"\\n\"); }",
        "target": "void AKA_TEST_printList_struct_Nodemul_random_3(void) { { AKA_test_case_name=\"printList_struct_Nodemul_random_3\"; ; std::vector<struct Node*> AKA_VECTOR_INIT_node; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\printList(struct Node*)\\\\node\\\\AKA_VECTOR_INIT_node_0\\\\node\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_node_0 = new ::Node(); (*AKA_VECTOR_INIT_node_0).data=-1775759866; (*AKA_VECTOR_INIT_node_0).next; AKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_0); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\printList(struct Node*)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1 = new ::Node(); (*AKA_VECTOR_INIT_node_1).data=-1620435686; std::vector<struct Node*> AKA_VECTOR_INIT_node_1_DOT_next; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\printList(struct Node*)\\\\node\\\\AKA_VECTOR_INIT_node_1\\\\node\\\\next\\\\next[0]\\\\next\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_node_1_DOT_next_0 = new ::Node(); (*AKA_VECTOR_INIT_node_1_DOT_next_0).data=1619895485; (*AKA_VECTOR_INIT_node_1_DOT_next_0).next; AKA_VECTOR_INIT_node_1_DOT_next.push_back(AKA_VECTOR_INIT_node_1_DOT_next_0); (*AKA_VECTOR_INIT_node_1).next = AKA_VECTOR_INIT_node_1_DOT_next[0]; AKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_1); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\printList(struct Node*)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2 = new ::Node(); (*AKA_VECTOR_INIT_node_2).data=-2007494595; std::vector<struct Node*> AKA_VECTOR_INIT_node_2_DOT_next; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\printList(struct Node*)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\next\\\\next[0]\\\\next\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_next_0 = new ::Node(); (*AKA_VECTOR_INIT_node_2_DOT_next_0).data=339174975; (*AKA_VECTOR_INIT_node_2_DOT_next_0).next; AKA_VECTOR_INIT_node_2_DOT_next.push_back(AKA_VECTOR_INIT_node_2_DOT_next_0); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\printList(struct Node*)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\next\\\\next[1]\\\\next\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_next_1 = new ::Node(); (*AKA_VECTOR_INIT_node_2_DOT_next_1).data=-1666876839; (*AKA_VECTOR_INIT_node_2_DOT_next_1).next; AKA_VECTOR_INIT_node_2_DOT_next.push_back(AKA_VECTOR_INIT_node_2_DOT_next_1); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\printList(struct Node*)\\\\node\\\\AKA_VECTOR_INIT_node_2\\\\node\\\\next\\\\next[2]\\\\next\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_node_2_DOT_next_2 = new ::Node(); (*AKA_VECTOR_INIT_node_2_DOT_next_2).data=771429036; (*AKA_VECTOR_INIT_node_2_DOT_next_2).next; AKA_VECTOR_INIT_node_2_DOT_next.push_back(AKA_VECTOR_INIT_node_2_DOT_next_2); (*AKA_VECTOR_INIT_node_2).next = AKA_VECTOR_INIT_node_2_DOT_next[0]; AKA_VECTOR_INIT_node.push_back(AKA_VECTOR_INIT_node_2); struct Node* node = AKA_VECTOR_INIT_node[0]; AKA_mark(\"<<PRE-CALLING>> Test printList_struct_Nodemul_random_3\");Algorithm::Sort::printList(node); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\printList(struct Node*)\"); ; } }"
    },
    {
        "source": "struct Node *getTail(struct Node *cur) { while (cur != NULL && cur->next != NULL) cur = cur->next; return cur; }",
        "target": "void AKA_TEST_getTail_struct_Nodemul_random_3(void) { { AKA_test_case_name=\"getTail_struct_Nodemul_random_3\"; ; std::vector<struct Node*> AKA_VECTOR_INIT_cur; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\getTail(struct Node*)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0 = new ::Node(); std::vector<struct Node*> AKA_VECTOR_INIT_cur_0_DOT_next; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\getTail(struct Node*)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\next\\\\next[0]\\\\next\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0_DOT_next_0 = new ::Node(); (*AKA_VECTOR_INIT_cur_0_DOT_next_0).next; AKA_VECTOR_INIT_cur_0_DOT_next.push_back(AKA_VECTOR_INIT_cur_0_DOT_next_0); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\getTail(struct Node*)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\next\\\\next[1]\\\\next\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0_DOT_next_1 = new ::Node(); (*AKA_VECTOR_INIT_cur_0_DOT_next_1).next; AKA_VECTOR_INIT_cur_0_DOT_next.push_back(AKA_VECTOR_INIT_cur_0_DOT_next_1); (*AKA_VECTOR_INIT_cur_0).next = AKA_VECTOR_INIT_cur_0_DOT_next[0]; AKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_0); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\getTail(struct Node*)\\\\cur\\\\AKA_VECTOR_INIT_cur_1\\\\cur\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_1 = new ::Node(); (*AKA_VECTOR_INIT_cur_1).next; AKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_1); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\getTail(struct Node*)\\\\cur\\\\AKA_VECTOR_INIT_cur_2\\\\cur\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_2 = new ::Node(); (*AKA_VECTOR_INIT_cur_2).next; AKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_2); struct Node* cur = AKA_VECTOR_INIT_cur[0]; struct Node* AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test getTail_struct_Nodemul_random_3\");struct Node* AKA_ACTUAL_OUTPUT=Algorithm::Sort::getTail(cur); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\getTail(struct Node*)\"); ; } }"
    },
    {
        "source": "struct Node *partition(struct Node *head, struct Node *end, struct Node **newHead, struct Node **newEnd) { struct Node *pivot = end; struct Node *prev = NULL, *cur = head, *tail = pivot; while (cur != pivot) { if (cur->data < pivot->data) { if ((*newHead) == NULL) (*newHead) = cur; prev = cur; cur = cur->next; } else { if (prev) prev->next = cur->next; struct Node *tmp = cur->next; cur->next = NULL; tail->next = cur; tail = cur; cur = tmp; } } if ((*newHead) == NULL) (*newHead) = pivot; (*newEnd) = tail; return pivot; }",
        "target": "void AKA_TEST_partition_struct_Nodemul_struct_Nodemul_struct_Nodemulmul_struct_Nodemulmul_random_0(void) { { AKA_test_case_name=\"partition_struct_Nodemul_struct_Nodemul_struct_Nodemulmul_struct_Nodemulmul_random_0\"; ; std::vector<struct Node*> AKA_VECTOR_INIT_head; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\partition(struct Node*,struct Node*,struct Node**,struct Node**)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::Node(); (*AKA_VECTOR_INIT_head_0).next; AKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0); struct Node* head = AKA_VECTOR_INIT_head[0]; std::vector<struct Node*> AKA_VECTOR_INIT_end; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\partition(struct Node*,struct Node*,struct Node**,struct Node**)\\\\end\\\\AKA_VECTOR_INIT_end_0\\\\end\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_end_0 = new ::Node(); (*AKA_VECTOR_INIT_end_0).next; AKA_VECTOR_INIT_end.push_back(AKA_VECTOR_INIT_end_0); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\partition(struct Node*,struct Node*,struct Node**,struct Node**)\\\\end\\\\AKA_VECTOR_INIT_end_1\\\\end\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_end_1 = new ::Node(); (*AKA_VECTOR_INIT_end_1).next; AKA_VECTOR_INIT_end.push_back(AKA_VECTOR_INIT_end_1); struct Node* end = AKA_VECTOR_INIT_end[0]; struct Node** newHead; struct Node** newEnd; struct Node* AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test partition_struct_Nodemul_struct_Nodemul_struct_Nodemulmul_struct_Nodemulmul_random_0\");struct Node* AKA_ACTUAL_OUTPUT=Algorithm::Sort::partition(head,end,newHead,newEnd); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\partition(struct Node*,struct Node*,struct Node**,struct Node**)\"); ; } }"
    },
    {
        "source": "struct Node *quickSortRecur(struct Node *head, struct Node *end) { if (!head || head == end) return head; Node *newHead = NULL, *newEnd = NULL; struct Node *pivot = partition(head, end, &newHead, &newEnd); if (newHead != pivot) { struct Node *tmp = newHead; while (tmp->next != pivot) tmp = tmp->next; tmp->next = NULL; newHead = quickSortRecur(newHead, tmp); tmp = getTail(newHead); tmp->next = pivot; } pivot->next = quickSortRecur(pivot->next, newEnd); return newHead; }",
        "target": "void AKA_TEST_quickSortRecur_struct_Nodemul_struct_Nodemul_random_4(void) { { AKA_test_case_name=\"quickSortRecur_struct_Nodemul_struct_Nodemul_random_4\"; ; Algorithm::Sort::quickSortRecur; std::vector<struct Node*> AKA_VECTOR_INIT_head; AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\quickSortRecur(struct Node*,struct Node*)\\\\head\\\\AKA_VECTOR_INIT_head_0\\\\head\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_0 = new ::Node(); (*AKA_VECTOR_INIT_head_0).next; AKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_0); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\quickSortRecur(struct Node*,struct Node*)\\\\head\\\\AKA_VECTOR_INIT_head_1\\\\head\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_1 = new ::Node(); (*AKA_VECTOR_INIT_head_1).next; AKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_1); AKA_mark(\"Calling: \\\\Node()|ROOT\\\\Sort.cpp\\\\quickSortRecur(struct Node*,struct Node*)\\\\head\\\\AKA_VECTOR_INIT_head_2\\\\head\\\\Node()\");AKA_fCall++;auto AKA_VECTOR_INIT_head_2 = new ::Node(); (*AKA_VECTOR_INIT_head_2).next; AKA_VECTOR_INIT_head.push_back(AKA_VECTOR_INIT_head_2); struct Node* head = AKA_VECTOR_INIT_head[0]; struct Node* end; struct Node* AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test quickSortRecur_struct_Nodemul_struct_Nodemul_random_4\");struct Node* AKA_ACTUAL_OUTPUT=Algorithm::Sort::quickSortRecur(head,end); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Sort.cpp\\\\Algorithm\\\\Sort\\\\quickSortRecur(struct Node*,struct Node*)\"); ; } }"
    },
    {
        "source": "int compareTwoPeople(Person a, Person b){ if (strcmp(a.name, b.name)==0) if (a.age==b.age) if (a.salary==b.salary) return 1; return 0; }",
        "target": "void AKA_TEST_compareTwoPeople_Person_Person_random_1(void) { { AKA_test_case_name=\"compareTwoPeople_Person_Person_random_1\"; ; int AKA_EXPECTED_OUTPUT; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareTwoPeople(Person,Person)\\\\a\\\\a\\\\Person()\");AKA_fCall++;::Person a = ::Person(); a.name[0]=54; a.name[2]=10; a.name[4]=4; a.name[7]=-93; a.name[8]=-30; a.name[11]=96; a.name[13]=-117; a.name[14]=120; a.name[19]=40; a.name[22]=-41; a.name[27]=-42; a.name[37]=-83; a.name[39]=-23; a.name[40]=61; a.name[48]=67; a.age=-146389707; a.salary=0.16; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareTwoPeople(Person,Person)\\\\b\\\\b\\\\Person()\");AKA_fCall++;::Person b = ::Person(); b.name[3]=3; b.name[4]=97; b.name[6]=24; b.name[7]=57; b.name[17]=94; b.name[22]=-59; b.name[24]=93; b.name[34]=21; b.name[35]=-87; b.name[37]=-41; b.name[39]=-102; b.name[42]=-58; b.name[43]=98; b.name[44]=-100; b.name[45]=-11; b.name[48]=110; b.name[49]=110; b.age=-1183090610; b.salary=0.54; AKA_mark(\"<<PRE-CALLING>> Test compareTwoPeople_Person_Person_random_1\");int AKA_ACTUAL_OUTPUT=compareTwoPeople(a,b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\StructComparison.cpp\\\\compareTwoPeople(Person,Person)\"); ; } } void AKA_TEST_compareTwoPeople_Person_Person_random_1(void) { { AKA_test_case_name=\"compareTwoPeople_Person_Person_random_1\"; ; int AKA_EXPECTED_OUTPUT; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareTwoPeople(Person,Person)\\\\a\\\\a\\\\Person()\");AKA_fCall++;::Person a = ::Person(); a.name[0]=54; a.name[2]=10; a.name[4]=4; a.name[7]=-93; a.name[8]=-30; a.name[11]=96; a.name[13]=-117; a.name[14]=120; a.name[19]=40; a.name[22]=-41; a.name[27]=-42; a.name[37]=-83; a.name[39]=-23; a.name[40]=61; a.name[48]=67; a.age=-146389707; a.salary=0.16; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareTwoPeople(Person,Person)\\\\b\\\\b\\\\Person()\");AKA_fCall++;::Person b = ::Person(); b.name[3]=3; b.name[4]=97; b.name[6]=24; b.name[7]=57; b.name[17]=94; b.name[22]=-59; b.name[24]=93; b.name[34]=21; b.name[35]=-87; b.name[37]=-41; b.name[39]=-102; b.name[42]=-58; b.name[43]=98; b.name[44]=-100; b.name[45]=-11; b.name[48]=110; b.name[49]=110; b.age=-1183090610; b.salary=0.54; AKA_mark(\"<<PRE-CALLING>> Test compareTwoPeople_Person_Person_random_1\");int AKA_ACTUAL_OUTPUT=compareTwoPeople(a,b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\StructComparison.cpp\\\\compareTwoPeople(Person,Person)\"); ; } }"
    },
    {
        "source": "int compareGroup(Person* a, Person* b, int size_a, int size_b){ if (size_a != size_b) return 0; else{ for (int i = 0; i < size_a; i++) if (strcmp(a[i].name, b[i].name) !=0 || a[i].age != b[i].age || a[i].salary != b[i].salary) return 0; return 1; } }",
        "target": "void AKA_TEST_compareGroup_Personmul_Personmul_int_int_random_4(void) { { AKA_test_case_name=\"compareGroup_Personmul_Personmul_int_int_random_4\"; ; Person* a; Person* b; int size_a=5; int size_b=896064882; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test compareGroup_Personmul_Personmul_int_int_random_4\");int AKA_ACTUAL_OUTPUT=compareGroup(a,b,size_a,size_b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\StructComparison.cpp\\\\compareGroup(Person*,Person*,int,int)\"); ; } }"
    },
    {
        "source": "int compareGroup(Person a[3], Person b[3]){ for (int i = 0; i < 3; i++) if (strcmp(a[i].name, b[i].name) !=0 || a[i].age != b[i].age || a[i].salary != b[i].salary) return 0; return 1; }",
        "target": "void AKA_TEST_compareGroup_Person_3_Person_3_random_3(void) { { AKA_test_case_name=\"compareGroup_Person_3_Person_3_random_3\"; ; Person a[3]; Person b[3]; int AKA_EXPECTED_OUTPUT; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroup(Person[3],Person[3])\\\\a\\\\a[0]\\\\a\\\\Person()\");AKA_fCall++;a[0] = ::Person(); a[0].name[0]=87; a[0].name[1]=-88; a[0].name[2]=-107; a[0].age=-303633165; a[0].salary=0.16; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroup(Person[3],Person[3])\\\\a\\\\a[1]\\\\a\\\\Person()\");AKA_fCall++;a[1] = ::Person(); a[1].name[0]=-98; a[1].name[1]=116; a[1].name[2]=37; a[1].age=-348546753; a[1].salary=0.79; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroup(Person[3],Person[3])\\\\a\\\\a[2]\\\\a\\\\Person()\");AKA_fCall++;a[2] = ::Person(); a[2].name[0]=34; a[2].name[1]=-72; a[2].name[2]=113; a[2].age=-649038682; a[2].salary=0.64; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroup(Person[3],Person[3])\\\\b\\\\b[0]\\\\b\\\\Person()\");AKA_fCall++;b[0] = ::Person(); b[0].name[0]=110; b[0].name[1]=85; b[0].name[2]=-73; b[0].age=-1210781938; b[0].salary=0.39; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroup(Person[3],Person[3])\\\\b\\\\b[1]\\\\b\\\\Person()\");AKA_fCall++;b[1] = ::Person(); b[1].name[0]=31; b[1].name[1]=38; b[1].name[2]=-113; b[1].age=429488224; b[1].salary=0.32; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroup(Person[3],Person[3])\\\\b\\\\b[2]\\\\b\\\\Person()\");AKA_fCall++;b[2] = ::Person(); b[2].name[0]=-25; b[2].name[1]=102; b[2].name[2]=-56; b[2].age=-1084674722; b[2].salary=0.25; AKA_mark(\"<<PRE-CALLING>> Test compareGroup_Person_3_Person_3_random_3\");int AKA_ACTUAL_OUTPUT=compareGroup(a,b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\StructComparison.cpp\\\\compareGroup(Person[3],Person[3])\"); Person EXPECTED_a[3]; Person EXPECTED_b[3]; ; } }"
    },
    {
        "source": "int compareGroupv2(Person a[], Person b[], int size_a, int size_b){ if (size_a != size_b) return 0; else{ for (int i = 0; i < size_a; i++) if (strcmp(a[i].name, b[i].name) !=0 || a[i].age != b[i].age || a[i].salary != b[i].salary) return 0; return 1; } }",
        "target": "void AKA_TEST_compareGroupv2_Person_Person_int_int_random_4(void) { { AKA_test_case_name=\"compareGroupv2_Person_Person_int_int_random_4\"; ; Person a[2]; Person b[2]; int size_a=7; int size_b=374452914; int AKA_EXPECTED_OUTPUT; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroupv2(Person[],Person[],int,int)\\\\a\\\\a[0]\\\\a\\\\Person()\");AKA_fCall++;a[0] = ::Person(); a[0].name[0]=90; a[0].name[1]=80; a[0].age=742025927; a[0].salary=0.71; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroupv2(Person[],Person[],int,int)\\\\a\\\\a[1]\\\\a\\\\Person()\");AKA_fCall++;a[1] = ::Person(); a[1].name[0]=73; a[1].name[1]=25; a[1].name[2]=65; a[1].age=-1140964423; a[1].salary=0.63; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroupv2(Person[],Person[],int,int)\\\\b\\\\b[0]\\\\b\\\\Person()\");AKA_fCall++;b[0] = ::Person(); b[0].name[0]=61; b[0].name[1]=48; b[0].name[2]=-60; b[0].age=2131388762; b[0].salary=0.17; AKA_mark(\"Calling: \\\\Person()|ROOT\\\\StructComparison.cpp\\\\compareGroupv2(Person[],Person[],int,int)\\\\b\\\\b[1]\\\\b\\\\Person()\");AKA_fCall++;b[1] = ::Person(); b[1].name[0]=42; b[1].age=1056652549; b[1].salary=0.16; AKA_mark(\"<<PRE-CALLING>> Test compareGroupv2_Person_Person_int_int_random_4\");int AKA_ACTUAL_OUTPUT=compareGroupv2(a,b,size_a,size_b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\StructComparison.cpp\\\\compareGroupv2(Person[],Person[],int,int)\"); ; } }"
    },
    {
        "source": "void setMultiplier(int m) { multiplier = m; }",
        "target": "void AKA_TEST_Calculator_setMultiplier_int_random_1(void) { { AKA_test_case_name=\"Calculator_setMultiplier_int_random_1\"; ; int AKA_INSTANCE___Calculator_v=-1144447400; int AKA_INSTANCE___Calculator_m=-1285815553; AKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator(int,int)|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator(int,int)\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v,AKA_INSTANCE___Calculator_m); int m=-1993523832; AKA_mark(\"<<PRE-CALLING>> Test Calculator_setMultiplier_int_random_1\");AKA_INSTANCE___Calculator->setMultiplier(m); AKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\setMultiplier(int)\"); ; } }"
    },
    {
        "source": "int getMultiplier() const { return multiplier; }",
        "target": "void AKA_TEST_Calculator_getMultiplier_random_1(void) { { AKA_test_case_name=\"Calculator_getMultiplier_random_1\"; ; int AKA_INSTANCE___Calculator_v=1556925148; int AKA_INSTANCE___Calculator_m=-87128467; AKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator(int,int)|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator(int,int)\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v,AKA_INSTANCE___Calculator_m); int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Calculator_getMultiplier_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->getMultiplier(); AKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\getMultiplier()\"); ; } }"
    },
    {
        "source": "int add(int x) { return calculateAddition(x); }",
        "target": "void AKA_TEST_Calculator_add_int_random_1(void) { { AKA_test_case_name=\"Calculator_add_int_random_1\"; ; int AKA_INSTANCE___Calculator_v=778447519; int AKA_INSTANCE___Calculator_m=-512512729; AKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator(int,int)|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator(int,int)\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v,AKA_INSTANCE___Calculator_m); int x=1531976966; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Calculator_add_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->add(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\add(int)\"); ; } }"
    },
    {
        "source": "double divide(int x) { return static_cast<double>(value) / x; }",
        "target": "void AKA_TEST_Calculator_divide_int_random_2(void) { { AKA_test_case_name=\"Calculator_divide_int_random_2\"; ; AKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator()|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator()\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(); int x=157347228; double AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Calculator_divide_int_random_2\");double AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->divide(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\divide(int)\"); ; } }"
    },
    {
        "source": "int addAndMultiply(int x) { int sum = add(x); return sum * multiplier; //",
        "target": "void AKA_TEST_Calculator_addAndMultiply_int_random_0(void) { { AKA_test_case_name=\"Calculator_addAndMultiply_int_random_0\"; ; AKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator()|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator()\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(); int x=-1715194198; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Calculator_addAndMultiply_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->addAndMultiply(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\addAndMultiply(int)\"); ; } }"
    },
    {
        "source": "int calculateAddition(int x) { return value + x; }",
        "target": "void AKA_TEST_Calculator_calculateAddition_int_random_3(void) { { AKA_test_case_name=\"Calculator_calculateAddition_int_random_3\"; ; AKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator()|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator()\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(); int x=-304721799; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Calculator_calculateAddition_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->calculateAddition(x); AKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\calculateAddition(int)\"); ; } }"
    },
    {
        "source": "int testCalculator() { culator calc(10, 2); // Khởi t Kiểm thử hàm add và trả v",
        "target": "void AKA_TEST_testCalculator_random_0(void) { { AKA_test_case_name=\"testCalculator_random_0\"; ; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test testCalculator_random_0\");int AKA_ACTUAL_OUTPUT=testCalculator(); AKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\testCalculator()\"); ; } }"
    },
    {
        "source": "int check_array(float a[3]) { int k = 0; for (int i = 0; i < 3; i++) { if (abs(a[i] - sqrt(i + 1)) < 0.000001) { k++; } } return k; }",
        "target": "void AKA_TEST_check_array_float_3_random_1(void) { { AKA_test_case_name=\"check_array_float_3_random_1\"; ; float a[3];; int AKA_EXPECTED_OUTPUT; a[0]=0.27; a[1]=0.29; a[2]=0.31; AKA_mark(\"<<PRE-CALLING>> Test check_array_float_3_random_1\");int AKA_ACTUAL_OUTPUT=check_array(a); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_array(float[3])\"); float EXPECTED_a[3];; ; } }"
    },
    {
        "source": "int Tritype(int i, int j, int k) { int trityp = 0; if (i < 0 || j < 0 || k < 0) return 3; if (i + j <= k || j + k <= i || k + i <= j) return 3; if (i == j) trityp = trityp + 1; if (i == k) trityp = trityp + 1; if (j == k) trityp = trityp + 1; if (trityp >= 2) trityp = 2; return trityp; }",
        "target": "void AKA_TEST_Tritype_int_int_int_random_1(void) { { AKA_test_case_name=\"Tritype_int_int_int_random_1\"; ; int i=319958939; int j=1908060676; int k=-744899584; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Tritype_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Tritype(i,j,k); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\Tritype(int,int,int)\"); ; } } void AKA_TEST_Tritype_int_int_int_random_1(void) { { AKA_test_case_name=\"Tritype_int_int_int_random_1\"; ; int i=319958939; int j=1908060676; int k=-744899584; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Tritype_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Tritype(i,j,k); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\Tritype(int,int,int)\"); ; } } void AKA_TEST_Tritype_int_int_int_random_1(void) { { AKA_test_case_name=\"Tritype_int_int_int_random_1\"; ; int i=319958939; int j=1908060676; int k=-744899584; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test Tritype_int_int_int_random_1\");int AKA_ACTUAL_OUTPUT=Tritype(i,j,k); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\Tritype(int,int,int)\"); ; } }"
    },
    {
        "source": "int uninit_var(int a[3], int b[3]) { int i, k=0; for(i=0; i<2; i++) { if(a[i] == 0) return 0; if(a[i] != a[i+1]) k = 0; else if(k == 2) return 0; while(b[k] != a[i]) if(k == 2) return 0; else k++; } return 1; }",
        "target": "void AKA_TEST_uninit_var_int_3_int_3_random_2(void) { { AKA_test_case_name=\"uninit_var_int_3_int_3_random_2\"; ; int a[3];; int b[3];; int AKA_EXPECTED_OUTPUT; a[0]=-1845251358; a[1]=820619589; a[2]=-1332749930; b[0]=88253211; b[1]=2034614304; b[2]=1518242527; AKA_mark(\"<<PRE-CALLING>> Test uninit_var_int_3_int_3_random_2\");int AKA_ACTUAL_OUTPUT=uninit_var(a,b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\uninit_var(int[3],int[3])\"); int EXPECTED_a[3];; int EXPECTED_b[3];; ; } }"
    },
    {
        "source": "int ArrayCmp(int n, unsigned char* t1, unsigned char* t2) { int i; for (i = 0; i < n; i++) { if (t1[i] > t2[i]) return -1; else if (t1[i] < t2[i]) return 1; } return 0; }",
        "target": "void AKA_TEST_ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1(void) { { AKA_test_case_name=\"ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\"; ; int n=9; unsigned char AKA_ARRAY_INIT_t1[1]; unsigned char AKA_ARRAY_INIT_t1_0=150; AKA_ARRAY_INIT_t1[0] = AKA_ARRAY_INIT_t1_0; unsigned char AKA_ARRAY_INIT_t1_1=27; AKA_ARRAY_INIT_t1[1] = AKA_ARRAY_INIT_t1_1; unsigned char* t1 = AKA_ARRAY_INIT_t1; unsigned char AKA_ARRAY_INIT_t2[1]; unsigned char AKA_ARRAY_INIT_t2_0=197; AKA_ARRAY_INIT_t2[0] = AKA_ARRAY_INIT_t2_0; unsigned char AKA_ARRAY_INIT_t2_1=122; AKA_ARRAY_INIT_t2[1] = AKA_ARRAY_INIT_t2_1; unsigned char* t2 = AKA_ARRAY_INIT_t2; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\");int AKA_ACTUAL_OUTPUT=ArrayCmp(n,t1,t2); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\ArrayCmp(int,unsigned char*,unsigned char*)\"); ; } } void AKA_TEST_ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1(void) { { AKA_test_case_name=\"ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\"; ; int n=9; unsigned char AKA_ARRAY_INIT_t1[1]; unsigned char AKA_ARRAY_INIT_t1_0=150; AKA_ARRAY_INIT_t1[0] = AKA_ARRAY_INIT_t1_0; unsigned char AKA_ARRAY_INIT_t1_1=27; AKA_ARRAY_INIT_t1[1] = AKA_ARRAY_INIT_t1_1; unsigned char* t1 = AKA_ARRAY_INIT_t1; unsigned char AKA_ARRAY_INIT_t2[1]; unsigned char AKA_ARRAY_INIT_t2_0=197; AKA_ARRAY_INIT_t2[0] = AKA_ARRAY_INIT_t2_0; unsigned char AKA_ARRAY_INIT_t2_1=122; AKA_ARRAY_INIT_t2[1] = AKA_ARRAY_INIT_t2_1; unsigned char* t2 = AKA_ARRAY_INIT_t2; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test ArrayCmp_int_unsigned_charmul_unsigned_charmul_random_1\");int AKA_ACTUAL_OUTPUT=ArrayCmp(n,t1,t2); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\ArrayCmp(int,unsigned char*,unsigned char*)\"); ; } }"
    },
    {
        "source": "int find_maximum(int a[], int n) { int c, max, index; max = a[0]; index = 0; for (c = 1; c < n; c++) { if (a[c] > max) { index = c; max = a[c]; } } return index; }",
        "target": "void AKA_TEST_find_maximum_int_int_random_2(void) { { AKA_test_case_name=\"find_maximum_int_int_random_2\"; ; int a[2];; int n=7; int AKA_EXPECTED_OUTPUT; a[0]=1483059593; a[1]=1237015033; AKA_mark(\"<<PRE-CALLING>> Test find_maximum_int_int_random_2\");int AKA_ACTUAL_OUTPUT=find_maximum(a,n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\find_maximum(int[],int)\"); ; } }"
    },
    {
        "source": "void print (int r) { int c, space; int stars = -1; if (r <= 0) return; space = r - 1; stars += 2; for (c = 0; c < space; c++) printf(\" \"); for (c = 0; c < stars; c++) printf(\"*\"); printf(\"\\n\"); print(--r); space = r + 1; stars -= 2; for (c = 0; c < space; c++) printf(\" \"); for (c = 0; c < stars; c++) printf(\"*\"); printf(\"\\n\"); }",
        "target": "void AKA_TEST_print_int_random_3(void) { { AKA_test_case_name=\"print_int_random_3\"; ; int r=5; AKA_mark(\"<<PRE-CALLING>> Test print_int_random_3\");print(r); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\print(int)\"); ; } }"
    },
    {
        "source": "long reverse(long n) { static long r = 0; if (n == 0) return 0; r = r * 10; r = r + n % 10; reverse(n/10); return r; }",
        "target": "void AKA_TEST_reverse_long_random_2(void) { { AKA_test_case_name=\"reverse_long_random_2\"; ; long n=1258645331; long AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test reverse_long_random_2\");long AKA_ACTUAL_OUTPUT=reverse(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\reverse(long)\"); ; } }"
    },
    {
        "source": "int add_digits(int n) { static int sum = 0; if (n == 0) { return 0; } sum = n%10 + add_digits(n/10); return sum; }",
        "target": "void AKA_TEST_add_digits_int_random_1(void) { { AKA_test_case_name=\"add_digits_int_random_1\"; ; int n=1635919859; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test add_digits_int_random_1\");int AKA_ACTUAL_OUTPUT=add_digits(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\add_digits(int)\"); ; } }"
    },
    {
        "source": "int check_prime(int a) { int c; for ( c = 2 ; c <= a - 1 ; c++ ) { if ( a%c == 0 ) return 0; } if ( c == a ) return 1; }",
        "target": "void AKA_TEST_check_prime_int_random_2(void) { { AKA_test_case_name=\"check_prime_int_random_2\"; ; int a=7; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test check_prime_int_random_2\");int AKA_ACTUAL_OUTPUT=check_prime(a); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_prime(int)\"); ; } } void AKA_TEST_check_prime_int_random_2(void) { { AKA_test_case_name=\"check_prime_int_random_2\"; ; int a=7; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test check_prime_int_random_2\");int AKA_ACTUAL_OUTPUT=check_prime(a); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_prime(int)\"); ; } }"
    },
    {
        "source": "int check_armstrong(long long n) { long long sum = 0, temp; int remainder, digits = 0; temp = n; while (temp != 0) { digits++; temp = temp/10; } temp = n; while (temp != 0) { remainder = temp%10; sum = sum + power(remainder, digits); temp = temp/10; } if (n == sum) return 1; else return 0; }",
        "target": "void AKA_TEST_check_armstrong_long_long_random_4(void) { { AKA_test_case_name=\"check_armstrong_long_long_random_4\"; ; long long n=8; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test check_armstrong_long_long_random_4\");int AKA_ACTUAL_OUTPUT=check_armstrong(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_armstrong(long long)\"); ; } } void AKA_TEST_check_armstrong_long_long_random_4(void) { { AKA_test_case_name=\"check_armstrong_long_long_random_4\"; ; long long n=8; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test check_armstrong_long_long_random_4\");int AKA_ACTUAL_OUTPUT=check_armstrong(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_armstrong(long long)\"); ; } }"
    },
    {
        "source": "int check_vowel(char a) { if ( a >= 'A' && a <= 'Z' ) a = a + 'a' - 'A'; if ( a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u') return 1; return 0; }",
        "target": "void AKA_TEST_check_vowel_char_random_1(void) { { AKA_test_case_name=\"check_vowel_char_random_1\"; ; char a=69; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test check_vowel_char_random_1\");int AKA_ACTUAL_OUTPUT=check_vowel(a); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_vowel(char)\"); ; } } void AKA_TEST_check_vowel_char_random_1(void) { { AKA_test_case_name=\"check_vowel_char_random_1\"; ; char a=69; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test check_vowel_char_random_1\");int AKA_ACTUAL_OUTPUT=check_vowel(a); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_vowel(char)\"); ; } }"
    },
    {
        "source": "int compare_string(char *first, char *second) { while(*first==*second) { if ( *first == '\\0' || *second == '\\0' ) break; first++; second++; } if( *first == '\\0' && *second == '\\0' ) return 0; else return -1; }",
        "target": "void AKA_TEST_compare_string_charmul_charmul_random_2(void) { { AKA_test_case_name=\"compare_string_charmul_charmul_random_2\"; ; char AKA_ARRAY_INIT_first[2]; char AKA_ARRAY_INIT_first_0=37; AKA_ARRAY_INIT_first[0] = AKA_ARRAY_INIT_first_0; char AKA_ARRAY_INIT_first_1=73; AKA_ARRAY_INIT_first[1] = AKA_ARRAY_INIT_first_1; char* first = AKA_ARRAY_INIT_first; char AKA_ARRAY_INIT_second[2]; char AKA_ARRAY_INIT_second_0=-92; AKA_ARRAY_INIT_second[0] = AKA_ARRAY_INIT_second_0; char AKA_ARRAY_INIT_second_1=-12; AKA_ARRAY_INIT_second[1] = AKA_ARRAY_INIT_second_1; char* second = AKA_ARRAY_INIT_second; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test compare_string_charmul_charmul_random_2\");int AKA_ACTUAL_OUTPUT=compare_string(first,second); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\compare_string(char*,char*)\"); ; } }"
    },
    {
        "source": "int check_subsequence (char a[], char b[]) { int c, d; c = 0; d = 0; while (a[c] != '\\0') { while ((a[c] != b[d]) && b[d] != '\\0') { d++; } if (b[d] == '\\0') break; d++; c++; } if (a[c] == '\\0') return 1; else return 0; }",
        "target": "void AKA_TEST_check_subsequence_char_char_random_2(void) { { AKA_test_case_name=\"check_subsequence_char_char_random_2\"; ; char a[1]; char b[1]; int AKA_EXPECTED_OUTPUT; a[0]=-42; a[1]=97; b[0]=-4; b[1]=68; AKA_mark(\"<<PRE-CALLING>> Test check_subsequence_char_char_random_2\");int AKA_ACTUAL_OUTPUT=check_subsequence(a,b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_subsequence(char[],char[])\"); ; } }"
    },
    {
        "source": "int check_anagram(char a[], char b[]) { int first[26], second[26], c = 0; first[20] = 0; second[26]=0; while (a[c] != '\\0') { first[a[c]-'a']++; c++; } c = 0; while (b[c] != '\\0') { second[b[c]-'a']++; c++; } for (c = 0; c < 26; c++) { if (first[c] != second[c]) return 0; } return 1; }",
        "target": "void AKA_TEST_check_anagram_char_char_random_4(void) { { AKA_test_case_name=\"check_anagram_char_char_random_4\"; ; char a[1]; char b[1]; int AKA_EXPECTED_OUTPUT; a[0]=89; a[1]=-87; b[0]=-45; b[1]=-104; AKA_mark(\"<<PRE-CALLING>> Test check_anagram_char_char_random_4\");int AKA_ACTUAL_OUTPUT=check_anagram(a,b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_anagram(char[],char[])\"); ; } }"
    },
    {
        "source": "void find_frequency(char s[], int count[]) { int c = 0; while (s[c] != '\\0') { if (s[c] >= 'a' && s[c] <= 'z' ) count[s[c]-'a']++; c++; } }",
        "target": "void AKA_TEST_find_frequency_char_int_random_4(void) { { AKA_test_case_name=\"find_frequency_char_int_random_4\"; ; char s[1]; int count[3];; s[0]=29; s[1]=65; count[0]=533692624; count[1]=-1611906770; count[2]=-261894345; AKA_mark(\"<<PRE-CALLING>> Test find_frequency_char_int_random_4\");find_frequency(s,count); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\find_frequency(char[],int[])\"); ; } }"
    },
    {
        "source": "int frequencyDigits(int n, int d) { int c = 0; while (n > 0) { if (n % 10 == d) c++; n = n / 10; } return c; }",
        "target": "void AKA_TEST_frequencyDigits_int_int_random_3(void) { { AKA_test_case_name=\"frequencyDigits_int_int_random_3\"; ; int n=3; int d=-670329480; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test frequencyDigits_int_int_random_3\");int AKA_ACTUAL_OUTPUT=frequencyDigits(n,d); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\frequencyDigits(int,int)\"); ; } }"
    },
    {
        "source": "int largestNum(int a, int b) { return a * (bool)(a / b) + b * (bool)(b / a); }",
        "target": "void AKA_TEST_largestNum_int_int_random_1(void) { { AKA_test_case_name=\"largestNum_int_int_random_1\"; ; int a=-328338691; int b=801358640; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test largestNum_int_int_random_1\");int AKA_ACTUAL_OUTPUT=largestNum(a,b); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\largestNum(int,int)\"); ; } }"
    },
    {
        "source": "int lds(int arr[], int n) { int lds[n]; int i, j, max = 0; for (i = 0; i < n; i++) lds[i] = 1; for (i = 1; i < n; i++) for (j = 0; j < i; j++) if (arr[i] < arr[j] && lds[i] < lds[j] + 1) lds[i] = lds[j] + 1; for (i = 0; i < n; i++) if (max < lds[i]) max = lds[i]; return max; }",
        "target": "void AKA_TEST_lds_int_int_random_4(void) { { AKA_test_case_name=\"lds_int_int_random_4\"; ; int arr[1];; int n=10; int AKA_EXPECTED_OUTPUT; arr[0]=1112604843; AKA_mark(\"<<PRE-CALLING>> Test lds_int_int_random_4\");int AKA_ACTUAL_OUTPUT=lds(arr,n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\lds(int[],int)\"); ; } }"
    },
    {
        "source": "int getPriority(char C) { if (C == '-' || C == '+') return 1; else if (C == '*' || C == '/') return 2; else if (C == '^') return 3; return 0; }",
        "target": "void AKA_TEST_getPriority_char_random_0(void) { { AKA_test_case_name=\"getPriority_char_random_0\"; ; char C=-83; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test getPriority_char_random_0\");int AKA_ACTUAL_OUTPUT=getPriority(C); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\getPriority(char)\"); ; } }"
    },
    {
        "source": "void printDistinctPFs(int n) { long long factorCount[n + 1]; bool prime[n + 1]; for (int i = 0; i <= n; i++) { factorCount[i] = 0; prime[i] = true; } for (int i = 2; i <= n; i++) { if (prime[i] == true) { factorCount[i] = 1; for (int j = i * 2; j <= n; j += i) { factorCount[j]++; prime[j] = false; } } } }",
        "target": "void AKA_TEST_printDistinctPFs_int_random_1(void) { { AKA_test_case_name=\"printDistinctPFs_int_random_1\"; ; int n=9; AKA_mark(\"<<PRE-CALLING>> Test printDistinctPFs_int_random_1\");printDistinctPFs(n); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\printDistinctPFs(int)\"); ; } }"
    },
    {
        "source": "int steps(int N, int M) { if (N == 1) return 0; else if (N == 2) return M; return 2 * M + (N - 3); }",
        "target": "void AKA_TEST_steps_int_int_random_3(void) { { AKA_test_case_name=\"steps_int_int_random_3\"; ; int N=750372595; int M=1470340448; int AKA_EXPECTED_OUTPUT; AKA_mark(\"<<PRE-CALLING>> Test steps_int_int_random_3\");int AKA_ACTUAL_OUTPUT=steps(N,M); AKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\steps(int,int)\"); ; } }"
    }
]
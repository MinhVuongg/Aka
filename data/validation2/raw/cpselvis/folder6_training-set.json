[
  {
    "fm": "int strStr(string haystack, string needle) {\r     int j = 0;\r     vector<int> next(needle.size());\r \r     if ((haystack.size() == 0 && needle.size() == 0) || needle.size() == 0)\r     {\r       return 0;\r     }  \r     buildNextTable(needle, next);\r     for (int i = 0; i < haystack.size(); i ++)\r     {\r       while (j > 0 && haystack[i] != needle[j])\r       {\r \tj = next[j - 1];\r       }\r       if (haystack[i] == needle[j])\r       {\r \tj ++;\r       }\r       else\r       {\r \tj = 0;\r       }\r \r       if (j == needle.size())\r       {\r \treturn i - j + 1;\r       }\r     }\r     return -1;\r   }",
    "fc": "class Solution {\r public:\r   int strStr(string haystack, string needle) {\r     int j = 0;\r     vector<int> next(needle.size());\r \r     if ((haystack.size() == 0 && needle.size() == 0) || needle.size() == 0)\r     {\r       return 0;\r     }  \r     buildNextTable(needle, next);\r     for (int i = 0; i < haystack.size(); i ++)\r     {\r       while (j > 0 && haystack[i] != needle[j])\r       {\r \tj = next[j - 1];\r       }\r       if (haystack[i] == needle[j])\r       {\r \tj ++;\r       }\r       else\r       {\r \tj = 0;\r       }\r \r       if (j == needle.size())\r       {\r \treturn i - j + 1;\r       }\r     }\r     return -1;\r   }\r \r   /**\r    * @brief Build next table.\r    *        Next table is longest prefix and suffix length of each index.\r    */\r   void buildNextTable(string needle, vector<int> &next)\r   {\r     next[0] = 0;\r     for (int i = 1; i < needle.size(); i ++)\r     {\r       int tmp = next[i - 1];\r       while (tmp && needle[tmp] != needle[i])\r       {\r \ttmp = next[tmp - 1];\r       }\r       if (needle[tmp] == needle[i])\r       {\r \tnext[i] = tmp + 1;\r       }\r       else\r       {\r \tnext[i] = 0;\r       }\r     }\r   }  \r };",
    "m": [ "void buildNextTable(string needle, vector<int> &next)\r\n  {\r\n    next[0] = 0;\r\n    for (int i = 1; i < needle.size(); i ++)\r\n    {\r\n      int tmp = next[i - 1];\r\n      while (tmp && needle[tmp] != needle[i])\r\n      {\r\n\ttmp = next[tmp - 1];\r\n      }\r\n      if (needle[tmp] == needle[i])\r\n      {\r\n\tnext[i] = tmp + 1;\r\n      }\r\n      else\r\n      {\r\n\tnext[i] = 0;\r\n      }\r\n    }\r\n  }" ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution028.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName879395 = new char[2];akaRandomName879395[0] = -77;akaRandomName879395[1] = '\\0';string haystack=akaRandomName879395;\nchar* akaRandomName229035 = new char[2];akaRandomName229035[0] = -22;akaRandomName229035[1] = '\\0';string needle=akaRandomName229035;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode haystack */\n/* NormalStringDataNode needle */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_6\\solution028.cpp\\Solution\\strStr(string,string)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_strStr_string_string_random_9(void) {\n{\nAKA_test_case_name=\"Solution_strStr_string_string_random_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution028.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName732196 = new char[2];akaRandomName732196[0] = -77;akaRandomName732196[1] = '\\0';string haystack=akaRandomName732196;\nchar* akaRandomName965202 = new char[2];akaRandomName965202[0] = -22;akaRandomName965202[1] = '\\0';string needle=akaRandomName965202;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode haystack */\n/* NormalStringDataNode needle */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_strStr_string_string_random_9\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->strStr(haystack,needle);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_6\\\\solution028.cpp\\\\Solution\\\\strStr(string,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "void buildNextTable(string needle, vector<int> &next)\r   {\r     next[0] = 0;\r     for (int i = 1; i < needle.size(); i ++)\r     {\r       int tmp = next[i - 1];\r       while (tmp && needle[tmp] != needle[i])\r       {\r \ttmp = next[tmp - 1];\r       }\r       if (needle[tmp] == needle[i])\r       {\r \tnext[i] = tmp + 1;\r       }\r       else\r       {\r \tnext[i] = 0;\r       }\r     }\r   }",
    "fc": "class Solution {\r public:\r   int strStr(string haystack, string needle) {\r     int j = 0;\r     vector<int> next(needle.size());\r \r     if ((haystack.size() == 0 && needle.size() == 0) || needle.size() == 0)\r     {\r       return 0;\r     }  \r     buildNextTable(needle, next);\r     for (int i = 0; i < haystack.size(); i ++)\r     {\r       while (j > 0 && haystack[i] != needle[j])\r       {\r \tj = next[j - 1];\r       }\r       if (haystack[i] == needle[j])\r       {\r \tj ++;\r       }\r       else\r       {\r \tj = 0;\r       }\r \r       if (j == needle.size())\r       {\r \treturn i - j + 1;\r       }\r     }\r     return -1;\r   }\r \r   /**\r    * @brief Build next table.\r    *        Next table is longest prefix and suffix length of each index.\r    */\r   void buildNextTable(string needle, vector<int> &next)\r   {\r     next[0] = 0;\r     for (int i = 1; i < needle.size(); i ++)\r     {\r       int tmp = next[i - 1];\r       while (tmp && needle[tmp] != needle[i])\r       {\r \ttmp = next[tmp - 1];\r       }\r       if (needle[tmp] == needle[i])\r       {\r \tnext[i] = tmp + 1;\r       }\r       else\r       {\r \tnext[i] = 0;\r       }\r     }\r   }  \r };",
    "m": [ "int strStr(string haystack, string needle) {\r\n    int j = 0;\r\n    vector<int> next(needle.size());\r\n\r\n    if ((haystack.size() == 0 && needle.size() == 0) || needle.size() == 0)\r\n    {\r\n      return 0;\r\n    }  \r\n    buildNextTable(needle, next);\r\n    for (int i = 0; i < haystack.size(); i ++)\r\n    {\r\n      while (j > 0 && haystack[i] != needle[j])\r\n      {\r\n\tj = next[j - 1];\r\n      }\r\n      if (haystack[i] == needle[j])\r\n      {\r\n\tj ++;\r\n      }\r\n      else\r\n      {\r\n\tj = 0;\r\n      }\r\n\r\n      if (j == needle.size())\r\n      {\r\n\treturn i - j + 1;\r\n      }\r\n    }\r\n    return -1;\r\n  }" ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution028.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName61206 = new char[2];akaRandomName61206[0] = 13;akaRandomName61206[1] = '\\0';string needle=akaRandomName61206;\nvector<int> next;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode needle */\n/* VectorDataNode next */\nint next_element0=-1509375555;\nnext.push_back(next_element0);\nint next_element1=-75714417;\nnext.push_back(next_element1);\nint next_element2=-1628917147;\nnext.push_back(next_element2);\n\n" ],
    "path_fm": "D:\\py\\test\\folder_6\\solution028.cpp\\Solution\\buildNextTable(string,vector<int>&)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_buildNextTable_string_vector_int_random_11(void) {\n{\nAKA_test_case_name=\"Solution_buildNextTable_string_vector_int_random_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution028.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName428002 = new char[2];akaRandomName428002[0] = 13;akaRandomName428002[1] = '\\0';string needle=akaRandomName428002;\nvector<int> next;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode needle */\n/* VectorDataNode next */\nint next_element0=-1509375555;\nnext.push_back(next_element0);\nint next_element1=-75714417;\nnext.push_back(next_element1);\nint next_element2=-1628917147;\nnext.push_back(next_element2);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_buildNextTable_string_vector_int_random_11\");AKA_INSTANCE___Solution->buildNextTable(needle,next);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_6\\\\solution028.cpp\\\\Solution\\\\buildNextTable(string,vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_next;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "int divide(int dividend, int divisor) {\r     if (divisor == 0 || (dividend == INT_MIN && divisor == -1))\r     {\r       return INT_MAX;\r     }\r \r     int sign = ((dividend > 0) ^ (divisor > 0 )) ? -1 : 1;  // ^ in C++ means XOR, when condition returns same result , then value is 0, or value is 1.\r     long long int dvd = labs(dividend);                     // abs is only used for int type, when input is long int, use labs, float, use fabs.\r     long long int dvr = labs(divisor);\r \r     int ret = 0;\r     while (dvd >= dvr)\r     {\r       int multiple = 1;\r       long long int tmp = dvr;\r       while (dvd >= (tmp << 1))\r       {\r \ttmp <<= 1;\r \tmultiple <<= 1;\r       }\r       dvd -= tmp;\r       ret += multiple;\r     }\r     return  ret * sign;\r   }",
    "fc": "class Solution {\r public:\r   int divide(int dividend, int divisor) {\r     if (divisor == 0 || (dividend == INT_MIN && divisor == -1))\r     {\r       return INT_MAX;\r     }\r \r     int sign = ((dividend > 0) ^ (divisor > 0 )) ? -1 : 1;  // ^ in C++ means XOR, when condition returns same result , then value is 0, or value is 1.\r     long long int dvd = labs(dividend);                     // abs is only used for int type, when input is long int, use labs, float, use fabs.\r     long long int dvr = labs(divisor);\r \r     int ret = 0;\r     while (dvd >= dvr)\r     {\r       int multiple = 1;\r       long long int tmp = dvr;\r       while (dvd >= (tmp << 1))\r       {\r \ttmp <<= 1;\r \tmultiple <<= 1;\r       }\r       dvd -= tmp;\r       ret += multiple;\r     }\r     return  ret * sign;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution029.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=-1776369153;\n\n\nint divisor=631165939;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_6\\solution029.cpp\\Solution\\divide(int,int)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_divide_int_int_random_14(void) {\n{\nAKA_test_case_name=\"Solution_divide_int_int_random_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution029.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=-1776369153;\n\n\nint divisor=631165939;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_divide_int_int_random_14\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->divide(dividend,divisor);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_6\\\\solution029.cpp\\\\Solution\\\\divide(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "void nextPermutation(vector<int>& nums) {\r     int n = nums.size();\r \r     int i = n - 1;\r     int j = n - 1;\r     while (i > 0)\r     {\r       if (nums[i] > nums[i - 1])\r       {\r \twhile (j > i - 1)\r \t{\r \t  if (nums[j] > nums[i - 1])\r \t  {\r \t    swap(nums[i - 1], nums[j]);\r \t    reverse(nums.begin() + i, nums.end());\r \t    return;\r \t  }\r \t  j --;\r \t}  \r       }\r       i --;\r     }\r     reverse(nums.begin(), nums.end());\r   }",
    "fc": "class Solution {\r public:\r   void nextPermutation(vector<int>& nums) {\r     int n = nums.size();\r \r     int i = n - 1;\r     int j = n - 1;\r     while (i > 0)\r     {\r       if (nums[i] > nums[i - 1])\r       {\r \twhile (j > i - 1)\r \t{\r \t  if (nums[j] > nums[i - 1])\r \t  {\r \t    swap(nums[i - 1], nums[j]);\r \t    reverse(nums.begin() + i, nums.end());\r \t    return;\r \t  }\r \t  j --;\r \t}  \r       }\r       i --;\r     }\r     reverse(nums.begin(), nums.end());\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution031.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1300039298;\nnums.push_back(nums_element0);\nint nums_element1=1985173987;\nnums.push_back(nums_element1);\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution031.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-886299368;\nnums.push_back(nums_element0);\nint nums_element1=-1177561766;\nnums.push_back(nums_element1);\n\n" ],
    "path_fm": "D:\\py\\test\\folder_6\\solution031.cpp\\Solution\\nextPermutation(vector<int>&)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_nextPermutation_vector_int_random_16(void) {\n{\nAKA_test_case_name=\"Solution_nextPermutation_vector_int_random_16\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution031.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1300039298;\nnums.push_back(nums_element0);\nint nums_element1=1985173987;\nnums.push_back(nums_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_nextPermutation_vector_int_random_16\");AKA_INSTANCE___Solution->nextPermutation(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_6\\\\solution031.cpp\\\\Solution\\\\nextPermutation(vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_nextPermutation_vector_int_random_11(void) {\n{\nAKA_test_case_name=\"Solution_nextPermutation_vector_int_random_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution031.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-886299368;\nnums.push_back(nums_element0);\nint nums_element1=-1177561766;\nnums.push_back(nums_element1);\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_nextPermutation_vector_int_random_11\");AKA_INSTANCE___Solution->nextPermutation(nums);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_6\\\\solution031.cpp\\\\Solution\\\\nextPermutation(vector<int>&)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "int longestValidParentheses(string s) {\r     stack<int> st;\r     int ret = 0;\r     int left = -1;\r \r     for (int i = 0; i < s.size(); i ++)\r     {\r       if (s[i] == '(')\r       {\r \tst.push(i);\r       }\r       else\r       {\r \tif (st.empty())\r \t{\r \t  left = i;\r \t}\r \telse\r \t{\r \t  st.pop();\r \r \t  if (st.empty())\r \t  {\r \t    ret = max(ret, i - left);\r \t  }\r \t  else\r \t  {\r \t    ret = max(ret, i - st.top()); \r \t  }\r \t}\r       }\r     }\r     return ret;\r   }",
    "fc": "class Solution {\r public:\r   int longestValidParentheses(string s) {\r     stack<int> st;\r     int ret = 0;\r     int left = -1;\r \r     for (int i = 0; i < s.size(); i ++)\r     {\r       if (s[i] == '(')\r       {\r \tst.push(i);\r       }\r       else\r       {\r \tif (st.empty())\r \t{\r \t  left = i;\r \t}\r \telse\r \t{\r \t  st.pop();\r \r \t  if (st.empty())\r \t  {\r \t    ret = max(ret, i - left);\r \t  }\r \t  else\r \t  {\r \t    ret = max(ret, i - st.top()); \r \t  }\r \t}\r       }\r     }\r     return ret;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName650772 = new char[2];akaRandomName650772[0] = -68;akaRandomName650772[1] = '\\0';string s=akaRandomName650772;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_6\\solution032.cpp\\Solution\\longestValidParentheses(string)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_longestValidParentheses_string_random_14(void) {\n{\nAKA_test_case_name=\"Solution_longestValidParentheses_string_random_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution032.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName685499 = new char[2];akaRandomName685499[0] = -68;akaRandomName685499[1] = '\\0';string s=akaRandomName685499;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_longestValidParentheses_string_random_14\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->longestValidParentheses(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_6\\\\solution032.cpp\\\\Solution\\\\longestValidParentheses(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "int search(vector<int>& nums, int target) {\r     int l = 0, r = nums.size() - 1;\r \r     while (l <= r)\r     {\r       int m = (l + r) >> 1;\r \r       if (nums[m] == target)\r       {\r \treturn m;\r       }\t\r       \r       if (nums[l] <= nums[m])\r       {\r \tif (target >= nums[l] && target < nums[m])\r \t{\r \t  r = m - 1;\r \t}\r \telse\r \t{\r \t  l = m + 1;\r \t}  \r       }\r       else\r       {\r \tif (target > nums[m] && target <= nums[r])\r \t{\r \t  l = m + 1;  \r \t}\r \telse\r \t{\r \t  r = m - 1;\r \t}  \r       }\t\r     }\r     return -1;\r   }",
    "fc": "class Solution {\r public:\r   int search(vector<int>& nums, int target) {\r     int l = 0, r = nums.size() - 1;\r \r     while (l <= r)\r     {\r       int m = (l + r) >> 1;\r \r       if (nums[m] == target)\r       {\r \treturn m;\r       }\t\r       \r       if (nums[l] <= nums[m])\r       {\r \tif (target >= nums[l] && target < nums[m])\r \t{\r \t  r = m - 1;\r \t}\r \telse\r \t{\r \t  l = m + 1;\r \t}  \r       }\r       else\r       {\r \tif (target > nums[m] && target <= nums[r])\r \t{\r \t  l = m + 1;  \r \t}\r \telse\r \t{\r \t  r = m - 1;\r \t}  \r       }\t\r     }\r     return -1;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution033.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=729494038;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-648336684;\nnums.push_back(nums_element0);\nint nums_element1=195230465;\nnums.push_back(nums_element1);\nint nums_element2=960009336;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_6\\solution033.cpp\\Solution\\search(vector<int>&,int)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_search_vector_int_int_random_14(void) {\n{\nAKA_test_case_name=\"Solution_search_vector_int_int_random_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution033.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=729494038;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-648336684;\nnums.push_back(nums_element0);\nint nums_element1=195230465;\nnums.push_back(nums_element1);\nint nums_element2=960009336;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_search_vector_int_int_random_14\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->search(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_6\\\\solution033.cpp\\\\Solution\\\\search(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  }
]

[
  {
    "fm": "void setMultiplier(int m) {\r         multiplier = m;\r     }",
    "f": [
      "int value;",
      "int multiplier;"
    ],
    "path_fm": "C:\\Users\\admin\\Downloads\\exel\\test.cpp\\Calculator\\setMultiplier(int)",
    "c": [
      "Calculator(int v, int m) : value(v), multiplier(m) {}",
      "Calculator() : value(0), multiplier(1) {}",
      "Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}"
    ],
    "fc": "class Calculator {\r private:\r     int value; // Giá trị nội bộ của class\r     int multiplier; // Một thuộc tính bổ sung để nhân giá trị\r \r public:\r     // Constructor với nhiều tham số\r     Calculator(int v, int m) : value(v), multiplier(m) {}\r \r     // Constructor mặc định\r     Calculator() : value(0), multiplier(1) {}\r \r     // Constructor sao chép\r     Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}\r \r     // Setter để thay đổi multiplier\r     void setMultiplier(int m) {\r         multiplier = m;\r     }\r \r     // Getter để lấy multiplier\r     int getMultiplier() const {\r         return multiplier;\r     }\r \r     // Hàm cộng giá trị nội bộ với một số khác\r     int add(int x) {\r         return calculateAddition(x);\r     }\r \r     // Hàm chia giá trị nội bộ cho một số khác\r     double divide(int x) {\r         return static_cast<double>(value) / x;\r     }\r \r     // Phương thức bổ sung gọi đến add\r     int addAndMultiply(int x) {\r         int sum = add(x); // Gọi hàm add\r         return sum * multiplier; // Nhân kết quả với multiplier\r     }\r \r private:\r     // Hàm riêng để thực hiện phép cộng\r     int calculateAddition(int x) {\r         return value + x;\r     }\r };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Calculator_setMultiplier_int_random_1(void) {\n{\nAKA_test_case_name=\"Calculator_setMultiplier_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Calculator */\n/* ConstructorDataNode Calculator(int,int) */\n/* NormalNumberDataNode v */\nint AKA_INSTANCE___Calculator_v=-1144447400;\n/* NormalNumberDataNode m */\nint AKA_INSTANCE___Calculator_m=-1285815553;\nAKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator(int,int)|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator(int,int)\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v,AKA_INSTANCE___Calculator_m);\n/* NormalNumberDataNode value */\n/* value : null value -> no code */\n/* NormalNumberDataNode multiplier */\n/* multiplier : null value -> no code */\n\n\n\n\nint m=-1993523832;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode m */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Calculator_setMultiplier_int_random_1\");AKA_INSTANCE___Calculator->setMultiplier(m);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\setMultiplier(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int getMultiplier() const {\r         return multiplier;\r     }",
    "f": [
      "int value;",
      "int multiplier;"
    ],
    "path_fm": "C:\\Users\\admin\\Downloads\\exel\\test.cpp\\Calculator\\getMultiplier()",
    "c": [
      "Calculator(int v, int m) : value(v), multiplier(m) {}",
      "Calculator() : value(0), multiplier(1) {}",
      "Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}"
    ],
    "fc": "class Calculator {\r private:\r     int value; // Giá trị nội bộ của class\r     int multiplier; // Một thuộc tính bổ sung để nhân giá trị\r \r public:\r     // Constructor với nhiều tham số\r     Calculator(int v, int m) : value(v), multiplier(m) {}\r \r     // Constructor mặc định\r     Calculator() : value(0), multiplier(1) {}\r \r     // Constructor sao chép\r     Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}\r \r     // Setter để thay đổi multiplier\r     void setMultiplier(int m) {\r         multiplier = m;\r     }\r \r     // Getter để lấy multiplier\r     int getMultiplier() const {\r         return multiplier;\r     }\r \r     // Hàm cộng giá trị nội bộ với một số khác\r     int add(int x) {\r         return calculateAddition(x);\r     }\r \r     // Hàm chia giá trị nội bộ cho một số khác\r     double divide(int x) {\r         return static_cast<double>(value) / x;\r     }\r \r     // Phương thức bổ sung gọi đến add\r     int addAndMultiply(int x) {\r         int sum = add(x); // Gọi hàm add\r         return sum * multiplier; // Nhân kết quả với multiplier\r     }\r \r private:\r     // Hàm riêng để thực hiện phép cộng\r     int calculateAddition(int x) {\r         return value + x;\r     }\r };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Calculator_getMultiplier_random_1(void) {\n{\nAKA_test_case_name=\"Calculator_getMultiplier_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Calculator */\n/* ConstructorDataNode Calculator(int,int) */\n/* NormalNumberDataNode v */\nint AKA_INSTANCE___Calculator_v=1556925148;\n/* NormalNumberDataNode m */\nint AKA_INSTANCE___Calculator_m=-87128467;\nAKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator(int,int)|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator(int,int)\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v,AKA_INSTANCE___Calculator_m);\n/* NormalNumberDataNode value */\n/* value : null value -> no code */\n/* NormalNumberDataNode multiplier */\n/* multiplier : null value -> no code */\n\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Calculator_getMultiplier_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->getMultiplier();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\getMultiplier()\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int add(int x) {\r         return calculateAddition(x);\r     }",
    "f": [
      "int value;",
      "int multiplier;"
    ],
    "path_fm": "C:\\Users\\admin\\Downloads\\exel\\test.cpp\\Calculator\\add(int)",
    "c": [
      "Calculator(int v, int m) : value(v), multiplier(m) {}",
      "Calculator() : value(0), multiplier(1) {}",
      "Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}"
    ],
    "fc": "class Calculator {\r private:\r     int value; // Giá trị nội bộ của class\r     int multiplier; // Một thuộc tính bổ sung để nhân giá trị\r \r public:\r     // Constructor với nhiều tham số\r     Calculator(int v, int m) : value(v), multiplier(m) {}\r \r     // Constructor mặc định\r     Calculator() : value(0), multiplier(1) {}\r \r     // Constructor sao chép\r     Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}\r \r     // Setter để thay đổi multiplier\r     void setMultiplier(int m) {\r         multiplier = m;\r     }\r \r     // Getter để lấy multiplier\r     int getMultiplier() const {\r         return multiplier;\r     }\r \r     // Hàm cộng giá trị nội bộ với một số khác\r     int add(int x) {\r         return calculateAddition(x);\r     }\r \r     // Hàm chia giá trị nội bộ cho một số khác\r     double divide(int x) {\r         return static_cast<double>(value) / x;\r     }\r \r     // Phương thức bổ sung gọi đến add\r     int addAndMultiply(int x) {\r         int sum = add(x); // Gọi hàm add\r         return sum * multiplier; // Nhân kết quả với multiplier\r     }\r \r private:\r     // Hàm riêng để thực hiện phép cộng\r     int calculateAddition(int x) {\r         return value + x;\r     }\r };",
    "m": [
      "int calculateAddition(int x) {\r\n        return value + x;\r\n    }",
      "int addAndMultiply(int x) {\r\n        int sum = add(x); // Gọi hàm add\r\n        return sum * multiplier; // Nhân kết quả với multiplier\r\n    }",
      "int testCalculator() {\r\n    // Phần test khởi tạo và thực thi\r\n    Calculator calc(10, 2); // Khởi tạo đối tượng với giá trị ban đầu là 10\r\n    return calc.add(5); // Kiểm thử hàm add và trả về kết quả\r\n}"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Calculator_add_int_random_1(void) {\n{\nAKA_test_case_name=\"Calculator_add_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Calculator */\n/* ConstructorDataNode Calculator(int,int) */\n/* NormalNumberDataNode v */\nint AKA_INSTANCE___Calculator_v=778447519;\n/* NormalNumberDataNode m */\nint AKA_INSTANCE___Calculator_m=-512512729;\nAKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator(int,int)|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator(int,int)\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator(AKA_INSTANCE___Calculator_v,AKA_INSTANCE___Calculator_m);\n/* NormalNumberDataNode value */\n/* value : null value -> no code */\n/* NormalNumberDataNode multiplier */\n/* multiplier : null value -> no code */\n\n\n\n\nint x=1531976966;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Calculator_add_int_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->add(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\add(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "double divide(int x) {\r         return static_cast<double>(value) / x;\r     }",
    "f": [
      "int value;",
      "int multiplier;"
    ],
    "path_fm": "C:\\Users\\admin\\Downloads\\exel\\test.cpp\\Calculator\\divide(int)",
    "c": [
      "Calculator(int v, int m) : value(v), multiplier(m) {}",
      "Calculator() : value(0), multiplier(1) {}",
      "Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}"
    ],
    "fc": "class Calculator {\r private:\r     int value; // Giá trị nội bộ của class\r     int multiplier; // Một thuộc tính bổ sung để nhân giá trị\r \r public:\r     // Constructor với nhiều tham số\r     Calculator(int v, int m) : value(v), multiplier(m) {}\r \r     // Constructor mặc định\r     Calculator() : value(0), multiplier(1) {}\r \r     // Constructor sao chép\r     Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}\r \r     // Setter để thay đổi multiplier\r     void setMultiplier(int m) {\r         multiplier = m;\r     }\r \r     // Getter để lấy multiplier\r     int getMultiplier() const {\r         return multiplier;\r     }\r \r     // Hàm cộng giá trị nội bộ với một số khác\r     int add(int x) {\r         return calculateAddition(x);\r     }\r \r     // Hàm chia giá trị nội bộ cho một số khác\r     double divide(int x) {\r         return static_cast<double>(value) / x;\r     }\r \r     // Phương thức bổ sung gọi đến add\r     int addAndMultiply(int x) {\r         int sum = add(x); // Gọi hàm add\r         return sum * multiplier; // Nhân kết quả với multiplier\r     }\r \r private:\r     // Hàm riêng để thực hiện phép cộng\r     int calculateAddition(int x) {\r         return value + x;\r     }\r };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Calculator_divide_int_random_2(void) {\n{\nAKA_test_case_name=\"Calculator_divide_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Calculator */\n/* ConstructorDataNode Calculator() */\nAKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator()|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator()\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator();\n/* NormalNumberDataNode value */\n/* value : null value -> no code */\n/* NormalNumberDataNode multiplier */\n/* multiplier : null value -> no code */\n\n\n\n\nint x=157347228;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Calculator_divide_int_random_2\");double AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->divide(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\divide(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int addAndMultiply(int x) {\r         int sum = add(x); // Gọi hàm add\r         return sum * multiplier; // Nhân kết quả với multiplier\r     }",
    "f": [
      "int value;",
      "int multiplier;"
    ],
    "path_fm": "C:\\Users\\admin\\Downloads\\exel\\test.cpp\\Calculator\\addAndMultiply(int)",
    "c": [
      "Calculator(int v, int m) : value(v), multiplier(m) {}",
      "Calculator() : value(0), multiplier(1) {}",
      "Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}"
    ],
    "fc": "class Calculator {\r private:\r     int value; // Giá trị nội bộ của class\r     int multiplier; // Một thuộc tính bổ sung để nhân giá trị\r \r public:\r     // Constructor với nhiều tham số\r     Calculator(int v, int m) : value(v), multiplier(m) {}\r \r     // Constructor mặc định\r     Calculator() : value(0), multiplier(1) {}\r \r     // Constructor sao chép\r     Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}\r \r     // Setter để thay đổi multiplier\r     void setMultiplier(int m) {\r         multiplier = m;\r     }\r \r     // Getter để lấy multiplier\r     int getMultiplier() const {\r         return multiplier;\r     }\r \r     // Hàm cộng giá trị nội bộ với một số khác\r     int add(int x) {\r         return calculateAddition(x);\r     }\r \r     // Hàm chia giá trị nội bộ cho một số khác\r     double divide(int x) {\r         return static_cast<double>(value) / x;\r     }\r \r     // Phương thức bổ sung gọi đến add\r     int addAndMultiply(int x) {\r         int sum = add(x); // Gọi hàm add\r         return sum * multiplier; // Nhân kết quả với multiplier\r     }\r \r private:\r     // Hàm riêng để thực hiện phép cộng\r     int calculateAddition(int x) {\r         return value + x;\r     }\r };",
    "m": [
      "int add(int x) {\r\n        return calculateAddition(x);\r\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Calculator_addAndMultiply_int_random_0(void) {\n{\nAKA_test_case_name=\"Calculator_addAndMultiply_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Calculator */\n/* ConstructorDataNode Calculator() */\nAKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator()|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator()\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator();\n/* NormalNumberDataNode value */\n/* value : null value -> no code */\n/* NormalNumberDataNode multiplier */\n/* multiplier : null value -> no code */\n\n\n\n\nint x=-1715194198;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Calculator_addAndMultiply_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->addAndMultiply(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\addAndMultiply(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int calculateAddition(int x) {\r         return value + x;\r     }",
    "f": [
      "int value;",
      "int multiplier;"
    ],
    "path_fm": "C:\\Users\\admin\\Downloads\\exel\\test.cpp\\Calculator\\calculateAddition(int)",
    "c": [
      "Calculator(int v, int m) : value(v), multiplier(m) {}",
      "Calculator() : value(0), multiplier(1) {}",
      "Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}"
    ],
    "fc": "class Calculator {\r private:\r     int value; // Giá trị nội bộ của class\r     int multiplier; // Một thuộc tính bổ sung để nhân giá trị\r \r public:\r     // Constructor với nhiều tham số\r     Calculator(int v, int m) : value(v), multiplier(m) {}\r \r     // Constructor mặc định\r     Calculator() : value(0), multiplier(1) {}\r \r     // Constructor sao chép\r     Calculator(const Calculator& other) : value(other.value), multiplier(other.multiplier) {}\r \r     // Setter để thay đổi multiplier\r     void setMultiplier(int m) {\r         multiplier = m;\r     }\r \r     // Getter để lấy multiplier\r     int getMultiplier() const {\r         return multiplier;\r     }\r \r     // Hàm cộng giá trị nội bộ với một số khác\r     int add(int x) {\r         return calculateAddition(x);\r     }\r \r     // Hàm chia giá trị nội bộ cho một số khác\r     double divide(int x) {\r         return static_cast<double>(value) / x;\r     }\r \r     // Phương thức bổ sung gọi đến add\r     int addAndMultiply(int x) {\r         int sum = add(x); // Gọi hàm add\r         return sum * multiplier; // Nhân kết quả với multiplier\r     }\r \r private:\r     // Hàm riêng để thực hiện phép cộng\r     int calculateAddition(int x) {\r         return value + x;\r     }\r };",
    "m": [
      "int add(int x) {\r\n        return calculateAddition(x);\r\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Calculator_calculateAddition_int_random_3(void) {\n{\nAKA_test_case_name=\"Calculator_calculateAddition_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Calculator */\n/* ConstructorDataNode Calculator() */\nAKA_mark(\"Calling: .\\\\exel\\\\test.cpp\\\\Calculator\\\\Calculator()|ROOT\\\\test.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Calculator\\\\AKA_INSTANCE___Calculator\\\\Calculator()\");AKA_fCall++;AKA_INSTANCE___Calculator = new ::Calculator();\n/* NormalNumberDataNode value */\n/* value : null value -> no code */\n/* NormalNumberDataNode multiplier */\n/* multiplier : null value -> no code */\n\n\n\n\nint x=-304721799;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Calculator_calculateAddition_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Calculator->calculateAddition(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\Calculator\\\\calculateAddition(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int testCalculator() {\r     // Phần test khởi tạo và thực thi\r     Calculator calc(10, 2); // Khởi tạo đối tượng với giá trị ban đầu là 10\r     return calc.add(5); // Kiểm thử hàm add và trả về kết quả\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\Downloads\\exel\\test.cpp\\testCalculator()",
    "c": [],
    "fc": "",
    "m": [
      "int add(int x) {\r\n        return calculateAddition(x);\r\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_testCalculator_random_0(void) {\n{\nAKA_test_case_name=\"testCalculator_random_0\";\n\n// set up\n;\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test testCalculator_random_0\");int AKA_ACTUAL_OUTPUT=testCalculator();\nAKA_fCall++;AKA_mark(\"Return from: .\\\\exel\\\\test.cpp\\\\testCalculator()\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  }
]
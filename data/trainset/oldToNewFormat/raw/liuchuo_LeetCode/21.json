[
  {
    "fm": "void dfs(int index) {         if (index == 1) {             result++;             return;         }         for (int i = 1; i < visit.size(); i++) {             if (visit[i] == false && (i % index == 0 || index % i == 0)) {                 visit[i] = true;                 dfs(index-1);                 visit[i] = false;             }         }     }",
    "f": [
      "int result = 0;",
      "vector<bool> visit;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/526. Beautiful Arrangement.cpp/Solution/dfs(int)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     int countArrangement(int N) {         visit.resize(N+1);         dfs(N);         return result;     } private:     int result = 0;     vector<bool> visit;     void dfs(int index) {         if (index == 1) {             result++;             return;         }         for (int i = 1; i < visit.size(); i++) {             if (visit[i] == false && (i % index == 0 || index % i == 0)) {                 visit[i] = true;                 dfs(index-1);                 visit[i] = false;             }         }     } };",
    "m": [
      "int countArrangement(int N) {\n        visit.resize(N+1);\n        dfs(N);\n        return result;\n    }",
      "void dfs(int index) {\n        if (index == 1) {\n            result++;\n            return;\n        }\n        for (int i = 1; i < visit.size(); i++) {\n            if (visit[i] == false && (i % index == 0 || index % i == 0)) {\n                visit[i] = true;\n                dfs(index-1);\n                visit[i] = false;\n            }\n        }\n    }",
      "void dfs(int index) {\n        if (index == 1) {\n            result++;\n            return;\n        }\n        for (int i = 1; i < visit.size(); i++) {\n            if (visit[i] == false && (i % index == 0 || index % i == 0)) {\n                visit[i] = true;\n                dfs(index-1);\n                visit[i] = false;\n            }\n        }\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_dfs_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_dfs_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/526. Beautiful Arrangement.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode result */\n/* result : null value -> no code */\n/* VectorDataNode visit */\n\n\n\n\nint index=-398998648;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode index */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_int_random_1\");AKA_INSTANCE___Solution->dfs(index);\nAKA_fCall++;AKA_mark(\"Return from: ./21/526. Beautiful Arrangement.cpp/Solution/dfs(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/526. Beautiful Arrangement.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode result */\n/* result : null value -> no code */\n/* VectorDataNode visit */\n\n\n\n\nint index=-398998648;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode index */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int getMinimumDifference(TreeNode* root) {         inOrder(root);         int result = INT_MAX;         for (int i = 1; i < tree.size(); i++)             result = min(result, tree[i] - tree[i-1]);         return result;     }",
    "f": [
      "vector<int> tree;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/530. Minimum Absolute Difference in BST.cpp/Solution/getMinimumDifference(TreeNode*)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     int getMinimumDifference(TreeNode* root) {         inOrder(root);         int result = INT_MAX;         for (int i = 1; i < tree.size(); i++)             result = min(result, tree[i] - tree[i-1]);         return result;     } private:     vector<int> tree;     void inOrder(TreeNode* root) {         if (root->left != NULL) inOrder(root->left);         tree.push_back(root->val);         if (root->right != NULL) inOrder(root->right);      } };",
    "m": [
      "void inOrder(TreeNode* root) {\n        if (root->left != NULL) inOrder(root->left);\n        tree.push_back(root->val);\n        if (root->right != NULL) inOrder(root->right); \n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_getMinimumDifference_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_getMinimumDifference_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/530. Minimum Absolute Difference in BST.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode tree */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1120943759;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/getMinimumDifference(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_getMinimumDifference_TreeNodemul_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getMinimumDifference(root);\nAKA_fCall++;AKA_mark(\"Return from: ./21/530. Minimum Absolute Difference in BST.cpp/Solution/getMinimumDifference(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/530. Minimum Absolute Difference in BST.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode tree */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1120943759;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/getMinimumDifference(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "void inOrder(TreeNode* root) {         if (root->left != NULL) inOrder(root->left);         tree.push_back(root->val);         if (root->right != NULL) inOrder(root->right);      }",
    "f": [
      "vector<int> tree;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/530. Minimum Absolute Difference in BST.cpp/Solution/inOrder(TreeNode*)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     int getMinimumDifference(TreeNode* root) {         inOrder(root);         int result = INT_MAX;         for (int i = 1; i < tree.size(); i++)             result = min(result, tree[i] - tree[i-1]);         return result;     } private:     vector<int> tree;     void inOrder(TreeNode* root) {         if (root->left != NULL) inOrder(root->left);         tree.push_back(root->val);         if (root->right != NULL) inOrder(root->right);      } };",
    "m": [
      "int getMinimumDifference(TreeNode* root) {\n        inOrder(root);\n        int result = INT_MAX;\n        for (int i = 1; i < tree.size(); i++)\n            result = min(result, tree[i] - tree[i-1]);\n        return result;\n    }",
      "void inOrder(TreeNode* root) {\n        if (root->left != NULL) inOrder(root->left);\n        tree.push_back(root->val);\n        if (root->right != NULL) inOrder(root->right); \n    }",
      "void inOrder(TreeNode* root) {\n        if (root->left != NULL) inOrder(root->left);\n        tree.push_back(root->val);\n        if (root->right != NULL) inOrder(root->right); \n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_inOrder_TreeNodemul_random_3(void) {\n{\nAKA_test_case_name=\"Solution_inOrder_TreeNodemul_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/530. Minimum Absolute Difference in BST.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode tree */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=776663292;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-1167717195;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1710830957;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-818404187;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=9479564;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-1391645567;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-383565430;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=-1098441758;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-266311543;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=703119893;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=1939261670;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1303359223;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-718014542;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-943886005;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-397853475;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-779863175;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-634528601;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=94270814;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=425258407;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=718793061;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left1_x=-898875921;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_1 = new ::TreeNode(root2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).val=998699573;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left2_x=119240361;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_2 = new ::TreeNode(root2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).val=564992319;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_2);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=1113742397;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=1322935376;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right1_x=-2051308632;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_1 = new ::TreeNode(root2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).val=818080740;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right2_x=768615552;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_2 = new ::TreeNode(root2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).val=1482697523;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_2);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_inOrder_TreeNodemul_random_3\");AKA_INSTANCE___Solution->inOrder(root);\nAKA_fCall++;AKA_mark(\"Return from: ./21/530. Minimum Absolute Difference in BST.cpp/Solution/inOrder(TreeNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/530. Minimum Absolute Difference in BST.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode tree */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=776663292;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-1167717195;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1710830957;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=-818404187;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=9479564;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).val=-1391645567;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=-383565430;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).val=-1098441758;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-266311543;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=703119893;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=1939261670;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1303359223;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-718014542;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=-943886005;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-397853475;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=-779863175;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-634528601;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2).val=94270814;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left0_x=425258407;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_0 = new ::TreeNode(root2_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).val=718793061;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_0).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left1_x=-898875921;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_1 = new ::TreeNode(root2_left1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).val=998699573;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_1).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_left2_x=119240361;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/left/left[2]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_left_2 = new ::TreeNode(root2_left2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).val=564992319;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_left_2).right;\nAKA_VECTOR_INIT_root_2_DOT_left.push_back(AKA_VECTOR_INIT_root_2_DOT_left_2);\n(*AKA_VECTOR_INIT_root_2).left = AKA_VECTOR_INIT_root_2_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_2_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right0_x=1113742397;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_0 = new ::TreeNode(root2_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).val=1322935376;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_0).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right1_x=-2051308632;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_1 = new ::TreeNode(root2_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).val=818080740;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_1).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_right2_x=768615552;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/530. Minimum Absolute Difference in BST.cpp/inOrder(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2_DOT_right_2 = new ::TreeNode(root2_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).val=1482697523;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2_DOT_right_2).right;\nAKA_VECTOR_INIT_root_2_DOT_right.push_back(AKA_VECTOR_INIT_root_2_DOT_right_2);\n(*AKA_VECTOR_INIT_root_2).right = AKA_VECTOR_INIT_root_2_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int findPairs(vector<int>& nums, int k) {         if (k < 0) return 0;         unordered_map<int, bool> m;         unordered_set<int> s;         for (int i = 0; i < nums.size(); i++) {             if (m[nums[i] - k]) s.insert(nums[i]);             if (m[nums[i] + k]) s.insert(nums[i] + k);             m[nums[i]] = true;         }         return s.size();     }",
    "f": [],
    "path_fm": "/mnt/sdb2/LAB/test/21/532. K-diff Pairs in an Array.cpp/Solution/findPairs(vector<int>&,int)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     int findPairs(vector<int>& nums, int k) {         if (k < 0) return 0;         unordered_map<int, bool> m;         unordered_set<int> s;         for (int i = 0; i < nums.size(); i++) {             if (m[nums[i] - k]) s.insert(nums[i]);             if (m[nums[i] + k]) s.insert(nums[i] + k);             m[nums[i]] = true;         }         return s.size();     } };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_findPairs_vector_int_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_findPairs_vector_int_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/532. K-diff Pairs in an Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint k=1846383831;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1122878844;\nnums.push_back(nums_element0);\nint nums_element1=-493041445;\nnums.push_back(nums_element1);\nint nums_element2=-606183334;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findPairs_vector_int_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findPairs(nums,k);\nAKA_fCall++;AKA_mark(\"Return from: ./21/532. K-diff Pairs in an Array.cpp/Solution/findPairs(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
          "void AKA_TEST_Solution_findPairs_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_findPairs_vector_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/532. K-diff Pairs in an Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint k=-1146787065;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1092091811;\nnums.push_back(nums_element0);\nint nums_element1=-1853286727;\nnums.push_back(nums_element1);\nint nums_element2=-2104172544;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findPairs_vector_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findPairs(nums,k);\nAKA_fCall++;AKA_mark(\"Return from: ./21/532. K-diff Pairs in an Array.cpp/Solution/findPairs(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/532. K-diff Pairs in an Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint k=1846383831;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1122878844;\nnums.push_back(nums_element0);\nint nums_element1=-493041445;\nnums.push_back(nums_element1);\nint nums_element2=-606183334;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/532. K-diff Pairs in an Array.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint k=-1146787065;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1092091811;\nnums.push_back(nums_element0);\nint nums_element1=-1853286727;\nnums.push_back(nums_element1);\nint nums_element2=-2104172544;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "string complexNumberMultiply(string a, string b) {         char t[200];         int m, n, p, q;         sscanf(a.c_str(), \"%d+%di\", &m, &n);         sscanf(b.c_str(), \"%d+%di\", &p, &q);         sprintf(t, \"%d+%di\", (m*p-n*q), (n*p+m*q));         string ans = t;         return ans;     }",
    "f": [],
    "path_fm": "/mnt/sdb2/LAB/test/21/537. Complex Number Multiplication.cpp/Solution/complexNumberMultiply(string,string)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     string complexNumberMultiply(string a, string b) {         char t[200];         int m, n, p, q;         sscanf(a.c_str(), \"%d+%di\", &m, &n);         sscanf(b.c_str(), \"%d+%di\", &p, &q);         sprintf(t, \"%d+%di\", (m*p-n*q), (n*p+m*q));         string ans = t;         return ans;     } };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_complexNumberMultiply_string_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_complexNumberMultiply_string_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/537. Complex Number Multiplication.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName466200 = new char[2];akaRandomName466200[0] = 67;akaRandomName466200[1] = '\\0';string a=akaRandomName466200;\nchar* akaRandomName572277 = new char[2];akaRandomName572277[0] = 112;akaRandomName572277[1] = '\\0';string b=akaRandomName572277;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_complexNumberMultiply_string_string_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->complexNumberMultiply(a,b);\nAKA_fCall++;AKA_mark(\"Return from: ./21/537. Complex Number Multiplication.cpp/Solution/complexNumberMultiply(string,string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/537. Complex Number Multiplication.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName276643 = new char[2];akaRandomName276643[0] = 67;akaRandomName276643[1] = '\\0';string a=akaRandomName276643;\nchar* akaRandomName462944 = new char[2];akaRandomName462944[0] = 112;akaRandomName462944[1] = '\\0';string b=akaRandomName462944;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode a */\n/* NormalStringDataNode b */\n/* NormalStringDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "TreeNode* convertBST(TreeNode* root) {         dfs(root);         return root;     }",
    "f": [
      "int sum = 0;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/538. Convert BST to Greater Tree.cpp/Solution/convertBST(TreeNode*)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     TreeNode* convertBST(TreeNode* root) {         dfs(root);         return root;     } private:     int sum = 0;     void dfs(TreeNode* root) {         if (root == NULL) return;         if (root->right != NULL) dfs(root->right);         sum += root->val;         root->val = sum;         if (root->left != NULL) dfs(root->left);     } };",
    "m": [
      "void dfs(TreeNode* root) {\n        if (root == NULL) return;\n        if (root->right != NULL) dfs(root->right);\n        sum += root->val;\n        root->val = sum;\n        if (root->left != NULL) dfs(root->left);\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_convertBST_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_convertBST_TreeNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/538. Convert BST to Greater Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode sum */\n/* sum : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1037439550;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/convertBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_convertBST_TreeNodemul_random_1\");TreeNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->convertBST(root);\nAKA_fCall++;AKA_mark(\"Return from: ./21/538. Convert BST to Greater Tree.cpp/Solution/convertBST(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/538. Convert BST to Greater Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode sum */\n/* sum : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1037439550;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/convertBST(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nTreeNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* PointerStructureDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "void dfs(TreeNode* root) {         if (root == NULL) return;         if (root->right != NULL) dfs(root->right);         sum += root->val;         root->val = sum;         if (root->left != NULL) dfs(root->left);     }",
    "f": [
      "int sum = 0;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/538. Convert BST to Greater Tree.cpp/Solution/dfs(TreeNode*)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     TreeNode* convertBST(TreeNode* root) {         dfs(root);         return root;     } private:     int sum = 0;     void dfs(TreeNode* root) {         if (root == NULL) return;         if (root->right != NULL) dfs(root->right);         sum += root->val;         root->val = sum;         if (root->left != NULL) dfs(root->left);     } };",
    "m": [
      "TreeNode* convertBST(TreeNode* root) {\n        dfs(root);\n        return root;\n    }",
      "void dfs(TreeNode* root) {\n        if (root == NULL) return;\n        if (root->right != NULL) dfs(root->right);\n        sum += root->val;\n        root->val = sum;\n        if (root->left != NULL) dfs(root->left);\n    }",
      "void dfs(TreeNode* root) {\n        if (root == NULL) return;\n        if (root->right != NULL) dfs(root->right);\n        sum += root->val;\n        root->val = sum;\n        if (root->left != NULL) dfs(root->left);\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_dfs_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/538. Convert BST to Greater Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode sum */\n/* sum : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-553294802;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1637134550;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-698690194;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1580719988;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-2023653526;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-537242713;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=-1470487225;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1134124492;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=1222870550;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=-1341077044;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1999961555;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=964958060;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1157683756;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=1027244230;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_random_0\");AKA_INSTANCE___Solution->dfs(root);\nAKA_fCall++;AKA_mark(\"Return from: ./21/538. Convert BST to Greater Tree.cpp/Solution/dfs(TreeNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/538. Convert BST to Greater Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode sum */\n/* sum : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-553294802;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=1637134550;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-698690194;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=1580719988;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=-2023653526;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[0]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=-537242713;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=-1470487225;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[1]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).val=1134124492;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=1222870550;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/right/right[2]/right/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).val=-1341077044;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1999961555;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1).val=964958060;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_1_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_left0_x=-1157683756;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/538. Convert BST to Greater Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1_DOT_left_0 = new ::TreeNode(root1_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).val=1027244230;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1_DOT_left_0).right;\nAKA_VECTOR_INIT_root_1_DOT_left.push_back(AKA_VECTOR_INIT_root_1_DOT_left_0);\n(*AKA_VECTOR_INIT_root_1).left = AKA_VECTOR_INIT_root_1_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "string reverseStr(string s, int k) {         for (int i = 0; i < s.length(); i+=2*k) {             int t = min((i + k), (int)s.length());             reverse(s.begin() + i, s.begin() + t);         }         return s;     }",
    "f": [],
    "path_fm": "/mnt/sdb2/LAB/test/21/541. Reverse String II.cpp/Solution/reverseStr(string,int)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     string reverseStr(string s, int k) {         for (int i = 0; i < s.length(); i+=2*k) {             int t = min((i + k), (int)s.length());             reverse(s.begin() + i, s.begin() + t);         }         return s;     } };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_reverseStr_string_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_reverseStr_string_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/541. Reverse String II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName57670 = new char[2];akaRandomName57670[0] = -117;akaRandomName57670[1] = '\\0';string s=akaRandomName57670;\n\n\nint k=-1917244434;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode k */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_reverseStr_string_int_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->reverseStr(s,k);\nAKA_fCall++;AKA_mark(\"Return from: ./21/541. Reverse String II.cpp/Solution/reverseStr(string,int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/541. Reverse String II.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName287283 = new char[2];akaRandomName287283[0] = -117;akaRandomName287283[1] = '\\0';string s=akaRandomName287283;\n\n\nint k=-1917244434;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode k */\n/* NormalStringDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int diameterOfBinaryTree(TreeNode* root) {         dfs(root);         return ans;     }",
    "f": [
      "int ans = 0;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/543. Diameter of Binary Tree.cpp/Solution/diameterOfBinaryTree(TreeNode*)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     int diameterOfBinaryTree(TreeNode* root) {         dfs(root);         return ans;     } private:     int ans = 0;     int dfs(TreeNode* root) {         if (root == NULL) return 0;         int l = dfs(root->left), r = dfs(root->right);         ans = max(ans, l + r);         return max(l, r) + 1;     } };",
    "m": [
      "int dfs(TreeNode* root) {\n        if (root == NULL) return 0;\n        int l = dfs(root->left), r = dfs(root->right);\n        ans = max(ans, l + r);\n        return max(l, r) + 1;\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_diameterOfBinaryTree_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_diameterOfBinaryTree_TreeNodemul_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/543. Diameter of Binary Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode ans */\n/* ans : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-228861140;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/diameterOfBinaryTree(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-85826680;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/diameterOfBinaryTree(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_diameterOfBinaryTree_TreeNodemul_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->diameterOfBinaryTree(root);\nAKA_fCall++;AKA_mark(\"Return from: ./21/543. Diameter of Binary Tree.cpp/Solution/diameterOfBinaryTree(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/543. Diameter of Binary Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode ans */\n/* ans : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-228861140;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/diameterOfBinaryTree(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-85826680;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/diameterOfBinaryTree(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int dfs(TreeNode* root) {         if (root == NULL) return 0;         int l = dfs(root->left), r = dfs(root->right);         ans = max(ans, l + r);         return max(l, r) + 1;     }",
    "f": [
      "int ans = 0;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/543. Diameter of Binary Tree.cpp/Solution/dfs(TreeNode*)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     int diameterOfBinaryTree(TreeNode* root) {         dfs(root);         return ans;     } private:     int ans = 0;     int dfs(TreeNode* root) {         if (root == NULL) return 0;         int l = dfs(root->left), r = dfs(root->right);         ans = max(ans, l + r);         return max(l, r) + 1;     } };",
    "m": [
      "int diameterOfBinaryTree(TreeNode* root) {\n        dfs(root);\n        return ans;\n    }",
      "int dfs(TreeNode* root) {\n        if (root == NULL) return 0;\n        int l = dfs(root->left), r = dfs(root->right);\n        ans = max(ans, l + r);\n        return max(l, r) + 1;\n    }",
      "int dfs(TreeNode* root) {\n        if (root == NULL) return 0;\n        int l = dfs(root->left), r = dfs(root->right);\n        ans = max(ans, l + r);\n        return max(l, r) + 1;\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_dfs_TreeNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/543. Diameter of Binary Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode ans */\n/* ans : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=952889507;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1749443478;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1219188476;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1849960356;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_random_2\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->dfs(root);\nAKA_fCall++;AKA_mark(\"Return from: ./21/543. Diameter of Binary Tree.cpp/Solution/dfs(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/543. Diameter of Binary Tree.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* NormalNumberDataNode ans */\n/* ans : null value -> no code */\n\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=952889507;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=1749443478;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[0]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_0/root/left/left[1]/left/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-1219188476;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_1/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1849960356;\nAKA_mark(\"Calling: ./21/530. Minimum Absolute Difference in BST.cpp/TreeNode/TreeNode(int)|ROOT/543. Diameter of Binary Tree.cpp/dfs(TreeNode*)/root/AKA_VECTOR_INIT_root_2/root/TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int findCircleNum(vector<vector<int>>& M) {         int n = M.size(), cnt = M.size();         father.resize(n);         for (int i = 0; i < n; i++) father[i] = i;         for (int i = 0; i < n; i++) {             for (int j = i + 1; j < n; j++) {                 if (M[i][j] == 1) {                     int faA = findFather(i);                     int faB = findFather(j);                     if (faA != faB) {                         father[faA] = father[faB];                         cnt--;                     }                 }                              }         }         return cnt;     }",
    "f": [
      "vector<int> father;"
    ],
    "path_fm": "/mnt/sdb2/LAB/test/21/547. Friend Circles.cpp/Solution/findCircleNum(vector<vector<int>>&)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     int findCircleNum(vector<vector<int>>& M) {         int n = M.size(), cnt = M.size();         father.resize(n);         for (int i = 0; i < n; i++) father[i] = i;         for (int i = 0; i < n; i++) {             for (int j = i + 1; j < n; j++) {                 if (M[i][j] == 1) {                     int faA = findFather(i);                     int faB = findFather(j);                     if (faA != faB) {                         father[faA] = father[faB];                         cnt--;                     }                 }                              }         }         return cnt;     } private:     vector<int> father;     int findFather(int x) {         return x == father[x] ? x : findFather(father[x]);     } };",
    "m": [
      "int findFather(int x) {\n        return x == father[x] ? x : findFather(father[x]);\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_findCircleNum_vector_vector_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_findCircleNum_vector_vector_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/547. Friend Circles.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode father */\n\n\nvector<vector<int>> M;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode M */\nvector<int> M_element0;\nint M_element0_element0=1731248064;\nM_element0.push_back(M_element0_element0);\nM.push_back(M_element0);\nvector<int> M_element1;\nint M_element1_element0=665641539;\nM_element1.push_back(M_element1_element0);\nM.push_back(M_element1);\nvector<int> M_element2;\nint M_element2_element0=782483363;\nM_element2.push_back(M_element2_element0);\nM.push_back(M_element2);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findCircleNum_vector_vector_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findCircleNum(M);\nAKA_fCall++;AKA_mark(\"Return from: ./21/547. Friend Circles.cpp/Solution/findCircleNum(vector<vector<int>>&)\");\n\n\nvector<vector<int>> EXPECTED_M;\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/547. Friend Circles.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n/* VectorDataNode father */\n\n\nvector<vector<int>> M;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode M */\nvector<int> M_element0;\nint M_element0_element0=1731248064;\nM_element0.push_back(M_element0_element0);\nM.push_back(M_element0);\nvector<int> M_element1;\nint M_element1_element0=665641539;\nM_element1.push_back(M_element1_element0);\nM.push_back(M_element1);\nvector<int> M_element2;\nint M_element2_element0=782483363;\nM_element2.push_back(M_element2_element0);\nM.push_back(M_element2);\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "bool checkRecord(string s) {         return !regex_match(s, regex(\".*LLL.*|.*A.*A.*\"));     }",
    "f": [],
    "path_fm": "/mnt/sdb2/LAB/test/21/551. Student Attendance Record I.cpp/Solution/checkRecord(string)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     bool checkRecord(string s) {         return !regex_match(s, regex(\".*LLL.*|.*A.*A.*\"));     } };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_checkRecord_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_checkRecord_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/551. Student Attendance Record I.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName73850 = new char[2];akaRandomName73850[0] = 77;akaRandomName73850[1] = '\\0';string s=akaRandomName73850;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_checkRecord_string_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->checkRecord(s);\nAKA_fCall++;AKA_mark(\"Return from: ./21/551. Student Attendance Record I.cpp/Solution/checkRecord(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/551. Student Attendance Record I.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName215153 = new char[2];akaRandomName215153[0] = 77;akaRandomName215153[1] = '\\0';string s=akaRandomName215153;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "string optimalDivision(vector<int>& nums) {         string ans = to_string(nums[0]);         if (nums.size() == 1) return ans;         if (nums.size() == 2) return ans + \"/\" + to_string(nums[1]);         ans = ans + \"/(\" + to_string(nums[1]);         for (int i = 2; i < nums.size(); i++) {             ans = ans + \"/\" + to_string(nums[i]);         }         return ans + \")\";     }",
    "f": [],
    "path_fm": "/mnt/sdb2/LAB/test/21/553. Optimal Division.cpp/Solution/optimalDivision(vector<int>&)",
    "c": [
      ""
    ],
    "fc": "class Solution { public:     string optimalDivision(vector<int>& nums) {         string ans = to_string(nums[0]);         if (nums.size() == 1) return ans;         if (nums.size() == 2) return ans + \"/\" + to_string(nums[1]);         ans = ans + \"/(\" + to_string(nums[1]);         for (int i = 2; i < nums.size(); i++) {             ans = ans + \"/\" + to_string(nums[i]);         }         return ans + \")\";     } };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_optimalDivision_vector_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_optimalDivision_vector_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/553. Optimal Division.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1122069732;\nnums.push_back(nums_element0);\nint nums_element1=2009380471;\nnums.push_back(nums_element1);\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_optimalDivision_vector_int_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->optimalDivision(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./21/553. Optimal Division.cpp/Solution/optimalDivision(vector<int>&)\");\n\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
          "void AKA_TEST_Solution_optimalDivision_vector_int_random_4(void) {\n{\nAKA_test_case_name=\"Solution_optimalDivision_vector_int_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/553. Optimal Division.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-2022718806;\nnums.push_back(nums_element0);\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_optimalDivision_vector_int_random_4\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->optimalDivision(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./21/553. Optimal Division.cpp/Solution/optimalDivision(vector<int>&)\");\n\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n",
          "void AKA_TEST_Solution_optimalDivision_vector_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_optimalDivision_vector_int_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/553. Optimal Division.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=297001184;\nnums.push_back(nums_element0);\nint nums_element1=-1397229535;\nnums.push_back(nums_element1);\nint nums_element2=-123335365;\nnums.push_back(nums_element2);\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_optimalDivision_vector_int_random_1\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->optimalDivision(nums);\nAKA_fCall++;AKA_mark(\"Return from: ./21/553. Optimal Division.cpp/Solution/optimalDivision(vector<int>&)\");\n\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/553. Optimal Division.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1122069732;\nnums.push_back(nums_element0);\nint nums_element1=2009380471;\nnums.push_back(nums_element1);\n/* NormalStringDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/553. Optimal Division.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-2022718806;\nnums.push_back(nums_element0);\n/* NormalStringDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: /Solution()|ROOT/553. Optimal Division.cpp/GLOBAL/AKA_INSTANCE___Solution/AKA_INSTANCE___Solution/Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=297001184;\nnums.push_back(nums_element0);\nint nums_element1=-1397229535;\nnums.push_back(nums_element1);\nint nums_element2=-123335365;\nnums.push_back(nums_element2);\n/* NormalStringDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  }
]
[
  {
    "fm": "bool searchTrie(TrieNode* cur, int i, string word) {\r         if (i == word.length())\r             return cur->isWord;\r         \r         if (word[i] != '.') {\r \t\t\t// normal letter\r             if (!cur->children.count(word[i]))\r                 return false;\r \r             return searchTrie(cur->children[word[i]], i + 1, word);   \r         }\r         \r \t\t// '.' encountered. Perform DFS in all children branches\r         for (auto it : cur->children) {\r             if (searchTrie(it.second, i + 1, word))\r                 return true;               \r         }\r         \r         return false;\r     }",
    "f": [
      "TrieNode *root;"
    ],
    "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\Ayushd70_LeetCodeSolutions\\CPP\\com-5\\DesignAddandSearchWordsDataStructure.cpp\\WordDictionary\\searchTrie(TrieNode*,int,string)",
    "c": [
      "WordDictionary() {\r\n        root = new TrieNode();\r\n    }"
    ],
    "fc": "class WordDictionary {\r     TrieNode *root;\r     \r     void addWordToTrie(string word) {\r         auto cur = root;\r         \r         for (auto ch : word) {\r             if (!cur->children.count(ch))\r                 cur->children[ch] = new TrieNode();\r             \r             cur = cur->children[ch];\r         }\r         \r         cur->isWord = true;\r     }\r     \r     bool searchTrie(TrieNode* cur, int i, string word) {\r         if (i == word.length())\r             return cur->isWord;\r         \r         if (word[i] != '.') {\r \t\t\t// normal letter\r             if (!cur->children.count(word[i]))\r                 return false;\r \r             return searchTrie(cur->children[word[i]], i + 1, word);   \r         }\r         \r \t\t// '.' encountered. Perform DFS in all children branches\r         for (auto it : cur->children) {\r             if (searchTrie(it.second, i + 1, word))\r                 return true;               \r         }\r         \r         return false;\r     }\r     \r public:\r     /** Initialize your data structure here. */\r     WordDictionary() {\r         root = new TrieNode();\r     }\r     \r     /** Adds a word into the data structure. */\r     void addWord(string word) {\r         addWordToTrie(word);\r     }\r     \r     /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r     bool search(string word) {\r         return searchTrie(root, 0, word);\r     }\r };",
    "m": [
      "bool searchTrie(TrieNode* cur, int i, string word) {\r\n        if (i == word.length())\r\n            return cur->isWord;\r\n        \r\n        if (word[i] != '.') {\r\n\t\t\t// normal letter\r\n            if (!cur->children.count(word[i]))\r\n                return false;\r\n\r\n            return searchTrie(cur->children[word[i]], i + 1, word);   \r\n        }\r\n        \r\n\t\t// '.' encountered. Perform DFS in all children branches\r\n        for (auto it : cur->children) {\r\n            if (searchTrie(it.second, i + 1, word))\r\n                return true;               \r\n        }\r\n        \r\n        return false;\r\n    }",
      "bool searchTrie(TrieNode* cur, int i, string word) {\r\n        if (i == word.length())\r\n            return cur->isWord;\r\n        \r\n        if (word[i] != '.') {\r\n\t\t\t// normal letter\r\n            if (!cur->children.count(word[i]))\r\n                return false;\r\n\r\n            return searchTrie(cur->children[word[i]], i + 1, word);   \r\n        }\r\n        \r\n\t\t// '.' encountered. Perform DFS in all children branches\r\n        for (auto it : cur->children) {\r\n            if (searchTrie(it.second, i + 1, word))\r\n                return true;               \r\n        }\r\n        \r\n        return false;\r\n    }",
      "bool search(string word) {\r\n        return searchTrie(root, 0, word);\r\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_WordDictionary_searchTrie_TrieNodemul_int_string_random_1(void) {\n{\nAKA_test_case_name=\"WordDictionary_searchTrie_TrieNodemul_int_string_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nstd::vector<TrieNode*> AKA_VECTOR_INIT_cur;\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_0).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_0);\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_1\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_1 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_1).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_1);\n\nTrieNode* cur = AKA_VECTOR_INIT_cur[0];\n\n\nint i=-2075832320;\nchar* akaRandomName460400 = new char[2];akaRandomName460400[0] = 118;akaRandomName460400[1] = '\\0';string word=akaRandomName460400;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode cur */\n/* NormalNumberDataNode i */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test WordDictionary_searchTrie_TrieNodemul_int_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___WordDictionary->searchTrie(cur,i,word);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\searchTrie(TrieNode*,int,string)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName315880 = new char[2];akaRandomName315880[0] = 14;akaRandomName315880[1] = '\\0';string word=akaRandomName315880;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName175601 = new char[2];akaRandomName175601[0] = 14;akaRandomName175601[1] = '\\0';string word=akaRandomName175601;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nstd::vector<TrieNode*> AKA_VECTOR_INIT_cur;\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_0).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_0);\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_1\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_1 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_1).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_1);\n\nTrieNode* cur = AKA_VECTOR_INIT_cur[0];\n\n\nint i=-2075832320;\nchar* akaRandomName284431 = new char[2];akaRandomName284431[0] = 118;akaRandomName284431[1] = '\\0';string word=akaRandomName284431;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode cur */\n/* NormalNumberDataNode i */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName238248 = new char[2];akaRandomName238248[0] = 14;akaRandomName238248[1] = '\\0';string word=akaRandomName238248;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "void addWord(string word) {\r         addWordToTrie(word);\r     }",
    "f": [
      "TrieNode *root;"
    ],
    "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\Ayushd70_LeetCodeSolutions\\CPP\\com-5\\DesignAddandSearchWordsDataStructure.cpp\\WordDictionary\\addWord(string)",
    "c": [
      "WordDictionary() {\r\n        root = new TrieNode();\r\n    }"
    ],
    "fc": "class WordDictionary {\r     TrieNode *root;\r     \r     void addWordToTrie(string word) {\r         auto cur = root;\r         \r         for (auto ch : word) {\r             if (!cur->children.count(ch))\r                 cur->children[ch] = new TrieNode();\r             \r             cur = cur->children[ch];\r         }\r         \r         cur->isWord = true;\r     }\r     \r     bool searchTrie(TrieNode* cur, int i, string word) {\r         if (i == word.length())\r             return cur->isWord;\r         \r         if (word[i] != '.') {\r \t\t\t// normal letter\r             if (!cur->children.count(word[i]))\r                 return false;\r \r             return searchTrie(cur->children[word[i]], i + 1, word);   \r         }\r         \r \t\t// '.' encountered. Perform DFS in all children branches\r         for (auto it : cur->children) {\r             if (searchTrie(it.second, i + 1, word))\r                 return true;               \r         }\r         \r         return false;\r     }\r     \r public:\r     /** Initialize your data structure here. */\r     WordDictionary() {\r         root = new TrieNode();\r     }\r     \r     /** Adds a word into the data structure. */\r     void addWord(string word) {\r         addWordToTrie(word);\r     }\r     \r     /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r     bool search(string word) {\r         return searchTrie(root, 0, word);\r     }\r };",
    "m": [
      "void addWordToTrie(string word) {\r\n        auto cur = root;\r\n        \r\n        for (auto ch : word) {\r\n            if (!cur->children.count(ch))\r\n                cur->children[ch] = new TrieNode();\r\n            \r\n            cur = cur->children[ch];\r\n        }\r\n        \r\n        cur->isWord = true;\r\n    }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_WordDictionary_addWord_string_random_4(void) {\n{\nAKA_test_case_name=\"WordDictionary_addWord_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName334595 = new char[2];akaRandomName334595[0] = 14;akaRandomName334595[1] = '\\0';string word=akaRandomName334595;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test WordDictionary_addWord_string_random_4\");AKA_INSTANCE___WordDictionary->addWord(word);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\addWord(string)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName315880 = new char[2];akaRandomName315880[0] = 14;akaRandomName315880[1] = '\\0';string word=akaRandomName315880;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName175601 = new char[2];akaRandomName175601[0] = 14;akaRandomName175601[1] = '\\0';string word=akaRandomName175601;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nstd::vector<TrieNode*> AKA_VECTOR_INIT_cur;\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_0).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_0);\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_1\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_1 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_1).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_1);\n\nTrieNode* cur = AKA_VECTOR_INIT_cur[0];\n\n\nint i=-2075832320;\nchar* akaRandomName284431 = new char[2];akaRandomName284431[0] = 118;akaRandomName284431[1] = '\\0';string word=akaRandomName284431;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode cur */\n/* NormalNumberDataNode i */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName238248 = new char[2];akaRandomName238248[0] = 14;akaRandomName238248[1] = '\\0';string word=akaRandomName238248;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int divide(int dividend, int divisor) {\r         int res=dividend/divisor;\r         return res;\r         \r     }",
    "f": [],
    "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\Ayushd70_LeetCodeSolutions\\CPP\\com-5\\Divide_Two_Integers.cpp\\Solution\\divide(int,int)",
    "c": [
      ""
    ],
    "fc": "class Solution {\r public:\r     int divide(int dividend, int divisor) {\r         int res=dividend/divisor;\r         return res;\r         \r     }\r };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_divide_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_divide_int_int_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_divide_int_int_random_3\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->divide(dividend,divisor);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-5\\\\Divide_Two_Integers.cpp\\\\Solution\\\\divide(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName315880 = new char[2];akaRandomName315880[0] = 14;akaRandomName315880[1] = '\\0';string word=akaRandomName315880;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName175601 = new char[2];akaRandomName175601[0] = 14;akaRandomName175601[1] = '\\0';string word=akaRandomName175601;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nstd::vector<TrieNode*> AKA_VECTOR_INIT_cur;\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_0).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_0);\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_1\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_1 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_1).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_1);\n\nTrieNode* cur = AKA_VECTOR_INIT_cur[0];\n\n\nint i=-2075832320;\nchar* akaRandomName284431 = new char[2];akaRandomName284431[0] = 118;akaRandomName284431[1] = '\\0';string word=akaRandomName284431;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode cur */\n/* NormalNumberDataNode i */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName238248 = new char[2];akaRandomName238248[0] = 14;akaRandomName238248[1] = '\\0';string word=akaRandomName238248;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int trailingZeroes(int n) {      \r         int i=0;\r         while(n>0)\r         {\r             i += n/5;\r             n /=5;\r         }\r         return i;\r     }",
    "f": [],
    "path_fm": "D:\\Lab\\test-cpp\\leetcode\\prj-data\\Ayushd70_LeetCodeSolutions\\CPP\\com-5\\Factorial Trailing Zeroes.cpp\\Solution\\trailingZeroes(int)",
    "c": [
      ""
    ],
    "fc": "class Solution {\r public:\r     int trailingZeroes(int n) {      \r         int i=0;\r         while(n>0)\r         {\r             i += n/5;\r             n /=5;\r         }\r         return i;\r     }\r };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_trailingZeroes_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_trailingZeroes_int_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_trailingZeroes_int_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->trailingZeroes(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\com-5\\\\Factorial Trailing Zeroes.cpp\\\\Solution\\\\trailingZeroes(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName315880 = new char[2];akaRandomName315880[0] = 14;akaRandomName315880[1] = '\\0';string word=akaRandomName315880;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName175601 = new char[2];akaRandomName175601[0] = 14;akaRandomName175601[1] = '\\0';string word=akaRandomName175601;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nstd::vector<TrieNode*> AKA_VECTOR_INIT_cur;\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_0\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_0 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_0).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_0);\n\n\n/* SubClassDataNode cur */\n/* ConstructorDataNode TrieNode() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\TrieNode\\\\TrieNode()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\searchTrie(TrieNode*,int,string)\\\\cur\\\\AKA_VECTOR_INIT_cur_1\\\\cur\\\\TrieNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_cur_1 = new ::TrieNode();\n/* NormalNumberDataNode isWord */\n(*AKA_VECTOR_INIT_cur_1).isWord=true;\n/* UnorderedMapDataNode children */\n\nAKA_VECTOR_INIT_cur.push_back(AKA_VECTOR_INIT_cur_1);\n\nTrieNode* cur = AKA_VECTOR_INIT_cur[0];\n\n\nint i=-2075832320;\nchar* akaRandomName284431 = new char[2];akaRandomName284431[0] = 118;akaRandomName284431[1] = '\\0';string word=akaRandomName284431;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode cur */\n/* NormalNumberDataNode i */\n/* NormalStringDataNode word */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___WordDictionary */\n/* ConstructorDataNode WordDictionary() */\nAKA_mark(\"Calling: .\\\\com-5\\\\DesignAddandSearchWordsDataStructure.cpp\\\\WordDictionary\\\\WordDictionary()|ROOT\\\\DesignAddandSearchWordsDataStructure.cpp\\\\GLOBAL\\\\AKA_INSTANCE___WordDictionary\\\\AKA_INSTANCE___WordDictionary\\\\WordDictionary()\");AKA_fCall++;AKA_INSTANCE___WordDictionary = new ::WordDictionary();\n/* PointerStructureDataNode root */\nAKA_INSTANCE___WordDictionary->root;\n\n\nchar* akaRandomName238248 = new char[2];akaRandomName238248[0] = 14;akaRandomName238248[1] = '\\0';string word=akaRandomName238248;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode word */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Divide_Two_Integers.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint dividend=1986829165;\n\n\nint divisor=-1568956129;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode dividend */\n/* NormalNumberDataNode divisor */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\Factorial Trailing Zeroes.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\n\nint n=5;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  }
]
[
  {
    "fm": "vector<int> getRow(int rowIndex) {\r     vector<int> row(rowIndex + 1, 1);\r \r     for (int i = 2; i <= rowIndex; i ++)\r     {\r       for (int j = i - 1; j >= 1; j --)\r       {\r \trow[j] = row[j] + row[j - 1];\r       }\r     }\r     return row;\r   }",
    "f": [],
    "path_fm": "D:\\py\\test\\folder_17\\solution119.cpp\\Solution\\getRow(int)",
    "c": [],
    "fc": "class Solution {\r public:\r   vector<int> getRow(int rowIndex) {\r     vector<int> row(rowIndex + 1, 1);\r \r     for (int i = 2; i <= rowIndex; i ++)\r     {\r       for (int j = i - 1; j >= 1; j --)\r       {\r \trow[j] = row[j] + row[j - 1];\r       }\r     }\r     return row;\r   }\r };",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_getRow_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_getRow_int_random_1\";\n\n// set up\n;\n\n\n\nint rowIndex=5;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode rowIndex */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_getRow_int_random_1\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->getRow(rowIndex);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_17\\\\solution119.cpp\\\\Solution\\\\getRow(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\n\nint rowIndex=5;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode rowIndex */\n/* VectorDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "bool isPalindrome(string s) {\r     if (s.size() == 0)\r     {\r       return true;\r     }\r \r     int i = 0, j = s.size() - 1;\r     while (i <= j)\r     {\r       if (!isLetterOrDigit(s[i]))\r       {\r \ti ++;\r       }\r       else if (!isLetterOrDigit(s[j]))\r       {\r \tj --;\r       }\r       else\r       {\r \tif (tolower(s[i]) != tolower(s[j]))\r         {\r \t  return false;\r         }\r       \r         i ++;\r         j --;\r       }\r     }\r     return true;\r   }",
    "f": [],
    "path_fm": "D:\\py\\test\\folder_17\\solution125.cpp\\Solution\\isPalindrome(string)",
    "c": [],
    "fc": "class Solution {\r public:\r   bool isPalindrome(string s) {\r     if (s.size() == 0)\r     {\r       return true;\r     }\r \r     int i = 0, j = s.size() - 1;\r     while (i <= j)\r     {\r       if (!isLetterOrDigit(s[i]))\r       {\r \ti ++;\r       }\r       else if (!isLetterOrDigit(s[j]))\r       {\r \tj --;\r       }\r       else\r       {\r \tif (tolower(s[i]) != tolower(s[j]))\r         {\r \t  return false;\r         }\r       \r         i ++;\r         j --;\r       }\r     }\r     return true;\r   }\r   bool isLetterOrDigit(char ch)\r   {\r     if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))\r     {\r       return true;\r     }\r     return false;\r   }\r };",
    "m": [
      "bool isLetterOrDigit(char ch)\r\n  {\r\n    if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))\r\n    {\r\n      return true;\r\n    }\r\n    return false;\r\n  }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_isPalindrome_string_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isPalindrome_string_random_1\";\n\n// set up\n;\n\nchar* akaRandomName408728 = new char[2];akaRandomName408728[0] = 67;akaRandomName408728[1] = '\\0';string s=akaRandomName408728;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isPalindrome_string_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_17\\\\solution125.cpp\\\\Solution\\\\isPalindrome(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\nchar* akaRandomName200095 = new char[2];akaRandomName200095[0] = 67;akaRandomName200095[1] = '\\0';string s=akaRandomName200095;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "bool isLetterOrDigit(char ch)\r   {\r     if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))\r     {\r       return true;\r     }\r     return false;\r   }",
    "f": [],
    "path_fm": "D:\\py\\test\\folder_17\\solution125.cpp\\Solution\\isLetterOrDigit(char)",
    "c": [],
    "fc": "class Solution {\r public:\r   bool isPalindrome(string s) {\r     if (s.size() == 0)\r     {\r       return true;\r     }\r \r     int i = 0, j = s.size() - 1;\r     while (i <= j)\r     {\r       if (!isLetterOrDigit(s[i]))\r       {\r \ti ++;\r       }\r       else if (!isLetterOrDigit(s[j]))\r       {\r \tj --;\r       }\r       else\r       {\r \tif (tolower(s[i]) != tolower(s[j]))\r         {\r \t  return false;\r         }\r       \r         i ++;\r         j --;\r       }\r     }\r     return true;\r   }\r   bool isLetterOrDigit(char ch)\r   {\r     if ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))\r     {\r       return true;\r     }\r     return false;\r   }\r };",
    "m": [
      "bool isPalindrome(string s) {\r\n    if (s.size() == 0)\r\n    {\r\n      return true;\r\n    }\r\n\r\n    int i = 0, j = s.size() - 1;\r\n    while (i <= j)\r\n    {\r\n      if (!isLetterOrDigit(s[i]))\r\n      {\r\n\ti ++;\r\n      }\r\n      else if (!isLetterOrDigit(s[j]))\r\n      {\r\n\tj --;\r\n      }\r\n      else\r\n      {\r\n\tif (tolower(s[i]) != tolower(s[j]))\r\n        {\r\n\t  return false;\r\n        }\r\n      \r\n        i ++;\r\n        j --;\r\n      }\r\n    }\r\n    return true;\r\n  }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_Solution_isLetterOrDigit_char_random_5(void) {\n{\nAKA_test_case_name=\"Solution_isLetterOrDigit_char_random_5\";\n\n// set up\n;\n\n\nchar ch=-24;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isLetterOrDigit_char_random_5\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isLetterOrDigit(ch);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_17\\\\solution125.cpp\\\\Solution\\\\isLetterOrDigit(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
          "void AKA_TEST_Solution_isLetterOrDigit_char_random_8(void) {\n{\nAKA_test_case_name=\"Solution_isLetterOrDigit_char_random_8\";\n\n// set up\n;\n\n\nchar ch=-58;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isLetterOrDigit_char_random_8\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isLetterOrDigit(ch);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_17\\\\solution125.cpp\\\\Solution\\\\isLetterOrDigit(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
          "void AKA_TEST_Solution_isLetterOrDigit_char_random_7(void) {\n{\nAKA_test_case_name=\"Solution_isLetterOrDigit_char_random_7\";\n\n// set up\n;\n\n\nchar ch=18;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isLetterOrDigit_char_random_7\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isLetterOrDigit(ch);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_17\\\\solution125.cpp\\\\Solution\\\\isLetterOrDigit(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
          "void AKA_TEST_Solution_isLetterOrDigit_char_random_6(void) {\n{\nAKA_test_case_name=\"Solution_isLetterOrDigit_char_random_6\";\n\n// set up\n;\n\n\nchar ch=-96;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isLetterOrDigit_char_random_6\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isLetterOrDigit(ch);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_17\\\\solution125.cpp\\\\Solution\\\\isLetterOrDigit(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [
          "\n\nchar ch=-24;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\nchar ch=-58;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\nchar ch=18;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n",
          "\n\nchar ch=-96;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode ch */\n/* NormalNumberDataNode RETURN */\n\n"
        ],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int sumNumbers(TreeNode* root) {\r     vector<int> nums;\r     int ret = 0;\r \r     if (root == NULL)\r     {\r       return ret;\r     }\r     dfs(root, nums, 0);\r     for (auto i : nums)\r     {\r       ret += i;\r     }\r     return ret;\r   }",
    "f": [],
    "path_fm": "D:\\py\\test\\folder_17\\solution129.cpp\\Solution\\sumNumbers(TreeNode*)",
    "c": [],
    "fc": "class Solution {\r public:\r   int sumNumbers(TreeNode* root) {\r     vector<int> nums;\r     int ret = 0;\r \r     if (root == NULL)\r     {\r       return ret;\r     }\r     dfs(root, nums, 0);\r     for (auto i : nums)\r     {\r       ret += i;\r     }\r     return ret;\r   }\r   void dfs(TreeNode *root, vector<int> &nums, int num)\r   {\r     num = num * 10 + root -> val;\r     if (root -> left != NULL)\r     {\r       dfs(root -> left, nums, num);\r     }\r     if (root -> right != NULL)\r     {\r       dfs(root -> right, nums, num);\r     }\r     if (root -> left == NULL && root -> right == NULL)\r     {\r       nums.push_back(num);\r     }\r   }\r };",
    "m": [
      "void dfs(TreeNode *root, vector<int> &nums, int num)\r\n  {\r\n    num = num * 10 + root -> val;\r\n    if (root -> left != NULL)\r\n    {\r\n      dfs(root -> left, nums, num);\r\n    }\r\n    if (root -> right != NULL)\r\n    {\r\n      dfs(root -> right, nums, num);\r\n    }\r\n    if (root -> left == NULL && root -> right == NULL)\r\n    {\r\n      nums.push_back(num);\r\n    }\r\n  }"
    ],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  }
]
[
  {
    "fm": "int check_vowel(char a) {\r \tif ( a >= 'A' && a <= 'Z' )\r \t\ta = a + 'a' - 'A';\r \r \tif ( a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u')\r \t\treturn 1;\r \r \treturn 0;\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\check_vowel(char)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_check_vowel_char_random_1(void) {\n{\nAKA_test_case_name=\"check_vowel_char_random_1\";\n\n// set up\n;\n\n\nchar a=69;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_vowel_char_random_1\");int AKA_ACTUAL_OUTPUT=check_vowel(a);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_vowel(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n",
          "void AKA_TEST_check_vowel_char_random_1(void) {\n{\nAKA_test_case_name=\"check_vowel_char_random_1\";\n\n// set up\n;\n\n\nchar a=69;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode a */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_vowel_char_random_1\");int AKA_ACTUAL_OUTPUT=check_vowel(a);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_vowel(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int compare_string(char *first, char *second) {\r \twhile(*first==*second) {\r \t\tif ( *first == '\\0' || *second == '\\0' )\r \t\t\tbreak;\r \r \t\tfirst++;\r \t\tsecond++;\r \t}\r \tif( *first == '\\0' && *second == '\\0' )\r \t\treturn 0;\r \telse\r \t\treturn -1;\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\compare_string(char*,char*)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_compare_string_charmul_charmul_random_2(void) {\n{\nAKA_test_case_name=\"compare_string_charmul_charmul_random_2\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_first[2];\n\nchar AKA_ARRAY_INIT_first_0=37;\nAKA_ARRAY_INIT_first[0] = AKA_ARRAY_INIT_first_0;\n\nchar AKA_ARRAY_INIT_first_1=73;\nAKA_ARRAY_INIT_first[1] = AKA_ARRAY_INIT_first_1;\n\nchar* first = AKA_ARRAY_INIT_first;\nchar AKA_ARRAY_INIT_second[2];\n\nchar AKA_ARRAY_INIT_second_0=-92;\nAKA_ARRAY_INIT_second[0] = AKA_ARRAY_INIT_second_0;\n\nchar AKA_ARRAY_INIT_second_1=-12;\nAKA_ARRAY_INIT_second[1] = AKA_ARRAY_INIT_second_1;\n\nchar* second = AKA_ARRAY_INIT_second;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode first */\n/* PointerCharacterDataNode second */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test compare_string_charmul_charmul_random_2\");int AKA_ACTUAL_OUTPUT=compare_string(first,second);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\compare_string(char*,char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int check_subsequence (char a[], char b[]) {\r \tint c, d;\r \r \tc = 0;\r \td = 0;\r \r \twhile (a[c] != '\\0') {\r \t\twhile ((a[c] != b[d]) && b[d] != '\\0') {\r \t\t\td++;\r \t\t}\r \t\tif (b[d] == '\\0')\r \t\t\tbreak;\r \t\td++;\r \t\tc++;\r \t}\r \tif (a[c] == '\\0')\r \t\treturn 1;\r \telse\r \t\treturn 0;\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\check_subsequence(char[],char[])",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_check_subsequence_char_char_random_2(void) {\n{\nAKA_test_case_name=\"check_subsequence_char_char_random_2\";\n\n// set up\n;\n\nchar a[1];\n\nchar b[1];\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionCharacterDataNode a */\n/* NormalCharacterDataNode a[0] */\na[0]=-42;\n/* NormalCharacterDataNode a[1] */\na[1]=97;\n/* OneDimensionCharacterDataNode b */\n/* NormalCharacterDataNode b[0] */\nb[0]=-4;\n/* NormalCharacterDataNode b[1] */\nb[1]=68;\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_subsequence_char_char_random_2\");int AKA_ACTUAL_OUTPUT=check_subsequence(a,b);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_subsequence(char[],char[])\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int check_anagram(char a[], char b[]) {\r \tint first[26], second[26], c = 0;\r \tfirst[20] = 0;\r \tsecond[26]=0;\r \twhile (a[c] != '\\0') {\r \t\tfirst[a[c]-'a']++;\r \t\tc++;\r \t}\r \r \tc = 0;\r \r \twhile (b[c] != '\\0') {\r \t\tsecond[b[c]-'a']++;\r \t\tc++;\r \t}\r \r \tfor (c = 0; c < 26; c++) {\r \t\tif (first[c] != second[c])\r \t\t\treturn 0;\r \t}\r \r \treturn 1;\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\check_anagram(char[],char[])",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_check_anagram_char_char_random_4(void) {\n{\nAKA_test_case_name=\"check_anagram_char_char_random_4\";\n\n// set up\n;\n\nchar a[1];\n\nchar b[1];\n\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionCharacterDataNode a */\n/* NormalCharacterDataNode a[0] */\na[0]=89;\n/* NormalCharacterDataNode a[1] */\na[1]=-87;\n/* OneDimensionCharacterDataNode b */\n/* NormalCharacterDataNode b[0] */\nb[0]=-45;\n/* NormalCharacterDataNode b[1] */\nb[1]=-104;\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test check_anagram_char_char_random_4\");int AKA_ACTUAL_OUTPUT=check_anagram(a,b);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\check_anagram(char[],char[])\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "void find_frequency(char s[], int count[]) {\r \tint c = 0;\r \r \twhile (s[c] != '\\0') {\r \t\tif (s[c] >= 'a' && s[c] <= 'z' )\r \t\t\tcount[s[c]-'a']++;\r \t\tc++;\r \t}\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\find_frequency(char[],int[])",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_find_frequency_char_int_random_4(void) {\n{\nAKA_test_case_name=\"find_frequency_char_int_random_4\";\n\n// set up\n;\n\nchar s[1];\n\nint count[3];;\n\n/* RootDataNode STATIC */\n/* OneDimensionCharacterDataNode s */\n/* NormalCharacterDataNode s[0] */\ns[0]=29;\n/* NormalCharacterDataNode s[1] */\ns[1]=65;\n/* OneDimensionNumberDataNode count */\n/* NormalNumberDataNode count[0] */\ncount[0]=533692624;\n/* NormalNumberDataNode count[1] */\ncount[1]=-1611906770;\n/* NormalNumberDataNode count[2] */\ncount[2]=-261894345;\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test find_frequency_char_int_random_4\");find_frequency(s,count);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\find_frequency(char[],int[])\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int frequencyDigits(int n, int d)\r {   \r     // Counter variable to store\r     // the frequency\r     int c = 0;\r      \r     // iterate till number reduces to zero\r     while (n > 0) {\r          \r         // check for equality\r         if (n % 10 == d)\r             c++;\r         // reduce the number\r         n = n / 10;\r     }\r      \r     return c;\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\frequencyDigits(int,int)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_frequencyDigits_int_int_random_3(void) {\n{\nAKA_test_case_name=\"frequencyDigits_int_int_random_3\";\n\n// set up\n;\n\n\n\nint n=3;\n\n\nint d=-670329480;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode d */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test frequencyDigits_int_int_random_3\");int AKA_ACTUAL_OUTPUT=frequencyDigits(n,d);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\frequencyDigits(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int largestNum(int a, int b)\r {\r     return a * (bool)(a / b) + b * (bool)(b / a);\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\largestNum(int,int)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_largestNum_int_int_random_1(void) {\n{\nAKA_test_case_name=\"largestNum_int_int_random_1\";\n\n// set up\n;\n\n\n\nint a=-328338691;\n\n\nint b=801358640;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode a */\n/* NormalNumberDataNode b */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test largestNum_int_int_random_1\");int AKA_ACTUAL_OUTPUT=largestNum(a,b);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\largestNum(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int lds(int arr[], int n)\r {\r     int lds[n];\r     int i, j, max = 0;\r  \r     // Initialize LDS with 1 for all index\r     // The minimum LDS starting with any\r     // element is always 1\r     for (i = 0; i < n; i++)\r         lds[i] = 1;\r  \r     // Compute LDS from every index\r     // in bottom up manner\r     for (i = 1; i < n; i++)\r         for (j = 0; j < i; j++)\r             if (arr[i] < arr[j] && lds[i] < lds[j] + 1)\r                 lds[i] = lds[j] + 1;\r  \r     // Select the maximum \r     // of all the LDS values\r     for (i = 0; i < n; i++)\r         if (max < lds[i])\r             max = lds[i];\r  \r     // returns the length of the LDS\r     return max;\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\lds(int[],int)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_lds_int_int_random_4(void) {\n{\nAKA_test_case_name=\"lds_int_int_random_4\";\n\n// set up\n;\n\nint arr[1];;\n\n\nint n=10;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* OneDimensionNumberDataNode arr */\n/* NormalNumberDataNode arr[0] */\narr[0]=1112604843;\n/* NormalNumberDataNode n */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test lds_int_int_random_4\");int AKA_ACTUAL_OUTPUT=lds(arr,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\lds(int[],int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int getPriority(char C)\r {\r     if (C == '-' || C == '+')\r         return 1;\r     else if (C == '*' || C == '/')\r         return 2;\r     else if (C == '^')\r         return 3;\r     return 0;\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\getPriority(char)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_getPriority_char_random_0(void) {\n{\nAKA_test_case_name=\"getPriority_char_random_0\";\n\n// set up\n;\n\n\nchar C=-83;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalCharacterDataNode C */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test getPriority_char_random_0\");int AKA_ACTUAL_OUTPUT=getPriority(C);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\getPriority(char)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "void printDistinctPFs(int n)\r {\r    // array to store the number of distinct primes\r     long long factorCount[n + 1];\r  \r     // true if index 'i' is a prime\r     bool prime[n + 1];\r  \r     // initializing the number of factors to 0 and\r     for (int i = 0; i <= n; i++) {\r         factorCount[i] = 0;\r         prime[i] = true;  // Used in Sieve\r     }\r  \r     for (int i = 2; i <= n; i++) {\r   \r         // condition works only when 'i' is prime, \r         // hence for factors of all prime number, \r         // the prime status is changed to false\r         if (prime[i] == true) { \r              \r             // Number is prime\r             factorCount[i] = 1; \r              \r             // number of factor of a prime number is 1\r             for (int j = i * 2; j <= n; j += i) {\r  \r                 // incrementing factorCount all \r                 // the factors of i\r                 factorCount[j]++; \r  \r                 // and changing prime status to false\r                 prime[j] = false; \r             }\r         }\r     }\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\printDistinctPFs(int)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_printDistinctPFs_int_random_1(void) {\n{\nAKA_test_case_name=\"printDistinctPFs_int_random_1\";\n\n// set up\n;\n\n\n\nint n=9;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode n */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test printDistinctPFs_int_random_1\");printDistinctPFs(n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\printDistinctPFs(int)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  },
  {
    "fm": "int steps(int N, int M)\r {\r     // Corner Case 1: When N = 1\r     if (N == 1)\r         return 0;\r  \r     // Corner Case 2: When N = 2\r     else if (N == 2) // corner case 2\r         return M;\r  \r     return 2 * M + (N - 3);\r }",
    "f": [],
    "path_fm": "C:\\Users\\admin\\akautauto\\datatest\\duc-anh\\Algorithm\\Utils.cpp\\steps(int,int)",
    "c": [],
    "fc": "",
    "m": [],
    "datatest": [
      {
        "id": 0,
        "dt": {},
        "td": [
          "void AKA_TEST_steps_int_int_random_3(void) {\n{\nAKA_test_case_name=\"steps_int_int_random_3\";\n\n// set up\n;\n\n\n\nint N=750372595;\n\n\nint M=1470340448;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode N */\n/* NormalNumberDataNode M */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test steps_int_int_random_3\");int AKA_ACTUAL_OUTPUT=steps(N,M);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Algorithm\\\\Utils.cpp\\\\steps(int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n"
        ],
        "simplified_t": [],
        "isAutomated": true
      }
    ]
  }
]
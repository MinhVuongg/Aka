[
  {
    "fc": "class Solution {\r public:\r   bool isBalanced(TreeNode* root) {\r     if (root == NULL)\r     {\r       return true;\r     }\r     int leftDepth = depth(root -> left);\r     int rightDepth = depth(root -> right);\r \r     return abs(leftDepth - rightDepth) <= 1 && isBalanced(root -> left) && isBalanced(root -> right);\r   }\r \r   int depth(TreeNode *root)\r   {\r     if (root == NULL)\r     {\r       return 0;\r     }\r     return max(depth(root -> left), depth(root -> right)) + 1;\r   }\r };",
    "m": [ "int depth(TreeNode *root)\r\n  {\r\n    if (root == NULL)\r\n    {\r\n      return 0;\r\n    }\r\n    return max(depth(root -> left), depth(root -> right)) + 1;\r\n  }", "bool isBalanced(TreeNode* root) {\r\n    if (root == NULL)\r\n    {\r\n      return true;\r\n    }\r\n    int leftDepth = depth(root -> left);\r\n    int rightDepth = depth(root -> right);\r\n\r\n    return abs(leftDepth - rightDepth) <= 1 && isBalanced(root -> left) && isBalanced(root -> right);\r\n  }", "bool isBalanced(TreeNode* root) {\r\n    if (root == NULL)\r\n    {\r\n      return true;\r\n    }\r\n    int leftDepth = depth(root -> left);\r\n    int rightDepth = depth(root -> right);\r\n\r\n    return abs(leftDepth - rightDepth) <= 1 && isBalanced(root -> left) && isBalanced(root -> right);\r\n  }" ],
    "simplified_t": [ "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-620372789;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1123526025;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n", "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1886221030;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-429003658;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=739214870;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_16\\solution110.cpp\\Solution\\isBalanced(TreeNode*)",
    "c": [ ],
    "t": [ "void AKA_TEST_Solution_isBalanced_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_random_1\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-620372789;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=1123526025;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right1_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[1]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_1 = new ::TreeNode(root0_right1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_1).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_1);\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right2_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[2]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_2 = new ::TreeNode(root0_right2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_2).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_2);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution110.cpp\\\\Solution\\\\isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_isBalanced_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_isBalanced_TreeNodemul_random_0\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1886221030;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-429003658;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=739214870;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\isBalanced(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isBalanced_TreeNodemul_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isBalanced(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution110.cpp\\\\Solution\\\\isBalanced(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "bool isBalanced(TreeNode* root) {\r     if (root == NULL)\r     {\r       return true;\r     }\r     int leftDepth = depth(root -> left);\r     int rightDepth = depth(root -> right);\r \r     return abs(leftDepth - rightDepth) <= 1 && isBalanced(root -> left) && isBalanced(root -> right);\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   bool isBalanced(TreeNode* root) {\r     if (root == NULL)\r     {\r       return true;\r     }\r     int leftDepth = depth(root -> left);\r     int rightDepth = depth(root -> right);\r \r     return abs(leftDepth - rightDepth) <= 1 && isBalanced(root -> left) && isBalanced(root -> right);\r   }\r \r   int depth(TreeNode *root)\r   {\r     if (root == NULL)\r     {\r       return 0;\r     }\r     return max(depth(root -> left), depth(root -> right)) + 1;\r   }\r };",
    "m": [ "bool isBalanced(TreeNode* root) {\r\n    if (root == NULL)\r\n    {\r\n      return true;\r\n    }\r\n    int leftDepth = depth(root -> left);\r\n    int rightDepth = depth(root -> right);\r\n\r\n    return abs(leftDepth - rightDepth) <= 1 && isBalanced(root -> left) && isBalanced(root -> right);\r\n  }", "int depth(TreeNode *root)\r\n  {\r\n    if (root == NULL)\r\n    {\r\n      return 0;\r\n    }\r\n    return max(depth(root -> left), depth(root -> right)) + 1;\r\n  }", "int depth(TreeNode *root)\r\n  {\r\n    if (root == NULL)\r\n    {\r\n      return 0;\r\n    }\r\n    return max(depth(root -> left), depth(root -> right)) + 1;\r\n  }" ],
    "simplified_t": [ "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=2006526317;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1488933983;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1592073121;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1766882351;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n", "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2086445022;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-837979969;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1620948651;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-1590431778;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_16\\solution110.cpp\\Solution\\depth(TreeNode*)",
    "c": [ ],
    "t": [ "void AKA_TEST_Solution_depth_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_depth_TreeNodemul_random_1\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=2006526317;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1488933983;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left2_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[2]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_2 = new ::TreeNode(root0_left2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_2).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_2);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1592073121;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=1766882351;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_depth_TreeNodemul_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->depth(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution110.cpp\\\\Solution\\\\depth(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_depth_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_depth_TreeNodemul_random_0\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-2086445022;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-837979969;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1620948651;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=-1590431778;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution110.cpp\\\\depth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_depth_TreeNodemul_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->depth(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution110.cpp\\\\Solution\\\\depth(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "int depth(TreeNode *root)\r   {\r     if (root == NULL)\r     {\r       return 0;\r     }\r     return max(depth(root -> left), depth(root -> right)) + 1;\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   int minDepth(TreeNode* root) {\r     if (root == NULL)\r     {\r       return 0;\r     }\r     int lDepth = minDepth(root -> left);\r     int rDepth = minDepth(root -> right);\r     return 1 + (min(lDepth, rDepth) ? min(lDepth, rDepth) : max(lDepth, rDepth));\r   }\r };",
    "m": [ "int minDepth(TreeNode* root) {\r\n    if (root == NULL)\r\n    {\r\n      return 0;\r\n    }\r\n    int lDepth = minDepth(root -> left);\r\n    int rDepth = minDepth(root -> right);\r\n    return 1 + (min(lDepth, rDepth) ? min(lDepth, rDepth) : max(lDepth, rDepth));\r\n  }", "int minDepth(TreeNode* root) {\r\n    if (root == NULL)\r\n    {\r\n      return 0;\r\n    }\r\n    int lDepth = minDepth(root -> left);\r\n    int rDepth = minDepth(root -> right);\r\n    return 1 + (min(lDepth, rDepth) ? min(lDepth, rDepth) : max(lDepth, rDepth));\r\n  }" ],
    "simplified_t": [ "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1525844813;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=236693631;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n", "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1858119982;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1147369546;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_16\\solution111.cpp\\Solution\\minDepth(TreeNode*)",
    "c": [ ],
    "t": [ "void AKA_TEST_Solution_minDepth_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_minDepth_TreeNodemul_random_1\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1525844813;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=236693631;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minDepth_TreeNodemul_random_1\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minDepth(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution111.cpp\\\\Solution\\\\minDepth(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_minDepth_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_minDepth_TreeNodemul_random_0\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1858119982;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=-1147369546;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left1_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution111.cpp\\\\minDepth(TreeNode*)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[1]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_1 = new ::TreeNode(root0_left1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_1).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_1);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_minDepth_TreeNodemul_random_0\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->minDepth(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution111.cpp\\\\Solution\\\\minDepth(TreeNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "int minDepth(TreeNode* root) {\r     if (root == NULL)\r     {\r       return 0;\r     }\r     int lDepth = minDepth(root -> left);\r     int rDepth = minDepth(root -> right);\r     return 1 + (min(lDepth, rDepth) ? min(lDepth, rDepth) : max(lDepth, rDepth));\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   bool hasPathSum(TreeNode* root, int sum) {\r     if (root == NULL)\r     {\r       return false;\r     }\r     vector<int> nums;\r     dfs(root, nums, 0);\r     for (auto i : nums)\r     {\r       if (sum == i)\r       {\r         return true;\r       }\r     }\r     return false;\r   }\r   void dfs(TreeNode *root, vector<int> &nums, int num)\r   {\r     num = num + root -> val;\r     if (root -> left != NULL)\r     {\r       dfs(root -> left, nums, num);\r     }\r     if (root -> right != NULL)\r     {\r       dfs(root -> right, nums, num);\r     }\r     if (root -> left == NULL && root -> right == NULL)\r     {\r       nums.push_back(num);\r     }\r   }\r };",
    "m": [ "void dfs(TreeNode *root, vector<int> &nums, int num)\r\n  {\r\n    num = num + root -> val;\r\n    if (root -> left != NULL)\r\n    {\r\n      dfs(root -> left, nums, num);\r\n    }\r\n    if (root -> right != NULL)\r\n    {\r\n      dfs(root -> right, nums, num);\r\n    }\r\n    if (root -> left == NULL && root -> right == NULL)\r\n    {\r\n      nums.push_back(num);\r\n    }\r\n  }" ],
    "simplified_t": [ "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1640134101;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-869890747;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=1319483797;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n", "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=288310338;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1003672210;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=784918614;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_16\\solution112.cpp\\Solution\\hasPathSum(TreeNode*,int)",
    "c": [ ],
    "t": [ "void AKA_TEST_Solution_hasPathSum_TreeNodemul_int_random_0(void) {\n{\nAKA_test_case_name=\"Solution_hasPathSum_TreeNodemul_int_random_0\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=1640134101;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=-869890747;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root2_x=0;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_2\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_2 = new ::TreeNode(root2_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_2).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_2).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_2);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=1319483797;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_hasPathSum_TreeNodemul_int_random_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->hasPathSum(root,sum);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution112.cpp\\\\Solution\\\\hasPathSum(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_hasPathSum_TreeNodemul_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_hasPathSum_TreeNodemul_int_random_1\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=288310338;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root1_x=1003672210;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\hasPathSum(TreeNode*,int)\\\\root\\\\AKA_VECTOR_INIT_root_1\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_1 = new ::TreeNode(root1_x);\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_1).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_1).right;\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_1);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\n\n\nint sum=784918614;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* NormalNumberDataNode sum */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_hasPathSum_TreeNodemul_int_random_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->hasPathSum(root,sum);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution112.cpp\\\\Solution\\\\hasPathSum(TreeNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "bool hasPathSum(TreeNode* root, int sum) {\r     if (root == NULL)\r     {\r       return false;\r     }\r     vector<int> nums;\r     dfs(root, nums, 0);\r     for (auto i : nums)\r     {\r       if (sum == i)\r       {\r         return true;\r       }\r     }\r     return false;\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   bool hasPathSum(TreeNode* root, int sum) {\r     if (root == NULL)\r     {\r       return false;\r     }\r     vector<int> nums;\r     dfs(root, nums, 0);\r     for (auto i : nums)\r     {\r       if (sum == i)\r       {\r         return true;\r       }\r     }\r     return false;\r   }\r   void dfs(TreeNode *root, vector<int> &nums, int num)\r   {\r     num = num + root -> val;\r     if (root -> left != NULL)\r     {\r       dfs(root -> left, nums, num);\r     }\r     if (root -> right != NULL)\r     {\r       dfs(root -> right, nums, num);\r     }\r     if (root -> left == NULL && root -> right == NULL)\r     {\r       nums.push_back(num);\r     }\r   }\r };",
    "m": [ "bool hasPathSum(TreeNode* root, int sum) {\r\n    if (root == NULL)\r\n    {\r\n      return false;\r\n    }\r\n    vector<int> nums;\r\n    dfs(root, nums, 0);\r\n    for (auto i : nums)\r\n    {\r\n      if (sum == i)\r\n      {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }", "void dfs(TreeNode *root, vector<int> &nums, int num)\r\n  {\r\n    num = num + root -> val;\r\n    if (root -> left != NULL)\r\n    {\r\n      dfs(root -> left, nums, num);\r\n    }\r\n    if (root -> right != NULL)\r\n    {\r\n      dfs(root -> right, nums, num);\r\n    }\r\n    if (root -> left == NULL && root -> right == NULL)\r\n    {\r\n      nums.push_back(num);\r\n    }\r\n  }", "void dfs(TreeNode *root, vector<int> &nums, int num)\r\n  {\r\n    num = num + root -> val;\r\n    if (root -> left != NULL)\r\n    {\r\n      dfs(root -> left, nums, num);\r\n    }\r\n    if (root -> right != NULL)\r\n    {\r\n      dfs(root -> right, nums, num);\r\n    }\r\n    if (root -> left == NULL && root -> right == NULL)\r\n    {\r\n      nums.push_back(num);\r\n    }\r\n  }" ],
    "simplified_t": [ "\nTreeNode* root;\nvector<int> nums;\n\n\nint num=596859347;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode nums */\nint nums_element0=-366438810;\nnums.push_back(nums_element0);\nint nums_element1=2102867652;\nnums.push_back(nums_element1);\nint nums_element2=1723236874;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode num */\n\n", "\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1977752703;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\dfs(TreeNode*,vector<int>&,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-713329273;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=540229276;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\dfs(TreeNode*,vector<int>&,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=203307388;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=262888001;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\dfs(TreeNode*,vector<int>&,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=1426996508;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> nums;\n\n\nint num=1997164060;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode nums */\nint nums_element0=297032189;\nnums.push_back(nums_element0);\nint nums_element1=153128614;\nnums.push_back(nums_element1);\nint nums_element2=413618798;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode num */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_16\\solution112.cpp\\Solution\\dfs(TreeNode*,vector<int>&,int)",
    "c": [ ],
    "t": [ "void AKA_TEST_Solution_dfs_TreeNodemul_vector_int_int_random_3(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_vector_int_int_random_3\";\n\n// set up\n;\n\nTreeNode* root;\nvector<int> nums;\n\n\nint num=596859347;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode nums */\nint nums_element0=-366438810;\nnums.push_back(nums_element0);\nint nums_element1=2102867652;\nnums.push_back(nums_element1);\nint nums_element2=1723236874;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode num */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_vector_int_int_random_3\");AKA_INSTANCE___Solution->dfs(root,nums,num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution112.cpp\\\\Solution\\\\dfs(TreeNode*,vector<int>&,int)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_dfs_TreeNodemul_vector_int_int_random_1(void) {\n{\nAKA_test_case_name=\"Solution_dfs_TreeNodemul_vector_int_int_random_1\";\n\n// set up\n;\n\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root;\n\n\n/* SubStructDataNode root */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_x=-1977752703;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\dfs(TreeNode*,vector<int>&,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0 = new ::TreeNode(root0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0).val=-713329273;\n/* PointerStructureDataNode left */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_left;\n/* SubStructDataNode left */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_left0_x=540229276;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\dfs(TreeNode*,vector<int>&,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\left\\\\left[0]\\\\left\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_left_0 = new ::TreeNode(root0_left0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).val=203307388;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_left_0).right;\nAKA_VECTOR_INIT_root_0_DOT_left.push_back(AKA_VECTOR_INIT_root_0_DOT_left_0);\n(*AKA_VECTOR_INIT_root_0).left = AKA_VECTOR_INIT_root_0_DOT_left[0];\n/* PointerStructureDataNode right */\nstd::vector<TreeNode*> AKA_VECTOR_INIT_root_0_DOT_right;\n/* SubStructDataNode right */\n/* ConstructorDataNode TreeNode(int) */\n/* NormalNumberDataNode x */\nint root0_right0_x=262888001;\nAKA_mark(\"Calling: .\\\\folder_16\\\\solution110.cpp\\\\TreeNode\\\\TreeNode(int)|ROOT\\\\solution112.cpp\\\\dfs(TreeNode*,vector<int>&,int)\\\\root\\\\AKA_VECTOR_INIT_root_0\\\\root\\\\right\\\\right[0]\\\\right\\\\TreeNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_root_0_DOT_right_0 = new ::TreeNode(root0_right0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).val=1426996508;\n/* PointerStructureDataNode left */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).left;\n/* PointerStructureDataNode right */\n(*AKA_VECTOR_INIT_root_0_DOT_right_0).right;\nAKA_VECTOR_INIT_root_0_DOT_right.push_back(AKA_VECTOR_INIT_root_0_DOT_right_0);\n(*AKA_VECTOR_INIT_root_0).right = AKA_VECTOR_INIT_root_0_DOT_right[0];\n\nAKA_VECTOR_INIT_root.push_back(AKA_VECTOR_INIT_root_0);\n\nTreeNode* root = AKA_VECTOR_INIT_root[0];\nvector<int> nums;\n\n\nint num=1997164060;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n/* VectorDataNode nums */\nint nums_element0=297032189;\nnums.push_back(nums_element0);\nint nums_element1=153128614;\nnums.push_back(nums_element1);\nint nums_element2=413618798;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode num */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_dfs_TreeNodemul_vector_int_int_random_1\");AKA_INSTANCE___Solution->dfs(root,nums,num);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution112.cpp\\\\Solution\\\\dfs(TreeNode*,vector<int>&,int)\");\n\n/* error assertion */\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "void dfs(TreeNode *root, vector<int> &nums, int num)\r   {\r     num = num + root -> val;\r     if (root -> left != NULL)\r     {\r       dfs(root -> left, nums, num);\r     }\r     if (root -> right != NULL)\r     {\r       dfs(root -> right, nums, num);\r     }\r     if (root -> left == NULL && root -> right == NULL)\r     {\r       nums.push_back(num);\r     }\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   void flatten(TreeNode* root) {\r     if (root == NULL) return;\r     stack<TreeNode *> st;\r     st.push(root);\r \r     while (!st.empty())\r     {\r       TreeNode *pnode = st.top();\r       st.pop();\r \r       if (pnode -> right != NULL)\r       {\r \tst.push(pnode -> right);\r       }\r \r       if (pnode -> left != NULL)\r       {\r \tst.push(pnode -> left);\r       }\r \r       pnode -> left = NULL;\r       if (!st.empty())\r       {\r \tpnode -> right = st.top();\r       }\r     }\r     \r   }\r };",
    "m": [ "void flatten(TreeNode* root) {\r\n    if (root == NULL) return;\r\n    stack<TreeNode *> st;\r\n    st.push(root);\r\n\r\n    while (!st.empty())\r\n    {\r\n      TreeNode *pnode = st.top();\r\n      st.pop();\r\n\r\n      if (pnode -> right != NULL)\r\n      {\r\n\tst.push(pnode -> right);\r\n      }\r\n\r\n      if (pnode -> left != NULL)\r\n      {\r\n\tst.push(pnode -> left);\r\n      }\r\n\r\n      pnode -> left = NULL;\r\n      if (!st.empty())\r\n      {\r\n\tpnode -> right = st.top();\r\n      }\r\n    }\r\n    \r\n  }" ],
    "simplified_t": [ "\nTreeNode* root;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n", "\nTreeNode* root;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_16\\solution114.cpp\\Solution\\flatten(TreeNode*)",
    "c": [ ],
    "t": [ "void AKA_TEST_Solution_flatten_TreeNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_flatten_TreeNodemul_random_1\";\n\n// set up\n;\n\nTreeNode* root;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_flatten_TreeNodemul_random_1\");AKA_INSTANCE___Solution->flatten(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution114.cpp\\\\Solution\\\\flatten(TreeNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_flatten_TreeNodemul_random_0(void) {\n{\nAKA_test_case_name=\"Solution_flatten_TreeNodemul_random_0\";\n\n// set up\n;\n\nTreeNode* root;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode root */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_flatten_TreeNodemul_random_0\");AKA_INSTANCE___Solution->flatten(root);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_16\\\\solution114.cpp\\\\Solution\\\\flatten(TreeNode*)\");\n\n/* error assertion */\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "void flatten(TreeNode* root) {\r     if (root == NULL) return;\r     stack<TreeNode *> st;\r     st.push(root);\r \r     while (!st.empty())\r     {\r       TreeNode *pnode = st.top();\r       st.pop();\r \r       if (pnode -> right != NULL)\r       {\r \tst.push(pnode -> right);\r       }\r \r       if (pnode -> left != NULL)\r       {\r \tst.push(pnode -> left);\r       }\r \r       pnode -> left = NULL;\r       if (!st.empty())\r       {\r \tpnode -> right = st.top();\r       }\r     }\r     \r   }"
  },
  {
    "fc": "class Solution {\r public:\r   vector<vector<int> > generate(int numRows) {\r     vector<vector<int> > ret;\r     for (int i = 0; i < numRows; i ++)\r     {\r       ret.push_back(vector<int>(i + 1, 1));\r       for (int j = 1; j < i; j ++)\r       {\r \tret[i][j] = ret[i - 1][j - 1] + ret[i - 1][j];\r       }\r     }\r     return ret;\r   }\r };",
    "m": [ ],
    "simplified_t": [ ],
    "path_fm": "D:\\py\\test\\folder_16\\solution118.cpp\\Solution\\generate(int)",
    "c": [ ],
    "t": [ ],
    "f": [ ],
    "fm": "vector<vector<int> > generate(int numRows) {\r     vector<vector<int> > ret;\r     for (int i = 0; i < numRows; i ++)\r     {\r       ret.push_back(vector<int>(i + 1, 1));\r       for (int j = 1; j < i; j ++)\r       {\r \tret[i][j] = ret[i - 1][j - 1] + ret[i - 1][j];\r       }\r     }\r     return ret;\r   }"
  }
]

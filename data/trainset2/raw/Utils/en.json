[
  {   "m" : [ ],   "fm" : "int* twoSum(int* nums, int numsSize, int target) {\r \tint i, min = nums[0], max = nums[0];\r \t//ҳֵСֵ\r \tfor (i = 0; i < numsSize; i++) {\r \t\tif (nums[i] > max) max = nums[i];\r \t\tif (nums[i] < min) min = nums[i];\r \t}\r \t//Ϊmap±Ϊ룬mapĴСΪ+1ɡ\r \tint *map = (int*)calloc((max - min + 1), sizeof(int));\r \tint *twosum = (int*)malloc(sizeof(int) * 2);\r \t// ÿɨһnumsԪأԪص±;¼map\r \tfor (i = 0; i < numsSize; map[nums[i] - min] = ++i) {\r \t\tint lookfornum = target - nums[i];\r \t\tif (lookfornum<min || lookfornum>max)\r \t\t\tcontinue;\r \t\tint dis = lookfornum - min;\r \t\t// жĿǷѾֵ\r \t\tif (map[dis] != 0) {\r \t\t\ttwosum[0] = i;\r \t\t\ttwosum[1] = map[dis] - 1;\r \t\t\tbreak;\r \t\t}\r \t}\r \r \treturn twosum;\r }",   "t" : [ "void AKA_TEST_twoSum_intmul_int_int_random_2(void) {\n{\nAKA_test_case_name=\"twoSum_intmul_int_int_random_2\";\n\n// set up\n;\n\nint AKA_ARRAY_INIT_nums[1];\n\n\nint AKA_ARRAY_INIT_nums_0=-1348042565;\nAKA_ARRAY_INIT_nums[0] = AKA_ARRAY_INIT_nums_0;\n\nint* nums = AKA_ARRAY_INIT_nums;\n\n\nint numsSize=4;\n\n\nint target=-1666784224;\nint* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerNumberDataNode nums */\n/* NormalNumberDataNode numsSize */\n/* NormalNumberDataNode target */\n/* PointerNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test twoSum_intmul_int_int_random_2\");int* AKA_ACTUAL_OUTPUT=twoSum(nums,numsSize,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_001 Two Sum\\\\_001 Two Sum.cpp\\\\twoSum(int*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_001 Two Sum\\_001 Two Sum.cpp\\twoSum(int*,int,int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {\r \tstruct ListNode *p1 = l1;\r \tstruct ListNode *p2 = l2;\r \tint a, b, c;\r \tc = 0;\r \r \tstruct ListNode *result = (struct ListNode *)malloc(sizeof(struct ListNode));\r \tstruct ListNode *p = result;\r \r \twhile (1){\r \t\tif (p1 == NULL && p2 == NULL){\r \t\t\tif (c){\r \t\t\t\tstruct ListNode* t = (struct ListNode *)malloc(sizeof(struct ListNode));\r \t\t\t\tt->val = 1;\r \t\t\t\tt->next = NULL;\r \t\t\t\tp->next = t;\r \t\t\t}\r \t\t\tbreak;\r \t\t}\r \t\telse{\r \t\t\tstruct ListNode* t = (struct ListNode *)malloc(sizeof(struct ListNode));\r \t\t\tt->next = NULL;\r \t\t\tp->next = t;\r \t\t\tp = t;\r \t\t}\r \r \t\tif (p1 == NULL){\r \t\t\ta = 0;\r \t\t\tb = p2->val;\r \t\t\tp2 = p2->next;\r \t\t}\r \t\telse if (p2 == NULL){\r \t\t\ta = p1->val;\r \t\t\tb = 0;\r \t\t\tp1 = p1->next;\r \t\t}\r \t\telse{\r \t\t\ta = p1->val;\r \t\t\tb = p2->val;\r \t\t\tp1 = p1->next;\r \t\t\tp2 = p2->next;\r \t\t}\r \t\tp->val = (a + b + c) % 10;\r \t\tc = (a + b + c) / 10;\r \r \t}\r \treturn result->next;\r }",   "t" : [ "void AKA_TEST_addTwoNumbers_struct_ListNodemul_struct_ListNodemul_random_0(void) {\n{\nAKA_test_case_name=\"addTwoNumbers_struct_ListNodemul_struct_ListNodemul_random_0\";\n\n// set up\n;\n\nstd::vector<struct ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: \\\\ListNode()|ROOT\\\\_002 Add Two Numbers.cpp\\\\addTwoNumbers(struct ListNode*,struct ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\nstruct ListNode* l1 = AKA_VECTOR_INIT_l1[0];\nstd::vector<struct ListNode*> AKA_VECTOR_INIT_l2;\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode() */\nAKA_mark(\"Calling: \\\\ListNode()|ROOT\\\\_002 Add Two Numbers.cpp\\\\addTwoNumbers(struct ListNode*,struct ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\ListNode()\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0 = new ::ListNode();\n/* NormalNumberDataNode val */\n/* val : null value -> no code */\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_0).next;\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_0);\n\nstruct ListNode* l2 = AKA_VECTOR_INIT_l2[0];\nstruct ListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test addTwoNumbers_struct_ListNodemul_struct_ListNodemul_random_0\");struct ListNode* AKA_ACTUAL_OUTPUT=addTwoNumbers(l1,l2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_002 Add Two Numbers\\\\_002 Add Two Numbers.cpp\\\\addTwoNumbers(struct ListNode*,struct ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_002 Add Two Numbers\\_002 Add Two Numbers.cpp\\addTwoNumbers(struct ListNode*,struct ListNode*)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "int lengthOfLongestSubstringWithoutContinuousCharacter(char* s) {\r \tint i = 1, iMax = 0;\r \twhile (*(++s) != '\\0'){\r \t\tif (*(s - 1) == *s){\r \t\t\t\r \t\t\ti = 1;\r \t\t}\r \t\telse{\r \t\t\ti++;\r \t\t}\r \t\tiMax = iMax < i ? i : iMax;\r \t}\r \treturn iMax;\r }",   "t" : [ "void AKA_TEST_lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4(void) {\n{\nAKA_test_case_name=\"lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=-11;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=101;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstringWithoutContinuousCharacter(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstringWithoutContinuousCharacter(char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4(void) {\n{\nAKA_test_case_name=\"lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=-11;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=101;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstringWithoutContinuousCharacter_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstringWithoutContinuousCharacter(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstringWithoutContinuousCharacter(char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_003 Longest Substring Without Repeating Characters\\_003 Longest Substring Without Repeating Characters.cpp\\lengthOfLongestSubstringWithoutContinuousCharacter(char*)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ "int checkRepeat(char* s, int p, int q){\r\n\t//s[p, p+q)ΪҪظַ\r\n\t//صs[p, p+q)ַʼظӴ󳤶\r\n\tint i = 0;\r\n\tint a[200] = { 0 };\r\n\tfor (i = 0; i < q; i++){\r\n\t\tif (a[(int)(s[p + i])]){\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\telse{\r\n\t\t\ta[(int)(s[p + i])]++;\r\n\t\t}\r\n\t}\r\n\treturn i;\r\n}" ],   "fm" : "int lengthOfLongestSubstring(char* s) {\r \tint i = 0, j = 2, max = 0, l = 0;\r \r \tif (s[0] == '\\0') \r \t\treturn 0; \r \telse if ((s[1] == '\\0')) \r \t\treturn 1;\r \twhile (1){\r \t\t// жʼַǷΪ\\0\r \t\tif (s[i + 1] != '\\0'){\r \t\t\tj = 1;\r \t\t\twhile (1){\r \t\t\t\tif (s[i + j-1] != '\\0'){\r \t\t\t\t\tl = checkRepeat(s, i, j);\r \t\t\t\t\tmax = max < l ? l : max;\r \t\t\t\t\tif (l < j) break;\r \t\t\t\t\tj++;\r \t\t\t\t}\r \t\t\t\telse{\r \t\t\t\t\tbreak;\r \t\t\t\t}\r \t\t\t}\r \t\t\ti++;\r \t\t}\r \t\telse{\r \t\t\tbreak;\r \t\t}\r \t}\r \treturn max;\r }",   "t" : [ "void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) {\n{\nAKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=75;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=0;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) {\n{\nAKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=75;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=0;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) {\n{\nAKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=75;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=0;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_lengthOfLongestSubstring_charmul_random_4(void) {\n{\nAKA_test_case_name=\"lengthOfLongestSubstring_charmul_random_4\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=75;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=0;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test lengthOfLongestSubstring_charmul_random_4\");int AKA_ACTUAL_OUTPUT=lengthOfLongestSubstring(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\lengthOfLongestSubstring(char*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_003 Longest Substring Without Repeating Characters\\_003 Longest Substring Without Repeating Characters.cpp\\lengthOfLongestSubstring(char*)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ "int lengthOfLongestSubstring(char* s) {\r\n\tint i = 0, j = 2, max = 0, l = 0;\r\n\r\n\tif (s[0] == '\\0') \r\n\t\treturn 0; \r\n\telse if ((s[1] == '\\0')) \r\n\t\treturn 1;\r\n\twhile (1){\r\n\t\t// жʼַǷΪ\\0\r\n\t\tif (s[i + 1] != '\\0'){\r\n\t\t\tj = 1;\r\n\t\t\twhile (1){\r\n\t\t\t\tif (s[i + j-1] != '\\0'){\r\n\t\t\t\t\tl = checkRepeat(s, i, j);\r\n\t\t\t\t\tmax = max < l ? l : max;\r\n\t\t\t\t\tif (l < j) break;\r\n\t\t\t\t\tj++;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn max;\r\n}" ],   "fm" : "int checkRepeat(char* s, int p, int q){\r \t//s[p, p+q)ΪҪظַ\r \t//صs[p, p+q)ַʼظӴ󳤶\r \tint i = 0;\r \tint a[200] = { 0 };\r \tfor (i = 0; i < q; i++){\r \t\tif (a[(int)(s[p + i])]){\r \t\t\tbreak;\r \t\t}\r \t\telse{\r \t\t\ta[(int)(s[p + i])]++;\r \t\t}\r \t}\r \treturn i;\r }",   "t" : [ "void AKA_TEST_checkRepeat_charmul_int_int_random_3(void) {\n{\nAKA_test_case_name=\"checkRepeat_charmul_int_int_random_3\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=123;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=79;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint p=-1267525398;\n\n\nint q=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode p */\n/* NormalNumberDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test checkRepeat_charmul_int_int_random_3\");int AKA_ACTUAL_OUTPUT=checkRepeat(s,p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\checkRepeat(char*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_checkRepeat_charmul_int_int_random_3(void) {\n{\nAKA_test_case_name=\"checkRepeat_charmul_int_int_random_3\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=123;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=79;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint p=-1267525398;\n\n\nint q=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode p */\n/* NormalNumberDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test checkRepeat_charmul_int_int_random_3\");int AKA_ACTUAL_OUTPUT=checkRepeat(s,p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\checkRepeat(char*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_checkRepeat_charmul_int_int_random_3(void) {\n{\nAKA_test_case_name=\"checkRepeat_charmul_int_int_random_3\";\n\n// set up\n;\n\nchar AKA_ARRAY_INIT_s[2];\n\nchar AKA_ARRAY_INIT_s_0=123;\nAKA_ARRAY_INIT_s[0] = AKA_ARRAY_INIT_s_0;\n\nchar AKA_ARRAY_INIT_s_1=79;\nAKA_ARRAY_INIT_s[1] = AKA_ARRAY_INIT_s_1;\n\nchar* s = AKA_ARRAY_INIT_s;\n\n\nint p=-1267525398;\n\n\nint q=7;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerCharacterDataNode s */\n/* NormalNumberDataNode p */\n/* NormalNumberDataNode q */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test checkRepeat_charmul_int_int_random_3\");int AKA_ACTUAL_OUTPUT=checkRepeat(s,p,q);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_003 Longest Substring Without Repeating Characters\\\\_003 Longest Substring Without Repeating Characters.cpp\\\\checkRepeat(char*,int,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_003 Longest Substring Without Repeating Characters\\_003 Longest Substring Without Repeating Characters.cpp\\checkRepeat(char*,int,int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "string longestPalindrome(string s) {\r \t\tint n = s.length();\r \t\tint i = 0;\r \t\tint start;\r \t\tint end;\r \t\tint tmp_len;\r \t\tint max_len = 1;\r \t\tint pos = 0;\r \t\twhile (i < n) {\r \t\t\tstart = i;\r \t\t\tend = i;\r \t\t\t// ظַ\r \t\t\twhile (end < n - 1 && s[end + 1] == s[end]) {\r \t\t\t\t++end;\r \t\t\t}\r \t\t\ti = end + 1; // i\r \t\t\t\t\t\t // ţעʱstartendǵķֱظʼ\r \t\t\twhile (start > 0 && end < n - 1 && s[start - 1] == s[end + 1]) {\r \t\t\t\t--start;\r \t\t\t\t++end;\r \t\t\t}\r \t\t\ttmp_len = end - start + 1;\r \t\t\tif (tmp_len > max_len) {\r \t\t\t\tmax_len = tmp_len;\r \t\t\t\tpos = start;\r \t\t\t}\r \t\t}\r \t\treturn s.substr(pos, max_len);\r \t}",   "t" : [ "void AKA_TEST_Solution2_longestPalindrome_string_random_3(void) {\n{\nAKA_test_case_name=\"Solution2_longestPalindrome_string_random_3\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution2 */\n/* ConstructorDataNode Solution2() */\nAKA_mark(\"Calling: \\\\Solution2()|ROOT\\\\_005 Longest Palindromic Substring.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution2\\\\AKA_INSTANCE___Solution2\\\\Solution2()\");AKA_fCall++;AKA_INSTANCE___Solution2 = new ::Solution2();\n\n\nchar* akaRandomName577826 = new char[2];akaRandomName577826[0] = 61;akaRandomName577826[1] = '\\0';string s=akaRandomName577826;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution2_longestPalindrome_string_random_3\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution2->longestPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_005 Longest Palindromic Substring\\\\_005 Longest Palindromic Substring.cpp\\\\Solution2\\\\longestPalindrome(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_005 Longest Palindromic Substring\\_005 Longest Palindromic Substring.cpp\\Solution2\\longestPalindrome(string)",   "c" : [ "" ],   "fc" : "class Solution2 {\r public:\r \tstring longestPalindrome(string s) {\r \t\tint n = s.length();\r \t\tint i = 0;\r \t\tint start;\r \t\tint end;\r \t\tint tmp_len;\r \t\tint max_len = 1;\r \t\tint pos = 0;\r \t\twhile (i < n) {\r \t\t\tstart = i;\r \t\t\tend = i;\r \t\t\t// ظַ\r \t\t\twhile (end < n - 1 && s[end + 1] == s[end]) {\r \t\t\t\t++end;\r \t\t\t}\r \t\t\ti = end + 1; // i\r \t\t\t\t\t\t // ţעʱstartendǵķֱظʼ\r \t\t\twhile (start > 0 && end < n - 1 && s[start - 1] == s[end + 1]) {\r \t\t\t\t--start;\r \t\t\t\t++end;\r \t\t\t}\r \t\t\ttmp_len = end - start + 1;\r \t\t\tif (tmp_len > max_len) {\r \t\t\t\tmax_len = tmp_len;\r \t\t\t\tpos = start;\r \t\t\t}\r \t\t}\r \t\treturn s.substr(pos, max_len);\r \t}\r };" },
  {   "m" : [ "string searchPalindrome(string s, int start) {\r\n\t\tint length = 0, maxlength = 0;\r\n\t\tstring str = s.substr(start,1);\r\n\t\t// bbͻ\r\n\t\tif (s[start] == s[start + 1]) {\r\n\t\t\tmaxlength = 2;\r\n\t\t\tfor (int i = 1; start + i + 1 < s.length() && start - i >= 0; i++) {\r\n\t\t\t\tif (s[start + i + 1] == s[start - i]) {\r\n\t\t\t\t\tmaxlength += 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstr = s.substr(start - maxlength / 2 + 1, maxlength);\r\n\t\t}\r\n\t\t// abaͻ\r\n\t\tif (s[start - 1] == s[start + 1]) {\r\n\t\t\tlength = 3;\t\t\t\r\n\t\t\tfor (int i = 2; start + i < s.length() && start - i >= 0; i++) {\r\n\t\t\t\tif (s[start + i] == s[start - i]) {\r\n\t\t\t\t\tlength += 2;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmaxlength = maxlength > length ? maxlength : length;\r\n\t\t\tstr = s.substr(start - (maxlength - 1) / 2, maxlength);\r\n\t\t}\r\n\t\treturn str;\r\n\t}" ],   "fm" : "string longestPalindrome(string s) {\r \t\tif (s.length() == 0) {\r \t\t\treturn \"\";\r \t\t}\r \t\tint maxlength = 0;\r \t\tstring maxString = s.substr(0, 1);\r \t\tfor (int i = 0; i < s.length() - 1; i++) {\r \t\t\tif (i == 0) {\r \t\t\t\tif (s[0] == s[1]) {\r \t\t\t\t\tmaxlength = 2;\r \t\t\t\t\tmaxString = s.substr(0, 2);\r \t\t\t\t}\r \t\t\t\tcontinue;\r \t\t\t}\r \r \t\t\tstring str = searchPalindrome(s, i);\r \t\t\tint length = str.length();\r \t\t\tif (length > maxlength) {\r \t\t\t\tmaxlength = length;\r \t\t\t\tmaxString = str;\r \t\t\t}\r \t\t}\r \t\treturn maxString;\r \t}",   "t" : [ "void AKA_TEST_Solution_longestPalindrome_string_random_0(void) {\n{\nAKA_test_case_name=\"Solution_longestPalindrome_string_random_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\_005 Longest Palindromic Substring.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName981925 = new char[2];akaRandomName981925[0] = -50;akaRandomName981925[1] = '\\0';string s=akaRandomName981925;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_longestPalindrome_string_random_0\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->longestPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_005 Longest Palindromic Substring\\\\_005 Longest Palindromic Substring.cpp\\\\Solution\\\\longestPalindrome(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_005 Longest Palindromic Substring\\_005 Longest Palindromic Substring.cpp\\Solution\\longestPalindrome(string)",   "c" : [ "" ],   "fc" : "class Solution {\r public:\r \tstring longestPalindrome(string s) {\r \t\tif (s.length() == 0) {\r \t\t\treturn \"\";\r \t\t}\r \t\tint maxlength = 0;\r \t\tstring maxString = s.substr(0, 1);\r \t\tfor (int i = 0; i < s.length() - 1; i++) {\r \t\t\tif (i == 0) {\r \t\t\t\tif (s[0] == s[1]) {\r \t\t\t\t\tmaxlength = 2;\r \t\t\t\t\tmaxString = s.substr(0, 2);\r \t\t\t\t}\r \t\t\t\tcontinue;\r \t\t\t}\r \r \t\t\tstring str = searchPalindrome(s, i);\r \t\t\tint length = str.length();\r \t\t\tif (length > maxlength) {\r \t\t\t\tmaxlength = length;\r \t\t\t\tmaxString = str;\r \t\t\t}\r \t\t}\r \t\treturn maxString;\r \t}\r \r \t/*\r \t1 <= start< s.length()-1\r \tsУ±startΪԳᣬһַ\r \t*/\r \tstring searchPalindrome(string s, int start) {\r \t\tint length = 0, maxlength = 0;\r \t\tstring str = s.substr(start,1);\r \t\t// bbͻ\r \t\tif (s[start] == s[start + 1]) {\r \t\t\tmaxlength = 2;\r \t\t\tfor (int i = 1; start + i + 1 < s.length() && start - i >= 0; i++) {\r \t\t\t\tif (s[start + i + 1] == s[start - i]) {\r \t\t\t\t\tmaxlength += 2;\r \t\t\t\t}\r \t\t\t\telse {\r \t\t\t\t\tbreak;\r \t\t\t\t}\r \t\t\t}\r \t\t\tstr = s.substr(start - maxlength / 2 + 1, maxlength);\r \t\t}\r \t\t// abaͻ\r \t\tif (s[start - 1] == s[start + 1]) {\r \t\t\tlength = 3;\t\t\t\r \t\t\tfor (int i = 2; start + i < s.length() && start - i >= 0; i++) {\r \t\t\t\tif (s[start + i] == s[start - i]) {\r \t\t\t\t\tlength += 2;\r \t\t\t\t}\r \t\t\t\telse {\r \t\t\t\t\tbreak;\r \t\t\t\t}\r \t\t\t}\r \t\t\tmaxlength = maxlength > length ? maxlength : length;\r \t\t\tstr = s.substr(start - (maxlength - 1) / 2, maxlength);\r \t\t}\r \t\treturn str;\r \t}\r };" },
  {   "m" : [ "string longestPalindrome(string s) {\r\n\t\tif (s.length() == 0) {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t\tint maxlength = 0;\r\n\t\tstring maxString = s.substr(0, 1);\r\n\t\tfor (int i = 0; i < s.length() - 1; i++) {\r\n\t\t\tif (i == 0) {\r\n\t\t\t\tif (s[0] == s[1]) {\r\n\t\t\t\t\tmaxlength = 2;\r\n\t\t\t\t\tmaxString = s.substr(0, 2);\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tstring str = searchPalindrome(s, i);\r\n\t\t\tint length = str.length();\r\n\t\t\tif (length > maxlength) {\r\n\t\t\t\tmaxlength = length;\r\n\t\t\t\tmaxString = str;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn maxString;\r\n\t}" ],   "fm" : "string searchPalindrome(string s, int start) {\r \t\tint length = 0, maxlength = 0;\r \t\tstring str = s.substr(start,1);\r \t\t// bbͻ\r \t\tif (s[start] == s[start + 1]) {\r \t\t\tmaxlength = 2;\r \t\t\tfor (int i = 1; start + i + 1 < s.length() && start - i >= 0; i++) {\r \t\t\t\tif (s[start + i + 1] == s[start - i]) {\r \t\t\t\t\tmaxlength += 2;\r \t\t\t\t}\r \t\t\t\telse {\r \t\t\t\t\tbreak;\r \t\t\t\t}\r \t\t\t}\r \t\t\tstr = s.substr(start - maxlength / 2 + 1, maxlength);\r \t\t}\r \t\t// abaͻ\r \t\tif (s[start - 1] == s[start + 1]) {\r \t\t\tlength = 3;\t\t\t\r \t\t\tfor (int i = 2; start + i < s.length() && start - i >= 0; i++) {\r \t\t\t\tif (s[start + i] == s[start - i]) {\r \t\t\t\t\tlength += 2;\r \t\t\t\t}\r \t\t\t\telse {\r \t\t\t\t\tbreak;\r \t\t\t\t}\r \t\t\t}\r \t\t\tmaxlength = maxlength > length ? maxlength : length;\r \t\t\tstr = s.substr(start - (maxlength - 1) / 2, maxlength);\r \t\t}\r \t\treturn str;\r \t}",   "t" : [ "void AKA_TEST_Solution_searchPalindrome_string_int_random_2(void) {\n{\nAKA_test_case_name=\"Solution_searchPalindrome_string_int_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\_005 Longest Palindromic Substring.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName450695 = new char[2];akaRandomName450695[0] = -45;akaRandomName450695[1] = '\\0';string s=akaRandomName450695;\n\n\nint start=1;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode start */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_searchPalindrome_string_int_random_2\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->searchPalindrome(s,start);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_005 Longest Palindromic Substring\\\\_005 Longest Palindromic Substring.cpp\\\\Solution\\\\searchPalindrome(string,int)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_005 Longest Palindromic Substring\\_005 Longest Palindromic Substring.cpp\\Solution\\searchPalindrome(string,int)",   "c" : [ "" ],   "fc" : "class Solution {\r public:\r \tstring longestPalindrome(string s) {\r \t\tif (s.length() == 0) {\r \t\t\treturn \"\";\r \t\t}\r \t\tint maxlength = 0;\r \t\tstring maxString = s.substr(0, 1);\r \t\tfor (int i = 0; i < s.length() - 1; i++) {\r \t\t\tif (i == 0) {\r \t\t\t\tif (s[0] == s[1]) {\r \t\t\t\t\tmaxlength = 2;\r \t\t\t\t\tmaxString = s.substr(0, 2);\r \t\t\t\t}\r \t\t\t\tcontinue;\r \t\t\t}\r \r \t\t\tstring str = searchPalindrome(s, i);\r \t\t\tint length = str.length();\r \t\t\tif (length > maxlength) {\r \t\t\t\tmaxlength = length;\r \t\t\t\tmaxString = str;\r \t\t\t}\r \t\t}\r \t\treturn maxString;\r \t}\r \r \t/*\r \t1 <= start< s.length()-1\r \tsУ±startΪԳᣬһַ\r \t*/\r \tstring searchPalindrome(string s, int start) {\r \t\tint length = 0, maxlength = 0;\r \t\tstring str = s.substr(start,1);\r \t\t// bbͻ\r \t\tif (s[start] == s[start + 1]) {\r \t\t\tmaxlength = 2;\r \t\t\tfor (int i = 1; start + i + 1 < s.length() && start - i >= 0; i++) {\r \t\t\t\tif (s[start + i + 1] == s[start - i]) {\r \t\t\t\t\tmaxlength += 2;\r \t\t\t\t}\r \t\t\t\telse {\r \t\t\t\t\tbreak;\r \t\t\t\t}\r \t\t\t}\r \t\t\tstr = s.substr(start - maxlength / 2 + 1, maxlength);\r \t\t}\r \t\t// abaͻ\r \t\tif (s[start - 1] == s[start + 1]) {\r \t\t\tlength = 3;\t\t\t\r \t\t\tfor (int i = 2; start + i < s.length() && start - i >= 0; i++) {\r \t\t\t\tif (s[start + i] == s[start - i]) {\r \t\t\t\t\tlength += 2;\r \t\t\t\t}\r \t\t\t\telse {\r \t\t\t\t\tbreak;\r \t\t\t\t}\r \t\t\t}\r \t\t\tmaxlength = maxlength > length ? maxlength : length;\r \t\t\tstr = s.substr(start - (maxlength - 1) / 2, maxlength);\r \t\t}\r \t\treturn str;\r \t}\r };" },
  {   "m" : [ ],   "fm" : "int reverse1(int x) {\r \tint nums[10] = { 0 }, i = 0;\r \tlong result = 0;\r \t// ɵ͵ߴ\r \tfor (i = 0; i < 10; i++){\r \t\tnums[i] = x % 10;\r \t\tx = x / 10;\r \t\tif (x == 0)\r \t\t\tbreak;\r \t}\r \t// \r \tfor (int j=0; j<i+1; j++){\r \t\tresult = result * 10 + nums[j];\r \t\tif (result > 2147483647 || result < -2147483647)\r \t\t\treturn 0;\r \t}\r \t\r \treturn (int)result;\r }",   "t" : [ "void AKA_TEST_reverse1_int_random_1(void) {\n{\nAKA_test_case_name=\"reverse1_int_random_1\";\n\n// set up\n;\n\n\n\nint x=-1758245503;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test reverse1_int_random_1\");int AKA_ACTUAL_OUTPUT=reverse1(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_007 Reverse Integer\\\\_007 Reverse Integer.cpp\\\\reverse1(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_007 Reverse Integer\\_007 Reverse Integer.cpp\\reverse1(int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "int reverse(int x) {\r \tint temp =0, i = 0;\r \tlong result = 0;\r \t// ɵ͵ɨ\r \tfor (i = 0; i < 10; i++){\r \t\ttemp = x % 10;\r \t\tresult = result * 10 + temp;\r \t\tif (result > 2147483647 || result < -2147483647)\r \t\t\treturn 0;\r \t\tx = x / 10;\r \t\tif (x == 0)\r \t\t\tbreak;\r \t}\r \t\r \treturn (int)result;\r }",   "t" : [ "void AKA_TEST_reverse_int_random_1(void) {\n{\nAKA_test_case_name=\"reverse_int_random_1\";\n\n// set up\n;\n\n\n\nint x=952034234;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test reverse_int_random_1\");int AKA_ACTUAL_OUTPUT=reverse(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_007 Reverse Integer\\\\_007 Reverse Integer.cpp\\\\reverse(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_007 Reverse Integer\\_007 Reverse Integer.cpp\\reverse(int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "bool isPalindrome1(int x) {\r \tlong result = 0;\r \tint y =x;\r \tif (x < 0)\r \t\treturn false;\r \tfor (int i = 0; i < 10; i++){\r \t\tresult = result * 10 + x % 10;\r \t\tx = x / 10;\r \t\tif (x == 0)\r \t\t\tbreak;\r \t}\r \treturn result - y == 0;\r }",   "t" : [ "void AKA_TEST_isPalindrome1_int_random_0(void) {\n{\nAKA_test_case_name=\"isPalindrome1_int_random_0\";\n\n// set up\n;\n\n\n\nint x=-1514112893;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isPalindrome1_int_random_0\");bool AKA_ACTUAL_OUTPUT=isPalindrome1(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome1(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_isPalindrome1_int_random_0(void) {\n{\nAKA_test_case_name=\"isPalindrome1_int_random_0\";\n\n// set up\n;\n\n\n\nint x=-1514112893;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isPalindrome1_int_random_0\");bool AKA_ACTUAL_OUTPUT=isPalindrome1(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome1(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_009 Palindrome Number\\_009 Palindrome Number.cpp\\isPalindrome1(int)",   "c" : [ ],   "fc" : "" },
  {   "m" : [ ],   "fm" : "bool isPalindrome(int x) {\r \tint result = 0;\r \tif (x < 0 || (x % 10 == 0 && x != 0))\r \t\treturn false;\r \tfor (int i = 0; i < 10; i++){\r \t\tresult = result * 10 + x % 10;\r \t\tx = x / 10;\r \t\tif (x <= result)\r \t\t\tbreak;\r \t}\r \treturn result == x || result / 10 == x;\r }",   "t" : [ "void AKA_TEST_isPalindrome_int_random_4(void) {\n{\nAKA_test_case_name=\"isPalindrome_int_random_4\";\n\n// set up\n;\n\n\n\nint x=122726964;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isPalindrome_int_random_4\");bool AKA_ACTUAL_OUTPUT=isPalindrome(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_isPalindrome_int_random_4(void) {\n{\nAKA_test_case_name=\"isPalindrome_int_random_4\";\n\n// set up\n;\n\n\n\nint x=122726964;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isPalindrome_int_random_4\");bool AKA_ACTUAL_OUTPUT=isPalindrome(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_isPalindrome_int_random_4(void) {\n{\nAKA_test_case_name=\"isPalindrome_int_random_4\";\n\n// set up\n;\n\n\n\nint x=122726964;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalNumberDataNode x */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test isPalindrome_int_random_4\");bool AKA_ACTUAL_OUTPUT=isPalindrome(x);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\Leetcode\\\\_009 Palindrome Number\\\\_009 Palindrome Number.cpp\\\\isPalindrome(int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],   "f" : [ ],   "path_fm" : "C:\\Users\\admin\\zqxl_leetcode\\Leetcode\\_009 Palindrome Number\\_009 Palindrome Number.cpp\\isPalindrome(int)",   "c" : [ ],   "fc" : "" }
]

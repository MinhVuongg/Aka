[
  {
    "fc": "class Solution {\r public:\r   int threeSumClosest(vector<int>& nums, int target) {\r     int closet = nums[0] + nums[1] + nums[2];\r \r     int diff = abs(closet - target);\r \r     sort(nums.begin(), nums.end());\r \r     for (int i = 0; i < nums.size() - 2; i ++)\r     {\r       int left = i + 1;\r       unsigned long right = nums.size() - 1;\r \r       while (left < right)\r       {\r         int newCloset = nums[i] + nums[left] + nums[right];\r \tint newDiff = abs(newCloset - target);\r \r         if (diff > newDiff)\r         {\r \t  diff = newDiff;\r \t  closet = newCloset;\r \t}\r \r \tif (newCloset < target)\r \t{\r \t  left ++;\r \t}\r \telse\r \t{\r \t  right --;\r \t}\r       }\r     }\r \r     return closet;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1259490367;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=896848124;\nnums.push_back(nums_element0);\nint nums_element1=-35927543;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=773756818;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1766062461;\nnums.push_back(nums_element0);\nint nums_element1=335696266;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1865100189;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1756628490;\nnums.push_back(nums_element0);\nint nums_element1=-1795831476;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1771492844;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1391276197;\nnums.push_back(nums_element0);\nint nums_element1=-302912863;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1967229498;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=227845230;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_4\\solution016.cpp\\Solution\\threeSumClosest(vector<int>&,int)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_threeSumClosest_vector_int_int_random_15(void) {\n{\nAKA_test_case_name=\"Solution_threeSumClosest_vector_int_int_random_15\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1259490367;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=896848124;\nnums.push_back(nums_element0);\nint nums_element1=-35927543;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSumClosest_vector_int_int_random_15\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSumClosest(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution016.cpp\\\\Solution\\\\threeSumClosest(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_threeSumClosest_vector_int_int_random_14(void) {\n{\nAKA_test_case_name=\"Solution_threeSumClosest_vector_int_int_random_14\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=773756818;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1766062461;\nnums.push_back(nums_element0);\nint nums_element1=335696266;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSumClosest_vector_int_int_random_14\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSumClosest(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution016.cpp\\\\Solution\\\\threeSumClosest(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_threeSumClosest_vector_int_int_random_13(void) {\n{\nAKA_test_case_name=\"Solution_threeSumClosest_vector_int_int_random_13\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1865100189;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-1756628490;\nnums.push_back(nums_element0);\nint nums_element1=-1795831476;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSumClosest_vector_int_int_random_13\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSumClosest(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution016.cpp\\\\Solution\\\\threeSumClosest(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_threeSumClosest_vector_int_int_random_12(void) {\n{\nAKA_test_case_name=\"Solution_threeSumClosest_vector_int_int_random_12\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1771492844;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=1391276197;\nnums.push_back(nums_element0);\nint nums_element1=-302912863;\nnums.push_back(nums_element1);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSumClosest_vector_int_int_random_12\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSumClosest(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution016.cpp\\\\Solution\\\\threeSumClosest(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_threeSumClosest_vector_int_int_random_11(void) {\n{\nAKA_test_case_name=\"Solution_threeSumClosest_vector_int_int_random_11\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution016.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=-1967229498;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=227845230;\nnums.push_back(nums_element0);\n/* NormalNumberDataNode target */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_threeSumClosest_vector_int_int_random_11\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->threeSumClosest(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution016.cpp\\\\Solution\\\\threeSumClosest(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "int threeSumClosest(vector<int>& nums, int target) {\r     int closet = nums[0] + nums[1] + nums[2];\r \r     int diff = abs(closet - target);\r \r     sort(nums.begin(), nums.end());\r \r     for (int i = 0; i < nums.size() - 2; i ++)\r     {\r       int left = i + 1;\r       unsigned long right = nums.size() - 1;\r \r       while (left < right)\r       {\r         int newCloset = nums[i] + nums[left] + nums[right];\r \tint newDiff = abs(newCloset - target);\r \r         if (diff > newDiff)\r         {\r \t  diff = newDiff;\r \t  closet = newCloset;\r \t}\r \r \tif (newCloset < target)\r \t{\r \t  left ++;\r \t}\r \telse\r \t{\r \t  right --;\r \t}\r       }\r     }\r \r     return closet;\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   vector<string> letterCombinations(string digits) {\r     vector<string> ret;\r     if (digits.size() == 0)\r     {\r       return ret;\r     }\r     ret.push_back(\"\");\r     string letterMap[10] = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\r     for (int i = 0; i < digits.size(); i ++)\r     {\r       string letters = letterMap[digits[i] - '0'];\r       vector<string> tmp;\r       for (int j = 0; j < letters.size(); j ++)\r       {\r         for (int k = 0; k < ret.size(); k ++)\r \t{\r           tmp.push_back(ret[k] + letters[j]);\r         }  \r       }\r       ret = tmp;\r     }\r     return ret;\r   }\r };",
    "m": [ ],
    "simplified_t": [ ],
    "path_fm": "D:\\py\\test\\folder_4\\solution017.cpp\\Solution\\letterCombinations(string)",
    "c": [ "" ],
    "t": [ ],
    "f": [ ],
    "fm": "vector<string> letterCombinations(string digits) {\r     vector<string> ret;\r     if (digits.size() == 0)\r     {\r       return ret;\r     }\r     ret.push_back(\"\");\r     string letterMap[10] = {\"\", \"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\r     for (int i = 0; i < digits.size(); i ++)\r     {\r       string letters = letterMap[digits[i] - '0'];\r       vector<string> tmp;\r       for (int j = 0; j < letters.size(); j ++)\r       {\r         for (int k = 0; k < ret.size(); k ++)\r \t{\r           tmp.push_back(ret[k] + letters[j]);\r         }  \r       }\r       ret = tmp;\r     }\r     return ret;\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   ListNode* removeNthFromEnd(ListNode* head, int n) {\r     ListNode *fast = head, *slow = head;\r     while (n --)\r     {\r       fast = fast -> next;\r     }\r \r     while (fast == NULL)\r     {\r       return head -> next;\r     }  \r \r     while (fast -> next != NULL)\r     {\r       fast = fast -> next;\r       slow = slow -> next;\r     }\r \r     slow -> next = slow -> next -> next;\r     return head;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution019.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nListNode* head = nullptr;\n\n\nint n=0;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution019.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nListNode* head = nullptr;\n\n\nint n=0;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_4\\solution019.cpp\\Solution\\removeNthFromEnd(ListNode*,int)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_removeNthFromEnd_ListNodemul_int_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_removeNthFromEnd_ListNodemul_int_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution019.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nListNode* head = nullptr;\n\n\nint n=0;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeNthFromEnd_ListNodemul_int_directed_0\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeNthFromEnd(head,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution019.cpp\\\\Solution\\\\removeNthFromEnd(ListNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_removeNthFromEnd_ListNodemul_int_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_removeNthFromEnd_ListNodemul_int_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution019.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\n\nListNode* head = nullptr;\n\n\nint n=0;\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode head */\n/* NormalNumberDataNode n */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_removeNthFromEnd_ListNodemul_int_directed_1\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->removeNthFromEnd(head,n);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution019.cpp\\\\Solution\\\\removeNthFromEnd(ListNode*,int)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "ListNode* removeNthFromEnd(ListNode* head, int n) {\r     ListNode *fast = head, *slow = head;\r     while (n --)\r     {\r       fast = fast -> next;\r     }\r \r     while (fast == NULL)\r     {\r       return head -> next;\r     }  \r \r     while (fast -> next != NULL)\r     {\r       fast = fast -> next;\r       slow = slow -> next;\r     }\r \r     slow -> next = slow -> next -> next;\r     return head;\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   bool isValid(string s) {\r     stack<char> st;\r     map<char, char> m = {{')', '('}, {']', '['}, {'}', '{'}};\r     for (auto ch : s)\r     {\r       auto it = m.find(ch);\r       if (it != m.end())\r       {\r         // If not find, then it's a closing parenthense.\r         if (st.empty() || it -> second != st.top())\r \t{\r           return false;\r         }\r \telse\r \t{\r \t  st.pop();\r \t}  \r       }\r       else\r       {\r         // It's a opening parenthense.\r         st.push(ch);\r       }\t\r     }\r     return st.empty();\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName23949 = new char[2];akaRandomName23949[0] = -118;akaRandomName23949[1] = '\\0';string s=akaRandomName23949;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName972446 = new char[2];akaRandomName972446[0] = -118;akaRandomName972446[1] = '\\0';string s=akaRandomName972446;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_4\\solution020.cpp\\Solution\\isValid(string)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_isValid_string_random_4(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_random_4\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName732889 = new char[2];akaRandomName732889[0] = -118;akaRandomName732889[1] = '\\0';string s=akaRandomName732889;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_random_4\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution020.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_isValid_string_random_2(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName784882 = new char[2];akaRandomName784882[0] = -118;akaRandomName784882[1] = '\\0';string s=akaRandomName784882;\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_random_2\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution020.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_isValid_string_directed_0(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_0\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_0\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution020.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_isValid_string_directed_1(void) {\n{\nAKA_test_case_name=\"Solution_isValid_string_directed_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution020.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstring s=\"\";\n\n\nbool AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_isValid_string_directed_1\");bool AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->isValid(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution020.cpp\\\\Solution\\\\isValid(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "bool isValid(string s) {\r     stack<char> st;\r     map<char, char> m = {{')', '('}, {']', '['}, {'}', '{'}};\r     for (auto ch : s)\r     {\r       auto it = m.find(ch);\r       if (it != m.end())\r       {\r         // If not find, then it's a closing parenthense.\r         if (st.empty() || it -> second != st.top())\r \t{\r           return false;\r         }\r \telse\r \t{\r \t  st.pop();\r \t}  \r       }\r       else\r       {\r         // It's a opening parenthense.\r         st.push(ch);\r       }\t\r     }\r     return st.empty();\r   }"
  },
  {
    "fc": "class Solution {\r public:\r   ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r     ListNode *p;\r     if (l1 == NULL)\r     {\r       return l2;\r     }\r     if (l2 == NULL)\r     {\r       return l1;\r     }\r     if (l1 -> val < l2 -> val)\r     {\r       p = l1;\r       p -> next = mergeTwoLists(l1 -> next, l2);\r     }\r     else\r     {\r       p = l2;\r       p -> next = mergeTwoLists(l1, l2 -> next);\r     }\r     return p;\r   }\r };",
    "m": [ "ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r\n    ListNode *p;\r\n    if (l1 == NULL)\r\n    {\r\n      return l2;\r\n    }\r\n    if (l2 == NULL)\r\n    {\r\n      return l1;\r\n    }\r\n    if (l1 -> val < l2 -> val)\r\n    {\r\n      p = l1;\r\n      p -> next = mergeTwoLists(l1 -> next, l2);\r\n    }\r\n    else\r\n    {\r\n      p = l2;\r\n      p -> next = mergeTwoLists(l1, l2 -> next);\r\n    }\r\n    return p;\r\n  }", "ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r\n    ListNode *p;\r\n    if (l1 == NULL)\r\n    {\r\n      return l2;\r\n    }\r\n    if (l2 == NULL)\r\n    {\r\n      return l1;\r\n    }\r\n    if (l1 -> val < l2 -> val)\r\n    {\r\n      p = l1;\r\n      p -> next = mergeTwoLists(l1 -> next, l2);\r\n    }\r\n    else\r\n    {\r\n      p = l2;\r\n      p -> next = mergeTwoLists(l1, l2 -> next);\r\n    }\r\n    return p;\r\n  }" ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution021.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=1356363650;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0).val=972839802;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_next0_x=1846095298;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0_DOT_next_0 = new ::ListNode(l10_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_0).val=1321907332;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_0).next;\nAKA_VECTOR_INIT_l1_0_DOT_next.push_back(AKA_VECTOR_INIT_l1_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_next1_x=-665689726;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0_DOT_next_1 = new ::ListNode(l10_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_1).val=791447698;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_1).next;\nAKA_VECTOR_INIT_l1_0_DOT_next.push_back(AKA_VECTOR_INIT_l1_0_DOT_next_1);\n(*AKA_VECTOR_INIT_l1_0).next = AKA_VECTOR_INIT_l1_0_DOT_next[0];\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2;\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_x=-55553917;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0 = new ::ListNode(l20_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0).val=1591476548;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_next0_x=48331374;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0_DOT_next_0 = new ::ListNode(l20_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).val=-568957127;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).next;\nAKA_VECTOR_INIT_l2_0_DOT_next.push_back(AKA_VECTOR_INIT_l2_0_DOT_next_0);\n(*AKA_VECTOR_INIT_l2_0).next = AKA_VECTOR_INIT_l2_0_DOT_next[0];\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_0);\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_x=-313487228;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1 = new ::ListNode(l21_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1).val=-204519947;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1).next;\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_1);\n\nListNode* l2 = AKA_VECTOR_INIT_l2[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_4\\solution021.cpp\\Solution\\mergeTwoLists(ListNode*,ListNode*)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_mergeTwoLists_ListNodemul_ListNodemul_random_1(void) {\n{\nAKA_test_case_name=\"Solution_mergeTwoLists_ListNodemul_ListNodemul_random_1\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution021.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=1356363650;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0).val=972839802;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_next0_x=1846095298;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0_DOT_next_0 = new ::ListNode(l10_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_0).val=1321907332;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_0).next;\nAKA_VECTOR_INIT_l1_0_DOT_next.push_back(AKA_VECTOR_INIT_l1_0_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_next1_x=-665689726;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0_DOT_next_1 = new ::ListNode(l10_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_1).val=791447698;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0_DOT_next_1).next;\nAKA_VECTOR_INIT_l1_0_DOT_next.push_back(AKA_VECTOR_INIT_l1_0_DOT_next_1);\n(*AKA_VECTOR_INIT_l1_0).next = AKA_VECTOR_INIT_l1_0_DOT_next[0];\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2;\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_x=-55553917;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0 = new ::ListNode(l20_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0).val=1591476548;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_next0_x=48331374;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0_DOT_next_0 = new ::ListNode(l20_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).val=-568957127;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).next;\nAKA_VECTOR_INIT_l2_0_DOT_next.push_back(AKA_VECTOR_INIT_l2_0_DOT_next_0);\n(*AKA_VECTOR_INIT_l2_0).next = AKA_VECTOR_INIT_l2_0_DOT_next[0];\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_0);\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_x=-313487228;\nAKA_mark(\"Calling: .\\\\folder_4\\\\solution019.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution021.cpp\\\\mergeTwoLists(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1 = new ::ListNode(l21_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1).val=-204519947;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1).next;\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_1);\n\nListNode* l2 = AKA_VECTOR_INIT_l2[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_mergeTwoLists_ListNodemul_ListNodemul_random_1\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->mergeTwoLists(l1,l2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_4\\\\solution021.cpp\\\\Solution\\\\mergeTwoLists(ListNode*,ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ],
    "fm": "ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r     ListNode *p;\r     if (l1 == NULL)\r     {\r       return l2;\r     }\r     if (l2 == NULL)\r     {\r       return l1;\r     }\r     if (l1 -> val < l2 -> val)\r     {\r       p = l1;\r       p -> next = mergeTwoLists(l1 -> next, l2);\r     }\r     else\r     {\r       p = l2;\r       p -> next = mergeTwoLists(l1, l2 -> next);\r     }\r     return p;\r   }"
  }
]

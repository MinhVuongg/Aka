[
  {
    "fm": "vector<int> twoSum(vector<int>& nums, int target)\r     {\r       vector<int> output(2);\r       unordered_map<int, int> umap;\r \r       for (int i = 0, size = nums.size(); i < size; i ++)\r       {\r \tif (umap.find(target - nums[i]) != umap.end())\r \t{\r \t  output[0] = umap[target - nums[i]];\r \t  output[1] = i;\r \t}\r \telse\r \t{\r \t  umap.insert(make_pair(nums[i], i));\r \t}\r       }\r       return output;\r     }",
    "fc": "class Solution\r {\r   public:\r     vector<int> twoSum(vector<int>& nums, int target)\r     {\r       vector<int> output(2);\r       unordered_map<int, int> umap;\r \r       for (int i = 0, size = nums.size(); i < size; i ++)\r       {\r \tif (umap.find(target - nums[i]) != umap.end())\r \t{\r \t  output[0] = umap[target - nums[i]];\r \t  output[1] = i;\r \t}\r \telse\r \t{\r \t  umap.insert(make_pair(nums[i], i));\r \t}\r       }\r       return output;\r     }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution001.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1632170848;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-357825271;\nnums.push_back(nums_element0);\nint nums_element1=-1550159756;\nnums.push_back(nums_element1);\nint nums_element2=1805838230;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_1\\solution001.cpp\\Solution\\twoSum(vector<int>&,int)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_twoSum_vector_int_int_random_6(void) {\n{\nAKA_test_case_name=\"Solution_twoSum_vector_int_int_random_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution001.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums;\n\n\nint target=1632170848;\nvector<int> AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums */\nint nums_element0=-357825271;\nnums.push_back(nums_element0);\nint nums_element1=-1550159756;\nnums.push_back(nums_element1);\nint nums_element2=1805838230;\nnums.push_back(nums_element2);\n/* NormalNumberDataNode target */\n/* VectorDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_twoSum_vector_int_int_random_6\");vector<int> AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->twoSum(nums,target);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution001.cpp\\\\Solution\\\\twoSum(vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\r     if (l1 == NULL)\r       {\r \treturn l2;\r       }\r     if (l2 == NULL)\r       {\r \treturn l1;\r       }\r     ListNode *p, *l3;\r     p = new ListNode(-1);\r     int carry = 0;\r     l3 = p;\r \r     while (l1 != NULL || l2 != NULL)\r       {\r \tif (l1 != NULL)\r \t  {\r \t    carry += l1 -> val;\r \t    l1 = l1 -> next;\r \t  }\r \tif (l2 != NULL)\r \t  {\r \t    carry += l2 -> val;\r \t    l2 = l2 -> next;\r \t  }\r \tl3 -> next = new ListNode(carry % 10);\r \tl3 = l3 -> next;\r \tcarry = carry / 10;\r       }\r \r     if (carry == 1)\r       {\r \tl3 -> next = new ListNode(1);\r       }\r     return p -> next;\r   }",
    "fc": "class Solution {\r public:\r   ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\r     if (l1 == NULL)\r       {\r \treturn l2;\r       }\r     if (l2 == NULL)\r       {\r \treturn l1;\r       }\r     ListNode *p, *l3;\r     p = new ListNode(-1);\r     int carry = 0;\r     l3 = p;\r \r     while (l1 != NULL || l2 != NULL)\r       {\r \tif (l1 != NULL)\r \t  {\r \t    carry += l1 -> val;\r \t    l1 = l1 -> next;\r \t  }\r \tif (l2 != NULL)\r \t  {\r \t    carry += l2 -> val;\r \t    l2 = l2 -> next;\r \t  }\r \tl3 -> next = new ListNode(carry % 10);\r \tl3 = l3 -> next;\r \tcarry = carry / 10;\r       }\r \r     if (carry == 1)\r       {\r \tl3 -> next = new ListNode(1);\r       }\r     return p -> next;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution002.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=-987353540;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0).val=-920029549;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=1238750916;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_1).val=340972417;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_next0_x=1722028580;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1_DOT_next_0 = new ::ListNode(l11_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_0).val=1593838514;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_0).next;\nAKA_VECTOR_INIT_l1_1_DOT_next.push_back(AKA_VECTOR_INIT_l1_1_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_next1_x=1255689405;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1_DOT_next_1 = new ::ListNode(l11_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_1).val=-185434113;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_1).next;\nAKA_VECTOR_INIT_l1_1_DOT_next.push_back(AKA_VECTOR_INIT_l1_1_DOT_next_1);\n(*AKA_VECTOR_INIT_l1_1).next = AKA_VECTOR_INIT_l1_1_DOT_next[0];\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2;\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_x=-1002097503;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0 = new ::ListNode(l20_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0).val=627974850;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_next0_x=-548548486;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0_DOT_next_0 = new ::ListNode(l20_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).val=256694353;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).next;\nAKA_VECTOR_INIT_l2_0_DOT_next.push_back(AKA_VECTOR_INIT_l2_0_DOT_next_0);\n(*AKA_VECTOR_INIT_l2_0).next = AKA_VECTOR_INIT_l2_0_DOT_next[0];\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_0);\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_x=-1944501001;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1 = new ::ListNode(l21_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1).val=837313335;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_next0_x=-567485742;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1_DOT_next_0 = new ::ListNode(l21_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_0).val=-165949613;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_0).next;\nAKA_VECTOR_INIT_l2_1_DOT_next.push_back(AKA_VECTOR_INIT_l2_1_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_next1_x=782049315;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1_DOT_next_1 = new ::ListNode(l21_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_1).val=-1374931652;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_1).next;\nAKA_VECTOR_INIT_l2_1_DOT_next.push_back(AKA_VECTOR_INIT_l2_1_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_next2_x=1594570929;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1_DOT_next_2 = new ::ListNode(l21_next2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_2).val=-2115303642;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_2).next;\nAKA_VECTOR_INIT_l2_1_DOT_next.push_back(AKA_VECTOR_INIT_l2_1_DOT_next_2);\n(*AKA_VECTOR_INIT_l2_1).next = AKA_VECTOR_INIT_l2_1_DOT_next[0];\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_1);\n\nListNode* l2 = AKA_VECTOR_INIT_l2[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_1\\solution002.cpp\\Solution\\addTwoNumbers(ListNode*,ListNode*)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_addTwoNumbers_ListNodemul_ListNodemul_random_2(void) {\n{\nAKA_test_case_name=\"Solution_addTwoNumbers_ListNodemul_ListNodemul_random_2\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution002.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1;\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l10_x=-987353540;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_0\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_0 = new ::ListNode(l10_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_0).val=-920029549;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_0).next;\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_0);\n\n\n/* SubStructDataNode l1 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_x=1238750916;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1 = new ::ListNode(l11_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_1).val=340972417;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l1_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_next0_x=1722028580;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1_DOT_next_0 = new ::ListNode(l11_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_0).val=1593838514;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_0).next;\nAKA_VECTOR_INIT_l1_1_DOT_next.push_back(AKA_VECTOR_INIT_l1_1_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l11_next1_x=1255689405;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l1\\\\AKA_VECTOR_INIT_l1_1\\\\l1\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l1_1_DOT_next_1 = new ::ListNode(l11_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_1).val=-185434113;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l1_1_DOT_next_1).next;\nAKA_VECTOR_INIT_l1_1_DOT_next.push_back(AKA_VECTOR_INIT_l1_1_DOT_next_1);\n(*AKA_VECTOR_INIT_l1_1).next = AKA_VECTOR_INIT_l1_1_DOT_next[0];\n\nAKA_VECTOR_INIT_l1.push_back(AKA_VECTOR_INIT_l1_1);\n\nListNode* l1 = AKA_VECTOR_INIT_l1[0];\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2;\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_x=-1002097503;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0 = new ::ListNode(l20_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0).val=627974850;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2_0_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l20_next0_x=-548548486;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_0\\\\l2\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_0_DOT_next_0 = new ::ListNode(l20_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).val=256694353;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_0_DOT_next_0).next;\nAKA_VECTOR_INIT_l2_0_DOT_next.push_back(AKA_VECTOR_INIT_l2_0_DOT_next_0);\n(*AKA_VECTOR_INIT_l2_0).next = AKA_VECTOR_INIT_l2_0_DOT_next[0];\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_0);\n\n\n/* SubStructDataNode l2 */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_x=-1944501001;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1 = new ::ListNode(l21_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1).val=837313335;\n/* PointerStructureDataNode next */\nstd::vector<ListNode*> AKA_VECTOR_INIT_l2_1_DOT_next;\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_next0_x=-567485742;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\next\\\\next[0]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1_DOT_next_0 = new ::ListNode(l21_next0_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_0).val=-165949613;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_0).next;\nAKA_VECTOR_INIT_l2_1_DOT_next.push_back(AKA_VECTOR_INIT_l2_1_DOT_next_0);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_next1_x=782049315;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\next\\\\next[1]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1_DOT_next_1 = new ::ListNode(l21_next1_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_1).val=-1374931652;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_1).next;\nAKA_VECTOR_INIT_l2_1_DOT_next.push_back(AKA_VECTOR_INIT_l2_1_DOT_next_1);\n/* SubStructDataNode next */\n/* ConstructorDataNode ListNode(int) */\n/* NormalNumberDataNode x */\nint l21_next2_x=1594570929;\nAKA_mark(\"Calling: .\\\\folder_1\\\\solution002.cpp\\\\ListNode\\\\ListNode(int)|ROOT\\\\solution002.cpp\\\\addTwoNumbers(ListNode*,ListNode*)\\\\l2\\\\AKA_VECTOR_INIT_l2_1\\\\l2\\\\next\\\\next[2]\\\\next\\\\ListNode(int)\");AKA_fCall++;auto AKA_VECTOR_INIT_l2_1_DOT_next_2 = new ::ListNode(l21_next2_x);\n/* NormalNumberDataNode val */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_2).val=-2115303642;\n/* PointerStructureDataNode next */\n(*AKA_VECTOR_INIT_l2_1_DOT_next_2).next;\nAKA_VECTOR_INIT_l2_1_DOT_next.push_back(AKA_VECTOR_INIT_l2_1_DOT_next_2);\n(*AKA_VECTOR_INIT_l2_1).next = AKA_VECTOR_INIT_l2_1_DOT_next[0];\n\nAKA_VECTOR_INIT_l2.push_back(AKA_VECTOR_INIT_l2_1);\n\nListNode* l2 = AKA_VECTOR_INIT_l2[0];\nListNode* AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* PointerStructureDataNode l1 */\n/* PointerStructureDataNode l2 */\n/* PointerStructureDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_addTwoNumbers_ListNodemul_ListNodemul_random_2\");ListNode* AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->addTwoNumbers(l1,l2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution002.cpp\\\\Solution\\\\addTwoNumbers(ListNode*,ListNode*)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "int lengthOfLongestSubstring(string s) {\r     int hash[256];\r \r     int maxLen = 0, distance, i, j;\r     if (s.length() == 1)\r     {\r       return 1;\r     }\r     for (i = 0; i < s.length(); i ++)\r     {\r       memset(hash, 0, sizeof(hash));\r       hash[s[i]] = 1;\r \r       for (j = i + 1; j < s.length(); j ++)\r       {\r \tif (hash[s[j]] == 0)\r \t{\t  \r \t  hash[s[j]] = 1;\r \t}\r \telse\r \t{\r \t  distance = j - i;\r \t  maxLen = distance > maxLen ? distance : maxLen;\r \t  break;\r \t}\r       } \r \r       if (j == s.length() && j - i > maxLen)\r       {\r         maxLen = j - i;\r       }\t\r     }\r     return maxLen;\r   }",
    "fc": "class Solution {\r public:\r   int lengthOfLongestSubstring(string s) {\r     int hash[256];\r \r     int maxLen = 0, distance, i, j;\r     if (s.length() == 1)\r     {\r       return 1;\r     }\r     for (i = 0; i < s.length(); i ++)\r     {\r       memset(hash, 0, sizeof(hash));\r       hash[s[i]] = 1;\r \r       for (j = i + 1; j < s.length(); j ++)\r       {\r \tif (hash[s[j]] == 0)\r \t{\t  \r \t  hash[s[j]] = 1;\r \t}\r \telse\r \t{\r \t  distance = j - i;\r \t  maxLen = distance > maxLen ? distance : maxLen;\r \t  break;\r \t}\r       } \r \r       if (j == s.length() && j - i > maxLen)\r       {\r         maxLen = j - i;\r       }\t\r     }\r     return maxLen;\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution003.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName965028 = new char[2];akaRandomName965028[0] = 85;akaRandomName965028[1] = '\\0';string s=akaRandomName965028;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_1\\solution003.cpp\\Solution\\lengthOfLongestSubstring(string)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_lengthOfLongestSubstring_string_random_5(void) {\n{\nAKA_test_case_name=\"Solution_lengthOfLongestSubstring_string_random_5\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution003.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName716213 = new char[2];akaRandomName716213[0] = 85;akaRandomName716213[1] = '\\0';string s=akaRandomName716213;\n\n\nint AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_lengthOfLongestSubstring_string_random_5\");int AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->lengthOfLongestSubstring(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution003.cpp\\\\Solution\\\\lengthOfLongestSubstring(string)\");\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\r     int size1 = nums1.size(), size2 = nums2.size();\r \r     if ((size1 + size2) % 2 == 0)\r     {\r       return (findKth(nums1, nums2, (size1 + size2) / 2) + findKth(nums1, nums2, (size1 + size2) / 2 + 1)) / 2;\r     }\r     else\r     {\r       return findKth(nums1, nums2, (size1 + size2 + 1) / 2);\r     }\r   }",
    "fc": "class Solution {\r public:\r   double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\r     int size1 = nums1.size(), size2 = nums2.size();\r \r     if ((size1 + size2) % 2 == 0)\r     {\r       return (findKth(nums1, nums2, (size1 + size2) / 2) + findKth(nums1, nums2, (size1 + size2) / 2 + 1)) / 2;\r     }\r     else\r     {\r       return findKth(nums1, nums2, (size1 + size2 + 1) / 2);\r     }\r   }\r \r   // Merge and count to find Kth of two sorted arrays.\r   double findKth(vector<int>& nums1, vector<int>& nums2, int k)\r   {\r     int p = 0, q = 0;               // Two pointers fo vector\r     int size1 = nums1.size(), size2 = nums2.size();\r     for (int i = 0; i < k - 1; i ++)\r     {\r       // Overflow case.\r       if (p >= size1)\r       {\r \tq ++;\r       }\r       else if (q >= size2)\r       {\r \tp ++;\r       }\t\r       else if (nums1[p] <= nums2[q])\r       {\r \tp ++;\r       }\r       else\r       {\r \tq ++;\r       }\t\r     }\r     if (p >= size1)\r     {\r       return nums2[q];\r     }\r     else if (q >= size2)\r     {\r       return nums1[p];\r     }\r     else\r     {\r       return min(nums1[p], nums2[q]);\r     }\r   }  \r };",
    "m": [ "double findKth(vector<int>& nums1, vector<int>& nums2, int k)\r\n  {\r\n    int p = 0, q = 0;               // Two pointers fo vector\r\n    int size1 = nums1.size(), size2 = nums2.size();\r\n    for (int i = 0; i < k - 1; i ++)\r\n    {\r\n      // Overflow case.\r\n      if (p >= size1)\r\n      {\r\n\tq ++;\r\n      }\r\n      else if (q >= size2)\r\n      {\r\n\tp ++;\r\n      }\t\r\n      else if (nums1[p] <= nums2[q])\r\n      {\r\n\tp ++;\r\n      }\r\n      else\r\n      {\r\n\tq ++;\r\n      }\t\r\n    }\r\n    if (p >= size1)\r\n    {\r\n      return nums2[q];\r\n    }\r\n    else if (q >= size2)\r\n    {\r\n      return nums1[p];\r\n    }\r\n    else\r\n    {\r\n      return min(nums1[p], nums2[q]);\r\n    }\r\n  }" ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=641813666;\nnums1.push_back(nums1_element0);\nint nums1_element1=585127469;\nnums1.push_back(nums1_element1);\nint nums1_element2=1967141249;\nnums1.push_back(nums1_element2);\n/* VectorDataNode nums2 */\nint nums2_element0=-1495413038;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=-592876962;\nnums1.push_back(nums1_element0);\nint nums1_element1=955478437;\nnums1.push_back(nums1_element1);\n/* VectorDataNode nums2 */\nint nums2_element0=1028645368;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_1\\solution004.cpp\\Solution\\findMedianSortedArrays(vector<int>&,vector<int>&)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_findMedianSortedArrays_vector_int_vector_int_random_8(void) {\n{\nAKA_test_case_name=\"Solution_findMedianSortedArrays_vector_int_vector_int_random_8\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=641813666;\nnums1.push_back(nums1_element0);\nint nums1_element1=585127469;\nnums1.push_back(nums1_element1);\nint nums1_element2=1967141249;\nnums1.push_back(nums1_element2);\n/* VectorDataNode nums2 */\nint nums2_element0=-1495413038;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findMedianSortedArrays_vector_int_vector_int_random_8\");double AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findMedianSortedArrays(nums1,nums2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution004.cpp\\\\Solution\\\\findMedianSortedArrays(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_findMedianSortedArrays_vector_int_vector_int_random_6(void) {\n{\nAKA_test_case_name=\"Solution_findMedianSortedArrays_vector_int_vector_int_random_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=-592876962;\nnums1.push_back(nums1_element0);\nint nums1_element1=955478437;\nnums1.push_back(nums1_element1);\n/* VectorDataNode nums2 */\nint nums2_element0=1028645368;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findMedianSortedArrays_vector_int_vector_int_random_6\");double AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findMedianSortedArrays(nums1,nums2);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution004.cpp\\\\Solution\\\\findMedianSortedArrays(vector<int>&,vector<int>&)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "double findKth(vector<int>& nums1, vector<int>& nums2, int k)\r   {\r     int p = 0, q = 0;               // Two pointers fo vector\r     int size1 = nums1.size(), size2 = nums2.size();\r     for (int i = 0; i < k - 1; i ++)\r     {\r       // Overflow case.\r       if (p >= size1)\r       {\r \tq ++;\r       }\r       else if (q >= size2)\r       {\r \tp ++;\r       }\t\r       else if (nums1[p] <= nums2[q])\r       {\r \tp ++;\r       }\r       else\r       {\r \tq ++;\r       }\t\r     }\r     if (p >= size1)\r     {\r       return nums2[q];\r     }\r     else if (q >= size2)\r     {\r       return nums1[p];\r     }\r     else\r     {\r       return min(nums1[p], nums2[q]);\r     }\r   }",
    "fc": "class Solution {\r public:\r   double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\r     int size1 = nums1.size(), size2 = nums2.size();\r \r     if ((size1 + size2) % 2 == 0)\r     {\r       return (findKth(nums1, nums2, (size1 + size2) / 2) + findKth(nums1, nums2, (size1 + size2) / 2 + 1)) / 2;\r     }\r     else\r     {\r       return findKth(nums1, nums2, (size1 + size2 + 1) / 2);\r     }\r   }\r \r   // Merge and count to find Kth of two sorted arrays.\r   double findKth(vector<int>& nums1, vector<int>& nums2, int k)\r   {\r     int p = 0, q = 0;               // Two pointers fo vector\r     int size1 = nums1.size(), size2 = nums2.size();\r     for (int i = 0; i < k - 1; i ++)\r     {\r       // Overflow case.\r       if (p >= size1)\r       {\r \tq ++;\r       }\r       else if (q >= size2)\r       {\r \tp ++;\r       }\t\r       else if (nums1[p] <= nums2[q])\r       {\r \tp ++;\r       }\r       else\r       {\r \tq ++;\r       }\t\r     }\r     if (p >= size1)\r     {\r       return nums2[q];\r     }\r     else if (q >= size2)\r     {\r       return nums1[p];\r     }\r     else\r     {\r       return min(nums1[p], nums2[q]);\r     }\r   }  \r };",
    "m": [ "double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\r\n    int size1 = nums1.size(), size2 = nums2.size();\r\n\r\n    if ((size1 + size2) % 2 == 0)\r\n    {\r\n      return (findKth(nums1, nums2, (size1 + size2) / 2) + findKth(nums1, nums2, (size1 + size2) / 2 + 1)) / 2;\r\n    }\r\n    else\r\n    {\r\n      return findKth(nums1, nums2, (size1 + size2 + 1) / 2);\r\n    }\r\n  }" ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint k=6;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1562024095;\nnums1.push_back(nums1_element0);\n/* VectorDataNode nums2 */\nint nums2_element0=-1787702199;\nnums2.push_back(nums2_element0);\nint nums2_element1=-377321088;\nnums2.push_back(nums2_element1);\nint nums2_element2=230129337;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint k=3;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1235438173;\nnums1.push_back(nums1_element0);\nint nums1_element1=-1846094441;\nnums1.push_back(nums1_element1);\n/* VectorDataNode nums2 */\nint nums2_element0=1949199142;\nnums2.push_back(nums2_element0);\nint nums2_element1=-1782832255;\nnums2.push_back(nums2_element1);\nint nums2_element2=1242942995;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n", "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint k=3;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=724378419;\nnums1.push_back(nums1_element0);\nint nums1_element1=-1080122034;\nnums1.push_back(nums1_element1);\nint nums1_element2=444773563;\nnums1.push_back(nums1_element2);\n/* VectorDataNode nums2 */\nint nums2_element0=-326121025;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_1\\solution004.cpp\\Solution\\findKth(vector<int>&,vector<int>&,int)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_findKth_vector_int_vector_int_int_random_6(void) {\n{\nAKA_test_case_name=\"Solution_findKth_vector_int_vector_int_int_random_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint k=6;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1562024095;\nnums1.push_back(nums1_element0);\n/* VectorDataNode nums2 */\nint nums2_element0=-1787702199;\nnums2.push_back(nums2_element0);\nint nums2_element1=-377321088;\nnums2.push_back(nums2_element1);\nint nums2_element2=230129337;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findKth_vector_int_vector_int_int_random_6\");double AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findKth(nums1,nums2,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution004.cpp\\\\Solution\\\\findKth(vector<int>&,vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_findKth_vector_int_vector_int_int_random_7(void) {\n{\nAKA_test_case_name=\"Solution_findKth_vector_int_vector_int_int_random_7\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint k=3;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=1235438173;\nnums1.push_back(nums1_element0);\nint nums1_element1=-1846094441;\nnums1.push_back(nums1_element1);\n/* VectorDataNode nums2 */\nint nums2_element0=1949199142;\nnums2.push_back(nums2_element0);\nint nums2_element1=-1782832255;\nnums2.push_back(nums2_element1);\nint nums2_element2=1242942995;\nnums2.push_back(nums2_element2);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findKth_vector_int_vector_int_int_random_7\");double AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findKth(nums1,nums2,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution004.cpp\\\\Solution\\\\findKth(vector<int>&,vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n", "void AKA_TEST_Solution_findKth_vector_int_vector_int_int_random_9(void) {\n{\nAKA_test_case_name=\"Solution_findKth_vector_int_vector_int_int_random_9\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution004.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nvector<int> nums1;\nvector<int> nums2;\n\n\nint k=3;\n\n\ndouble AKA_EXPECTED_OUTPUT;\n\n/* RootDataNode STATIC */\n/* VectorDataNode nums1 */\nint nums1_element0=724378419;\nnums1.push_back(nums1_element0);\nint nums1_element1=-1080122034;\nnums1.push_back(nums1_element1);\nint nums1_element2=444773563;\nnums1.push_back(nums1_element2);\n/* VectorDataNode nums2 */\nint nums2_element0=-326121025;\nnums2.push_back(nums2_element0);\n/* NormalNumberDataNode k */\n/* NormalNumberDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_findKth_vector_int_vector_int_int_random_9\");double AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->findKth(nums1,nums2,k);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution004.cpp\\\\Solution\\\\findKth(vector<int>&,vector<int>&,int)\");\n\n\nvector<int> EXPECTED_nums1;\n\nvector<int> EXPECTED_nums2;\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  },
  {
    "fm": "string longestPalindrome(string s) {\r     // Note: don't use vector, when s.size() >= 1000, it will cause time limited exceed\r     //    vector<vector<int> > dp(1000, vector<int>(1000, false));\r \r     bool dp[1000][1000];\r     memset(dp, 0, sizeof(dp));\r     int start = 0;\r     int maxLen = 0;\r     for (int i = 0; i < s.size(); i ++)\r     {\r       for (int j = 0; j <= i; j ++)\r       {\r \tif (i - j < 2)\r \t{\r \t  dp[j][i] = s[i] == s[j];\r \t}\r \telse\r \t{\r \t  dp[j][i] = s[i] == s[j] && dp[j + 1][i - 1];\r \t}\r \tif (dp[j][i] && i - j + 1 > maxLen)\r \t{\r \t  maxLen = i - j + 1;\r \t  start = j;\r \t}\r       }\r     }\r     return s.substr(start, maxLen);\r   }",
    "fc": "class Solution {\r public:\r   string longestPalindrome(string s) {\r     // Note: don't use vector, when s.size() >= 1000, it will cause time limited exceed\r     //    vector<vector<int> > dp(1000, vector<int>(1000, false));\r \r     bool dp[1000][1000];\r     memset(dp, 0, sizeof(dp));\r     int start = 0;\r     int maxLen = 0;\r     for (int i = 0; i < s.size(); i ++)\r     {\r       for (int j = 0; j <= i; j ++)\r       {\r \tif (i - j < 2)\r \t{\r \t  dp[j][i] = s[i] == s[j];\r \t}\r \telse\r \t{\r \t  dp[j][i] = s[i] == s[j] && dp[j + 1][i - 1];\r \t}\r \tif (dp[j][i] && i - j + 1 > maxLen)\r \t{\r \t  maxLen = i - j + 1;\r \t  start = j;\r \t}\r       }\r     }\r     return s.substr(start, maxLen);\r   }\r };",
    "m": [ ],
    "simplified_t": [ "\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution005.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName285186 = new char[2];akaRandomName285186[0] = -88;akaRandomName285186[1] = '\\0';string s=akaRandomName285186;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n" ],
    "path_fm": "D:\\py\\test\\folder_1\\solution005.cpp\\Solution\\longestPalindrome(string)",
    "c": [ "" ],
    "t": [ "void AKA_TEST_Solution_longestPalindrome_string_random_6(void) {\n{\nAKA_test_case_name=\"Solution_longestPalindrome_string_random_6\";\n\n// set up\n;\n\n\n/* SubClassDataNode AKA_INSTANCE___Solution */\n/* ConstructorDataNode Solution() */\nAKA_mark(\"Calling: \\\\Solution()|ROOT\\\\solution005.cpp\\\\GLOBAL\\\\AKA_INSTANCE___Solution\\\\AKA_INSTANCE___Solution\\\\Solution()\");AKA_fCall++;AKA_INSTANCE___Solution = new ::Solution();\n\n\nchar* akaRandomName386641 = new char[2];akaRandomName386641[0] = -88;akaRandomName386641[1] = '\\0';string s=akaRandomName386641;\nstring AKA_EXPECTED_OUTPUT=\"\";\n\n/* RootDataNode STATIC */\n/* NormalStringDataNode s */\n/* NormalStringDataNode RETURN */\n\n\n\nAKA_mark(\"<<PRE-CALLING>> Test Solution_longestPalindrome_string_random_6\");string AKA_ACTUAL_OUTPUT=AKA_INSTANCE___Solution->longestPalindrome(s);\nAKA_fCall++;AKA_mark(\"Return from: .\\\\folder_1\\\\solution005.cpp\\\\Solution\\\\longestPalindrome(string)\");\n\n\n\n\n\n// tear down\n;\n}\n}\n" ],
    "f": [ ]
  }
]
